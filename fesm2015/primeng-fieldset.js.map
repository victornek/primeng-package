{"version":3,"file":"primeng-fieldset.js","sources":["../../src/app/components/fieldset/fieldset.ts","../../src/app/components/fieldset/primeng-fieldset.ts"],"sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,ElementRef,ChangeDetectionStrategy, ViewEncapsulation, AfterContentInit, QueryList, ContentChildren, TemplateRef} from '@angular/core';\r\nimport {trigger,state,style,transition,animate} from '@angular/animations';\r\nimport {CommonModule} from '@angular/common';\r\nimport {SharedModule, PrimeTemplate} from 'primeng/api';\r\nimport {BlockableUI} from 'primeng/api';\r\nimport {RippleModule} from 'primeng/ripple';  \r\n\r\nlet idx: number = 0;\r\n\r\n@Component({\r\n    selector: 'p-fieldset',\r\n    template: `\r\n        <fieldset [attr.id]=\"id\" [ngClass]=\"{'p-fieldset p-component': true, 'p-fieldset-toggleable': toggleable}\" [ngStyle]=\"style\" [class]=\"styleClass\">\r\n            <legend class=\"p-fieldset-legend\">\r\n                <ng-container *ngIf=\"toggleable; else legendContent\">\r\n                    <a tabindex=\"0\" (click)=\"toggle($event)\" (keydown.enter)=\"toggle($event)\" [attr.aria-controls]=\"id + '-content'\" [attr.aria-expanded]=\"!collapsed\" pRipple>\r\n                        <span class=\"p-fieldset-toggler pi\" *ngIf=\"toggleable\" [ngClass]=\"{'pi-minus': !collapsed,'pi-plus':collapsed}\"></span>\r\n                        <ng-container *ngTemplateOutlet=\"legendContent\"></ng-container>\r\n                    </a>\r\n                </ng-container>\r\n                <ng-template #legendContent>\r\n                    <span class=\"p-fieldset-legend-text\">{{legend}}</span>\r\n                    <ng-content select=\"p-header\"></ng-content>\r\n                    <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\r\n                </ng-template>\r\n            </legend>\r\n            <div [attr.id]=\"id + '-content'\" class=\"p-toggleable-content\" [@fieldsetContent]=\"collapsed ? {value: 'hidden', params: {transitionParams: transitionOptions, height: '0'}} : {value: 'visible', params: {transitionParams: animating ? transitionOptions : '0ms', height: '*'}}\" \r\n                        [attr.aria-labelledby]=\"id\" [attr.aria-hidden]=\"collapsed\"\r\n                         (@fieldsetContent.done)=\"onToggleDone($event)\" role=\"region\">\r\n                <div class=\"p-fieldset-content\">\r\n                    <ng-content></ng-content>\r\n                    <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\r\n                </div>\r\n            </div>\r\n        </fieldset>\r\n    `,\r\n    animations: [\r\n        trigger('fieldsetContent', [\r\n            state('hidden', style({\r\n                height: '0',\r\n                overflow: 'hidden'\r\n            })),\r\n            state('visible', style({\r\n                height: '*'\r\n            })),\r\n            transition('visible <=> hidden', [style({overflow: 'hidden'}), animate('{{transitionParams}}')]),\r\n            transition('void => *', animate(0))\r\n        ])\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None,\r\n    styleUrls: ['./fieldset.css']\r\n})\r\nexport class Fieldset implements AfterContentInit,BlockableUI {\r\n\r\n    @Input() legend: string;\r\n\r\n    @Input() toggleable: boolean;\r\n\r\n    @Input() collapsed: boolean = false;\r\n\r\n    @Output() collapsedChange: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onBeforeToggle: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onAfterToggle: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Input() style: any;\r\n        \r\n    @Input() styleClass: string;\r\n\r\n    @Input() transitionOptions: string = '400ms cubic-bezier(0.86, 0, 0.07, 1)';\r\n\r\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\r\n    \r\n    public animating: boolean;\r\n\r\n    headerTemplate: TemplateRef<any>;\r\n\r\n    contentTemplate: TemplateRef<any>;\r\n    \r\n    constructor(private el: ElementRef) {}\r\n    \r\n    id: string = `p-fieldset-${idx++}`;\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch(item.getType()) {\r\n                case 'header':\r\n                    this.headerTemplate = item.template;\r\n                break;\r\n\r\n                case 'content':\r\n                    this.contentTemplate = item.template;\r\n                break;\r\n            }\r\n        });\r\n    }\r\n        \r\n    toggle(event) {\r\n        if (this.animating) {\r\n            return false;\r\n        }\r\n        \r\n        this.animating = true;\r\n        this.onBeforeToggle.emit({originalEvent: event, collapsed: this.collapsed});\r\n        \r\n        if (this.collapsed)\r\n            this.expand(event);\r\n        else\r\n            this.collapse(event);\r\n            \r\n        this.onAfterToggle.emit({originalEvent: event, collapsed: this.collapsed});   \r\n        event.preventDefault();\r\n    }\r\n    \r\n    expand(event) {\r\n        this.collapsed = false;\r\n        this.collapsedChange.emit(this.collapsed);\r\n    }\r\n    \r\n    collapse(event) {\r\n        this.collapsed = true;\r\n        this.collapsedChange.emit(this.collapsed);\r\n    }\r\n    \r\n    getBlockableElement(): HTMLElementÂ {\r\n        return this.el.nativeElement.children[0];\r\n    }\r\n    \r\n    onToggleDone(event: Event) {\r\n        this.animating = false;\r\n    }\r\n\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule,RippleModule],\r\n    exports: [Fieldset,SharedModule],\r\n    declarations: [Fieldset]\r\n})\r\nexport class FieldsetModule { }","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}