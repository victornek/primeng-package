{"version":3,"sources":["../../src/app/components/tristatecheckbox/tristatecheckbox.ts"],"names":["TRISTATECHECKBOX_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","TriStateCheckbox","multi","cd","this","onChange","EventEmitter","onModelChange","onModelTouched","prototype","onClick","event","input","disabled","readonly","toggle","focused","focus","onKeydown","keyCode","preventDefault","onKeyup","value","undefined","emit","originalEvent","onFocus","onBlur","registerOnChange","fn","registerOnTouched","writeValue","markForCheck","setDisabledState","Component","args","selector","template","providers","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ChangeDetectorRef","Input","Output","NgModule","imports","CommonModule","exports","declarations"],"mappings":"ieAIaA,EAAuC,CAClDC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,YAAW,WAAM,OAAAC,KAC9BC,OAAO,gBAyBL,SAAAD,EAAoBE,GAAAC,KAAAD,GAAAA,EAoBVC,KAAAC,SAA8B,IAAIC,EAAAA,aAM5CF,KAAAG,cAA0B,aAE1BH,KAAAI,eAA2B,oBAE3BP,EAAAQ,UAAAC,QAAA,SAAQC,EAAcC,GACbR,KAAKS,UAAaT,KAAKU,WACxBV,KAAKW,OAAOJ,GACZP,KAAKY,SAAU,EACfJ,EAAMK,UAIdhB,EAAAQ,UAAAS,UAAA,SAAUP,GACe,IAAjBA,EAAMQ,SACNR,EAAMS,kBAIdnB,EAAAQ,UAAAY,QAAA,SAAQV,GACiB,IAAjBA,EAAMQ,SAAkBf,KAAKU,WAC7BV,KAAKW,OAAOJ,GACZA,EAAMS,mBAIdnB,EAAAQ,UAAAM,OAAA,SAAOJ,GACe,MAAdP,KAAKkB,OAA+BC,MAAdnB,KAAKkB,MAC3BlB,KAAKkB,OAAQ,EACM,GAAdlB,KAAKkB,MACVlB,KAAKkB,OAAQ,EACM,GAAdlB,KAAKkB,QACVlB,KAAKkB,MAAQ,MAEjBlB,KAAKG,cAAcH,KAAKkB,OACxBlB,KAAKC,SAASmB,KAAK,CACfC,cAAed,EACfW,MAAOlB,KAAKkB,SAIpBrB,EAAAQ,UAAAiB,QAAA,WACItB,KAAKY,SAAU,GAGnBf,EAAAQ,UAAAkB,OAAA,WACIvB,KAAKY,SAAU,EACfZ,KAAKI,kBAGTP,EAAAQ,UAAAmB,iBAAA,SAAiBC,GACbzB,KAAKG,cAAgBsB,GAGzB5B,EAAAQ,UAAAqB,kBAAA,SAAkBD,GACdzB,KAAKI,eAAiBqB,GAG1B5B,EAAAQ,UAAAsB,WAAA,SAAWT,GACPlB,KAAKkB,MAAQA,EACblB,KAAKD,GAAG6B,gBAGZ/B,EAAAQ,UAAAwB,iBAAA,SAAiBpB,GACbT,KAAKS,SAAWA,EAChBT,KAAKD,GAAG6B,yCAhHfE,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,qBACVC,SAAU,urCAcVC,UAAW,CAAC1C,GACZ2C,gBAAiBC,EAAAA,wBAAwBC,OACzCC,cAAeC,EAAAA,kBAAkBC,kDA5B2BC,EAAAA,uDAkC3DC,EAAAA,oBAEAA,EAAAA,8BAEAA,EAAAA,wBAEAA,EAAAA,uBAEAA,EAAAA,qBAEAA,EAAAA,0BAEAA,EAAAA,qBAEAA,EAAAA,wBAEAA,EAAAA,wBAEAC,EAAAA,gBA+EL,iCALCC,EAAAA,SAAQb,KAAA,CAAC,CACNc,QAAS,CAACC,EAAAA,cACVC,QAAS,CAAClD,GACVmD,aAAc,CAACnD","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,forwardRef,ChangeDetectorRef,ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\r\n\r\nexport const TRISTATECHECKBOX_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => TriStateCheckbox),\r\n  multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'p-triStateCheckbox',\r\n    template: `\r\n        <div [ngStyle]=\"style\" [ngClass]=\"{'p-checkbox p-component': true,'p-checkbox-disabled': disabled, 'p-checkbox-focused': focused}\" [class]=\"styleClass\">\r\n            <div class=\"p-hidden-accessible\">\r\n                <input #input type=\"text\" [attr.id]=\"inputId\" [name]=\"name\" [attr.tabindex]=\"tabindex\" [readonly]=\"readonly\" [disabled]=\"disabled\" (keyup)=\"onKeyup($event)\" (keydown)=\"onKeydown($event)\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [attr.aria-labelledby]=\"ariaLabelledBy\" inputmode=\"none\">\r\n            </div>\r\n            <div class=\"p-checkbox-box\" (click)=\"onClick($event,input)\"  role=\"checkbox\" [attr.aria-checked]=\"value === true\"\r\n                [ngClass]=\"{'p-highlight':value!=null,'p-disabled':disabled,'p-focus':focused}\">\r\n                <span class=\"p-checkbox-icon pi\" [ngClass]=\"{'pi-check':value==true,'pi-times':value==false}\"></span>\r\n            </div>\r\n        </div>\r\n        <label class=\"p-checkbox-label\" (click)=\"onClick($event,input)\"\r\n               [ngClass]=\"{'p-checkbox-label-active':value!=null, 'p-disabled':disabled, 'p-checkbox-label-focus':focused}\"\r\n               *ngIf=\"label\" [attr.for]=\"inputId\">{{label}}</label>\r\n    `,\r\n    providers: [TRISTATECHECKBOX_VALUE_ACCESSOR],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class TriStateCheckbox implements ControlValueAccessor  {\r\n\r\n    constructor(private cd: ChangeDetectorRef) {}\r\n\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() name: string;\r\n\r\n    @Input() ariaLabelledBy: string;\r\n\r\n    @Input() tabindex: number;\r\n\r\n    @Input() inputId: string;\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() label: string;\r\n\r\n    @Input() readonly: boolean;\r\n\r\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\r\n\r\n    focused: boolean;\r\n\r\n    value: any;\r\n\r\n    onModelChange: Function = () => {};\r\n\r\n    onModelTouched: Function = () => {};\r\n\r\n    onClick(event: Event, input: HTMLInputElement) {\r\n        if (!this.disabled && !this.readonly) {\r\n            this.toggle(event);\r\n            this.focused = true;\r\n            input.focus();\r\n        }\r\n    }\r\n\r\n    onKeydown(event: KeyboardEvent) {\r\n        if (event.keyCode == 32) {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    onKeyup(event: KeyboardEvent) {\r\n        if (event.keyCode == 32 && !this.readonly) {\r\n            this.toggle(event);\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    toggle(event: Event) {\r\n        if (this.value == null || this.value == undefined)\r\n            this.value = true;\r\n        else if (this.value == true)\r\n            this.value = false;\r\n        else if (this.value == false)\r\n            this.value = null;\r\n\r\n        this.onModelChange(this.value);\r\n        this.onChange.emit({\r\n            originalEvent: event,\r\n            value: this.value\r\n        })\r\n    }\r\n\r\n    onFocus() {\r\n        this.focused = true;\r\n    }\r\n\r\n    onBlur() {\r\n        this.focused = false;\r\n        this.onModelTouched();\r\n    }\r\n\r\n    registerOnChange(fn: Function): void {\r\n        this.onModelChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: Function): void {\r\n        this.onModelTouched = fn;\r\n    }\r\n\r\n    writeValue(value: any) : void {\r\n        this.value = value;\r\n        this.cd.markForCheck();\r\n    }\r\n\r\n    setDisabledState(disabled: boolean): void {\r\n        this.disabled = disabled;\r\n        this.cd.markForCheck();\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [TriStateCheckbox],\r\n    declarations: [TriStateCheckbox]\r\n})\r\nexport class TriStateCheckboxModule { }\r\n"]}