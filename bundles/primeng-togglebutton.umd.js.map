{"version":3,"file":"primeng-togglebutton.umd.js","sources":["../../src/app/components/togglebutton/togglebutton.ts","../../src/app/components/togglebutton/primeng-togglebutton.ts"],"sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,forwardRef,ChangeDetectionStrategy,ChangeDetectorRef} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {RippleModule} from 'primeng/ripple';\r\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\r\n\r\nexport const TOGGLEBUTTON_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => ToggleButton),\r\n  multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'p-toggleButton',\r\n    template: `\r\n        <div [ngClass]=\"{'p-button p-togglebutton p-component': true, 'p-button-icon-only': (onIcon && offIcon && !hasOnLabel && !hasOffLabel),'p-highlight': checked,'p-disabled':disabled}\" \r\n                        [ngStyle]=\"style\" [class]=\"styleClass\" (click)=\"toggle($event)\" (keydown.enter)=\"toggle($event)\"\r\n                        [attr.tabindex]=\"disabled ? null : '0'\" role=\"checkbox\" [attr.aria-checked]=\"checked\" pRipple>\r\n            <span *ngIf=\"onIcon||offIcon\" [class]=\"checked ? this.onIcon : this.offIcon\" \r\n                [ngClass]=\"{'p-button-icon': true, 'p-button-icon-left': (iconPos === 'left'), 'p-button-icon-right': (iconPos === 'right')}\"></span>\r\n            <span class=\"p-button-label\">{{checked ? hasOnLabel ? onLabel : '' : hasOffLabel ? offLabel : ''}}</span>\r\n        </div>\r\n    `,\r\n    providers: [TOGGLEBUTTON_VALUE_ACCESSOR],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    styleUrls: ['../button/button.css']\r\n})\r\nexport class ToggleButton implements ControlValueAccessor {\r\n\r\n    @Input() onLabel: string;\r\n\r\n    @Input() offLabel: string;\r\n\r\n    @Input() onIcon: string;\r\n\r\n    @Input() offIcon: string;\r\n\r\n    @Input() ariaLabelledBy: string;\r\n\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() inputId: string;\r\n\r\n    @Input() tabindex: number;\r\n\r\n    @Input() iconPos: string = 'left';\r\n\r\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\r\n           \r\n    checked: boolean = false;\r\n    \r\n    onModelChange: Function = () => {};\r\n    \r\n    onModelTouched: Function = () => {};\r\n    \r\n    constructor(public cd: ChangeDetectorRef) { }\r\n    \r\n    toggle(event: Event) {\r\n        if (!this.disabled) {\r\n            this.checked = !this.checked;\r\n            this.onModelChange(this.checked);\r\n            this.onModelTouched();\r\n            this.onChange.emit({\r\n                originalEvent: event,\r\n                checked: this.checked\r\n            });\r\n\r\n            this.cd.markForCheck();\r\n        }\r\n    }\r\n    \r\n    onBlur() {\r\n        this.onModelTouched();\r\n    }\r\n    \r\n    writeValue(value: any) : void {\r\n        this.checked = value;\r\n        this.cd.markForCheck();\r\n    }\r\n    \r\n    registerOnChange(fn: Function): void {\r\n        this.onModelChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: Function): void {\r\n        this.onModelTouched = fn;\r\n    }\r\n    \r\n    setDisabledState(val: boolean): void {\r\n        this.disabled = val;\r\n        this.cd.markForCheck();\r\n    }\r\n    \r\n    get hasOnLabel():boolean {\r\n        return this.onLabel && this.onLabel.length > 0;\r\n    }\r\n    \r\n    get hasOffLabel():boolean {\r\n        return this.onLabel && this.onLabel.length > 0;\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule,RippleModule],\r\n    exports: [ToggleButton],\r\n    declarations: [ToggleButton]\r\n})\r\nexport class ToggleButtonModule { }\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["NG_VALUE_ACCESSOR","forwardRef","EventEmitter","Component","ChangeDetectionStrategy","ChangeDetectorRef","Input","Output","NgModule","CommonModule","RippleModule"],"mappings":";;;;;;QAKa,2BAA2B,GAAQ;QAC9C,OAAO,EAAEA,uBAAiB;QAC1B,WAAW,EAAEC,eAAU,CAAC,cAAM,OAAA,YAAY,GAAA,CAAC;QAC3C,KAAK,EAAE,IAAI;MACX;;QAiDE,sBAAmB,EAAqB;YAArB,OAAE,GAAF,EAAE,CAAmB;YAV/B,YAAO,GAAW,MAAM,CAAC;YAExB,aAAQ,GAAsB,IAAIC,iBAAY,EAAE,CAAC;YAE3D,YAAO,GAAY,KAAK,CAAC;YAEzB,kBAAa,GAAa,eAAQ,CAAC;YAEnC,mBAAc,GAAa,eAAQ,CAAC;SAES;QAE7C,6BAAM,GAAN,UAAO,KAAY;YACf,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBAChB,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;gBAC7B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACjC,IAAI,CAAC,cAAc,EAAE,CAAC;gBACtB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;oBACf,aAAa,EAAE,KAAK;oBACpB,OAAO,EAAE,IAAI,CAAC,OAAO;iBACxB,CAAC,CAAC;gBAEH,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;aAC1B;SACJ;QAED,6BAAM,GAAN;YACI,IAAI,CAAC,cAAc,EAAE,CAAC;SACzB;QAED,iCAAU,GAAV,UAAW,KAAU;YACjB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;SAC1B;QAED,uCAAgB,GAAhB,UAAiB,EAAY;YACzB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;SAC3B;QAED,wCAAiB,GAAjB,UAAkB,EAAY;YAC1B,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;SAC5B;QAED,uCAAgB,GAAhB,UAAiB,GAAY;YACzB,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;YACpB,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;SAC1B;QAED,sBAAI,oCAAU;iBAAd;gBACI,OAAO,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;aAClD;;;WAAA;QAED,sBAAI,qCAAW;iBAAf;gBACI,OAAO,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;aAClD;;;WAAA;;;;gBA3FJC,cAAS,SAAC;oBACP,QAAQ,EAAE,gBAAgB;oBAC1B,QAAQ,EAAE,20BAQT;oBACD,SAAS,EAAE,CAAC,2BAA2B,CAAC;oBACxC,eAAe,EAAEC,4BAAuB,CAAC,MAAM;;iBAElD;;;gBAzBuFC,sBAAiB;;;0BA4BpGC,UAAK;2BAELA,UAAK;yBAELA,UAAK;0BAELA,UAAK;iCAELA,UAAK;2BAELA,UAAK;wBAELA,UAAK;6BAELA,UAAK;0BAELA,UAAK;2BAELA,UAAK;0BAELA,UAAK;2BAELC,WAAM;;;QA4DX;;;;;gBALCC,aAAQ,SAAC;oBACN,OAAO,EAAE,CAACC,mBAAY,EAACC,mBAAY,CAAC;oBACpC,OAAO,EAAE,CAAC,YAAY,CAAC;oBACvB,YAAY,EAAE,CAAC,YAAY,CAAC;iBAC/B;;;IC7GD;;;;;;;;;;;;;;"}