{"version":3,"sources":["../../src/app/components/menubar/menubar.ts"],"names":["MenubarSub","el","renderer","cd","this","autoZIndex","baseZIndex","leafClick","EventEmitter","menuHoverActive","Object","defineProperty","prototype","_parentActive","value","root","activeItem","onItemMouseEnter","event","item","disabled","mobileActive","preventDefault","onItemClick","url","routerLink","command","originalEvent","items","unbindDocumentClickListener","bindDocumentClickListener","onLeafClick","emit","_this","documentClickListener","nativeElement","contains","target","markForCheck","document","addEventListener","removeEventListener","ngOnDestroy","Component","args","selector","template","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","ChangeDetectorRef","Input","Output","Menubar","_autoDisplay","console","log","ngAfterContentInit","templates","forEach","getType","startTemplate","endTemplate","toggle","DomHandler","findSingle","style","zIndex","String","generateZIndex","bindOutsideClickListener","outsideClickListener","rootmenu","menubutton","unbindOutsideClickListener","changeDetection","ChangeDetectionStrategy","OnPush","ContentChildren","PrimeTemplate","ViewChild","NgModule","imports","CommonModule","RouterModule","RippleModule","exports","declarations"],"mappings":"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","sourcesContent":["import { NgModule, Component, ElementRef, Input, Renderer2, OnDestroy,ChangeDetectorRef, ChangeDetectionStrategy, ViewEncapsulation, AfterContentInit, ContentChildren, QueryList, TemplateRef, ViewChild, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DomHandler } from 'primeng/dom';\r\nimport { MenuItem, PrimeTemplate } from 'primeng/api';\r\nimport { RouterModule } from '@angular/router';\r\nimport { RippleModule } from 'primeng/ripple';  \r\n\r\n@Component({\r\n    selector: 'p-menubarSub',\r\n    template: `\r\n        <ul [ngClass]=\"{'p-submenu-list': !root, 'p-menubar-root-list': root}\">\r\n            <ng-template ngFor let-child [ngForOf]=\"(root ? item : item.items)\">\r\n                <li *ngIf=\"child.separator\" class=\"p-menu-separator\" [ngClass]=\"{'p-hidden': child.visible === false}\">\r\n                <li *ngIf=\"!child.separator\" #listItem [ngClass]=\"{'p-menuitem':true, 'p-menuitem-active': child === activeItem, 'p-hidden': child.visible === false}\" (mouseenter)=\"onItemMouseEnter($event,child)\">\r\n                    <a *ngIf=\"!child.routerLink\" [attr.href]=\"child.url\" [attr.data-automationid]=\"child.automationId\" [attr.target]=\"child.target\" [attr.title]=\"child.title\" [attr.id]=\"child.id\" (click)=\"onItemClick($event, child)\"\r\n                         [ngClass]=\"{'p-menuitem-link':true,'p-disabled':child.disabled}\" [ngStyle]=\"child.style\" [class]=\"child.styleClass\" \r\n                         [attr.tabindex]=\"child.disabled ? null : '0'\" [attr.aria-haspopup]=\"item.items != null\" [attr.aria-expanded]=\"item === activeItem\" pRipple>\r\n                        <span class=\"p-menuitem-icon\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\r\n                        <span class=\"p-menuitem-text\" *ngIf=\"child.escape !== false; else htmlLabel\">{{child.label}}</span>\r\n                        <ng-template #htmlLabel><span class=\"p-menuitem-text\" [innerHTML]=\"child.label\"></span></ng-template>\r\n                        <span class=\"p-submenu-icon pi\" *ngIf=\"child.items\" [ngClass]=\"{'pi-angle-down':root,'pi-angle-right':!root}\"></span>\r\n                    </a>\r\n                    <a *ngIf=\"child.routerLink\" [routerLink]=\"child.routerLink\" [attr.data-automationid]=\"child.automationId\" [queryParams]=\"child.queryParams\" [routerLinkActive]=\"'p-menuitem-link-active'\" [routerLinkActiveOptions]=\"child.routerLinkActiveOptions||{exact:false}\"\r\n                        [attr.target]=\"child.target\" [attr.title]=\"child.title\" [attr.id]=\"child.id\" [attr.tabindex]=\"child.disabled ? null : '0'\" role=\"menuitem\"\r\n                        (click)=\"onItemClick($event, child)\" [ngClass]=\"{'p-menuitem-link':true,'p-disabled':child.disabled}\" [ngStyle]=\"child.style\" [class]=\"child.styleClass\"\r\n                        [fragment]=\"child.fragment\" [queryParamsHandling]=\"child.queryParamsHandling\" [preserveFragment]=\"child.preserveFragment\" [skipLocationChange]=\"child.skipLocationChange\" [replaceUrl]=\"child.replaceUrl\" [state]=\"child.state\" pRipple>\r\n                        <span class=\"p-menuitem-icon\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\r\n                        <span class=\"p-menuitem-text\" *ngIf=\"child.escape !== false; else htmlRouteLabel\">{{child.label}}</span>\r\n                        <ng-template #htmlRouteLabel><span class=\"p-menuitem-text\" [innerHTML]=\"child.label\"></span></ng-template>\r\n                        <span class=\"p-submenu-icon pi\" *ngIf=\"child.items\" [ngClass]=\"{'pi-angle-down':root,'pi-angle-right':!root}\"></span>\r\n                    </a>\r\n                    <p-menubarSub [parentActive]=\"child === activeItem\" [item]=\"child\" *ngIf=\"child.items\" [mobileActive]=\"mobileActive\" [autoDisplay]=\"true\" (leafClick)=\"onLeafClick()\"></p-menubarSub>\r\n                </li>\r\n            </ng-template>\r\n        </ul>\r\n    `,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class MenubarSub implements OnDestroy {\r\n\r\n    @Input() item: MenuItem;\r\n\r\n    @Input() root: boolean;\r\n\r\n    @Input() autoDisplay: boolean;\r\n\r\n    @Input() autoZIndex: boolean = true;\r\n\r\n    @Input() baseZIndex: number = 0;\r\n\r\n    @Input() mobileActive: boolean;\r\n\r\n    @Input() get parentActive():boolean \r\n    {\r\n        return this._parentActive;\r\n    }\r\n    set parentActive(value) {\r\n        if (!this.root) {\r\n            this._parentActive = value;\r\n\r\n            if (!value)\r\n                this.activeItem = null;\r\n        }\r\n    }\r\n\r\n    @Output() leafClick: EventEmitter<any> = new EventEmitter();\r\n\r\n    _parentActive: boolean;\r\n\r\n    documentClickListener: any;\r\n\r\n    menuHoverActive: boolean = false;\r\n\r\n    activeItem: any;\r\n\r\n    constructor(public el: ElementRef, public renderer: Renderer2, private cd: ChangeDetectorRef) { }\r\n\r\n    onItemMouseEnter(event, item) {\r\n        if (item.disabled || this.mobileActive) {\r\n            event.preventDefault();\r\n            return;\r\n        }\r\n\r\n        if (this.root) {\r\n            if (this.activeItem) {\r\n                this.activeItem = item;\r\n            }\r\n        }\r\n        else {\r\n            this.activeItem = item;\r\n        }\r\n    }\r\n\r\n    onItemClick(event, item) {\r\n        if (item.disabled) {\r\n            event.preventDefault();\r\n            return;\r\n        }\r\n\r\n        if (!item.url && !item.routerLink) {\r\n            event.preventDefault();\r\n        }\r\n\r\n        if (item.command) {\r\n            item.command({\r\n                originalEvent: event,\r\n                item: item\r\n            });\r\n        }\r\n        \r\n        if (item.items) {\r\n            if (this.activeItem && item === this.activeItem) {\r\n                this.activeItem = null;\r\n                this.unbindDocumentClickListener();\r\n            }\r\n            else {\r\n                this.activeItem = item;\r\n                if (this.root) {\r\n                    this.bindDocumentClickListener();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!item.items) {\r\n            this.onLeafClick();\r\n        }\r\n    }\r\n\r\n    onLeafClick() {\r\n        this.activeItem = null;\r\n        if (this.root) {\r\n            this.unbindDocumentClickListener();\r\n        }\r\n\r\n        this.leafClick.emit();\r\n    }\r\n\r\n    bindDocumentClickListener() {\r\n        if (!this.documentClickListener) {\r\n            this.documentClickListener = (event) => {\r\n                if (this.el && !this.el.nativeElement.contains(event.target)) {\r\n                    this.activeItem = null;\r\n                    this.cd.markForCheck();\r\n                    this.unbindDocumentClickListener();\r\n                }\r\n            };\r\n\r\n            document.addEventListener('click', this.documentClickListener);\r\n        }\r\n    }\r\n\r\n    unbindDocumentClickListener() {\r\n        if (this.documentClickListener) {\r\n            document.removeEventListener('click', this.documentClickListener);\r\n            this.documentClickListener = null;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.unbindDocumentClickListener();\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-menubar',\r\n    template: `\r\n        <div [ngClass]=\"{'p-menubar p-component':true, 'p-menubar-mobile-active': mobileActive}\" [class]=\"styleClass\" [ngStyle]=\"style\">\r\n            <div class=\"p-menubar-start\" *ngIf=\"startTemplate\">\r\n                <ng-container *ngTemplateOutlet=\"startTemplate\"></ng-container>\r\n            </div>\r\n            <a #menubutton tabindex=\"0\" class=\"p-menubar-button\" (click)=\"toggle($event)\">\r\n                <i class=\"pi pi-bars\"></i>\r\n            </a>\r\n            <p-menubarSub #rootmenu [item]=\"model\" root=\"root\" [baseZIndex]=\"baseZIndex\" (leafClick)=\"onLeafClick()\" [autoZIndex]=\"autoZIndex\" [mobileActive]=\"mobileActive\"></p-menubarSub>\r\n            <div class=\"p-menubar-end\" *ngIf=\"endTemplate; else legacy\">\r\n                <ng-container *ngTemplateOutlet=\"endTemplate\"></ng-container>\r\n            </div>\r\n            <ng-template #legacy>\r\n                <div class=\"p-menubar-end\">\r\n                    <ng-content></ng-content>\r\n                </div>\r\n            </ng-template>\r\n        </div>\r\n    `,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None,\r\n    styleUrls: ['./menubar.css']\r\n})\r\nexport class Menubar implements AfterContentInit, OnDestroy {\r\n\r\n    @Input() model: MenuItem[];\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() autoZIndex: boolean = true;\r\n\r\n    @Input() baseZIndex: number = 0;\r\n\r\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\r\n\r\n    private _autoDisplay: boolean;\r\n\r\n    @Input() get autoDisplay(): boolean {\r\n        return this._autoDisplay;\r\n    }\r\n    set autoDisplay(_autoDisplay: boolean) {\r\n        console.log(\"AutoDisplay property is deprecated and functionality is not available.\");\r\n    }\r\n\r\n    @ViewChild('menubutton') menubutton: ElementRef;\r\n\r\n    @ViewChild('rootmenu') rootmenu: MenubarSub;\r\n\r\n    startTemplate: TemplateRef<any>;\r\n\r\n    endTemplate: TemplateRef<any>;\r\n\r\n    mobileActive: boolean;\r\n\r\n    outsideClickListener: any;\r\n\r\n    constructor(public el: ElementRef, public renderer: Renderer2, public cd: ChangeDetectorRef) { }\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch(item.getType()) {\r\n                case 'start':\r\n                    this.startTemplate = item.template;\r\n                break;\r\n\r\n                case 'end':\r\n                    this.endTemplate = item.template;\r\n                break;\r\n            }\r\n        });\r\n    }\r\n\r\n    toggle(event) {\r\n        this.mobileActive = !this.mobileActive;\r\n        let rootmenu = DomHandler.findSingle(this.el.nativeElement,\".p-menubar-root-list\")\r\n        rootmenu.style.zIndex = String(DomHandler.generateZIndex());\r\n        this.bindOutsideClickListener();\r\n        event.preventDefault();\r\n    }\r\n\r\n    bindOutsideClickListener() {\r\n        if (!this.outsideClickListener) {\r\n            this.outsideClickListener = (event) => {\r\n                if (this.mobileActive && this.rootmenu.el.nativeElement !== event.target && !this.rootmenu.el.nativeElement.contains(event.target)\r\n                    && this.menubutton.nativeElement !== event.target && !this.menubutton.nativeElement.contains(event.target)) {\r\n                    this.mobileActive = false;\r\n                    this.cd.markForCheck();\r\n                }\r\n            };\r\n            document.addEventListener('click', this.outsideClickListener);\r\n        }\r\n    }\r\n\r\n    onLeafClick() {\r\n        this.mobileActive = false;\r\n        this.unbindOutsideClickListener();\r\n    }\r\n\r\n    unbindOutsideClickListener() {\r\n        if (this.outsideClickListener) {\r\n            document.removeEventListener('click', this.outsideClickListener);\r\n            this.outsideClickListener = null;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.unbindOutsideClickListener();\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule,RouterModule,RippleModule],\r\n    exports: [Menubar,RouterModule],\r\n    declarations: [Menubar,MenubarSub]\r\n})\r\nexport class MenubarModule { }\r\n"]}