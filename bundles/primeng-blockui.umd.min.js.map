{"version":3,"sources":["../../src/app/components/blockui/blockui.ts"],"names":["BlockUI","el","cd","this","autoZIndex","baseZIndex","Object","defineProperty","prototype","_blocked","val","mask","nativeElement","block","unblock","ngAfterViewInit","target","getBlockableElement","ngAfterContentInit","_this","templates","forEach","item","getType","contentTemplate","template","appendChild","style","position","document","body","zIndex","String","DomHandler","zindex","ngOnDestroy","Component","args","selector","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ElementRef","ChangeDetectorRef","Input","ContentChildren","PrimeTemplate","ViewChild","NgModule","imports","CommonModule","exports","declarations"],"mappings":"8gBAmCI,SAAAA,EAAmBC,EAAuBC,GAAvBC,KAAAF,GAAAA,EAAuBE,KAAAD,GAAAA,EAdjCC,KAAAC,YAAsB,EAEtBD,KAAAE,WAAqB,SAc9BC,OAAAC,eAAaP,EAAAQ,UAAA,UAAO,KAApB,WACI,OAAOL,KAAKM,cAGhB,SAAYC,GACRP,KAAKM,SAAWC,EAEZP,KAAKQ,MAAQR,KAAKQ,KAAKC,gBACnBT,KAAKM,SACLN,KAAKU,QAELV,KAAKW,4CAIjBd,EAAAQ,UAAAO,gBAAA,WACI,GAAIZ,KAAKa,SAAWb,KAAKa,OAAOC,oBAC5B,KAAM,0DAIdjB,EAAAQ,UAAAU,mBAAA,WAAA,IAAAC,EAAAhB,KACIA,KAAKiB,UAAUC,SAAQ,SAACC,GACpB,OAAOA,EAAKC,WACR,IAAK,UAIL,QACIJ,EAAKK,gBAAkBF,EAAKG,cAM5CzB,EAAAQ,UAAAK,MAAA,WACQV,KAAKa,QACLb,KAAKa,OAAOC,sBAAsBS,YAAYvB,KAAKQ,KAAKC,eACxDT,KAAKa,OAAOC,sBAAsBU,MAAMC,SAAW,YAGnDC,SAASC,KAAKJ,YAAYvB,KAAKQ,KAAKC,eAGpCT,KAAKC,aACLD,KAAKQ,KAAKC,cAAce,MAAMI,OAASC,OAAO7B,KAAKE,cAAgB4B,EAAAA,WAAWC,UAItFlC,EAAAQ,UAAAM,QAAA,WACIX,KAAKF,GAAGW,cAAcc,YAAYvB,KAAKQ,KAAKC,gBAGhDZ,EAAAQ,UAAA2B,YAAA,WACIhC,KAAKW,oCAtFZsB,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,YACVb,SAAU,oUAMVc,gBAAiBC,EAAAA,wBAAwBC,OACzCC,cAAeC,EAAAA,kBAAkBC,8dAdoBC,EAAAA,kBAAiEC,EAAAA,qDAmBrHC,EAAAA,0BAEAA,EAAAA,0BAEAA,EAAAA,0BAEAA,EAAAA,yBAEAC,EAAAA,gBAAeX,KAAA,CAACY,EAAAA,6BAEhBC,EAAAA,UAASb,KAAA,CAAC,yBAQVU,EAAAA,eA+DL,iCALCI,EAAAA,SAAQd,KAAA,CAAC,CACNe,QAAS,CAACC,EAAAA,cACVC,QAAS,CAACtD,GACVuD,aAAc,CAACvD","sourcesContent":["import {NgModule,Component,Input,AfterViewInit,OnDestroy,ElementRef,ViewChild,ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, ContentChildren, QueryList, TemplateRef} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {DomHandler} from 'primeng/dom';\r\nimport {PrimeTemplate} from 'primeng/api';\r\n\r\n@Component({\r\n    selector: 'p-blockUI',\r\n    template: `\r\n        <div #mask [class]=\"styleClass\" [ngClass]=\"{'p-blockui-document':!target, 'p-blockui p-component-overlay': true}\" [ngStyle]=\"{display: blocked ? 'flex' : 'none'}\">\r\n            <ng-content></ng-content>\r\n            <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\r\n        </div>\r\n    `,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None,\r\n    styleUrls: ['./blockui.css']\r\n})\r\nexport class BlockUI implements AfterViewInit,OnDestroy {\r\n\r\n    @Input() target: any;\r\n    \r\n    @Input() autoZIndex: boolean = true;\r\n    \r\n    @Input() baseZIndex: number = 0;\r\n    \r\n    @Input() styleClass: string;\r\n    \r\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\r\n\r\n    @ViewChild('mask') mask: ElementRef;\r\n    \r\n    _blocked: boolean;\r\n\r\n    contentTemplate: TemplateRef<any>;\r\n        \r\n    constructor(public el: ElementRef, public cd: ChangeDetectorRef) {}\r\n    \r\n    @Input() get blocked(): boolean {\r\n        return this._blocked;\r\n    }\r\n    \r\n    set blocked(val: boolean) {\r\n        this._blocked = val;\r\n        \r\n        if (this.mask && this.mask.nativeElement) {\r\n            if (this._blocked)\r\n                this.block();\r\n            else\r\n                this.unblock();\r\n        }\r\n    }\r\n    \r\n    ngAfterViewInit() {\r\n        if (this.target && !this.target.getBlockableElement) {\r\n            throw 'Target of BlockUI must implement BlockableUI interface';\r\n        }\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch(item.getType()) {\r\n                case 'content':\r\n                    this.contentTemplate = item.template;\r\n                break;\r\n                \r\n                default:\r\n                    this.contentTemplate = item.template;\r\n                break;\r\n            }\r\n        });\r\n    }\r\n        \r\n    block() {\r\n        if (this.target) {\r\n            this.target.getBlockableElement().appendChild(this.mask.nativeElement);\r\n            this.target.getBlockableElement().style.position = 'relative';\r\n        }\r\n        else {\r\n            document.body.appendChild(this.mask.nativeElement);\r\n        }\r\n        \r\n        if (this.autoZIndex) {\r\n            this.mask.nativeElement.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\r\n        }\r\n    }\r\n    \r\n    unblock() {\r\n        this.el.nativeElement.appendChild(this.mask.nativeElement);\r\n    }\r\n    \r\n    ngOnDestroy() {\r\n        this.unblock();\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [BlockUI],\r\n    declarations: [BlockUI]\r\n})\r\nexport class BlockUIModule { }"]}