{"version":3,"sources":["../../src/app/components/accordion/accordion.ts"],"names":["idx","AccordionTab","accordion","changeDetector","this","cache","selectedChange","EventEmitter","transitionOptions","id","Object","defineProperty","prototype","_selected","val","loaded","detectChanges","ngAfterContentInit","_this","templates","forEach","item","getType","contentTemplate","template","headerTemplate","toggle","event","disabled","index","findTabIndex","selected","onClose","emit","originalEvent","multiple","i","tabs","length","markForCheck","onOpen","updateActiveIndex","preventDefault","headerFacet","onKeydown","which","ngOnDestroy","splice","Component","args","selector","animations","trigger","state","style","height","overflow","transition","animate","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","Inject","forwardRef","Accordion","ChangeDetectorRef","Input","Output","ContentChildren","Header","PrimeTemplate","el","expandIcon","collapseIcon","activeIndexChange","initTabs","tabListSubscription","tabList","changes","subscribe","_","toArray","updateSelectionState","getBlockableElement","nativeElement","children","_activeIndex","preventActiveIndexPropagation","includes","tab","push","unsubscribe","ElementRef","NgModule","imports","CommonModule","exports","SharedModule","declarations"],"mappings":"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","sourcesContent":["import { NgModule, Component, ElementRef, AfterContentInit, OnDestroy, Input, Output, EventEmitter, \r\n    ContentChildren, QueryList, ChangeDetectorRef, Inject, forwardRef, TemplateRef, ViewRef, ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core';\r\nimport { trigger, state, style, transition, animate } from '@angular/animations';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SharedModule, Header, PrimeTemplate } from 'primeng/api';\r\nimport { BlockableUI } from 'primeng/api';\r\nimport { Subscription } from 'rxjs';\r\n\r\nlet idx: number = 0;\r\n\r\n@Component({\r\n    selector: 'p-accordionTab',\r\n    template: `\r\n        <div class=\"p-accordion-tab\" [ngClass]=\"{'p-accordion-tab-active': selected}\">\r\n            <div class=\"p-accordion-header\" [ngClass]=\"{'p-highlight': selected, 'p-disabled': disabled}\">\r\n                <a role=\"tab\" class=\"p-accordion-header-link\" (click)=\"toggle($event)\" (keydown)=\"onKeydown($event)\" [attr.tabindex]=\"disabled ? null : 0\"\r\n                    [attr.id]=\"id\" [attr.aria-controls]=\"id + '-content'\" [attr.aria-expanded]=\"selected\">\r\n                    <span class=\"p-accordion-toggle-icon\" [ngClass]=\"selected ? accordion.collapseIcon : accordion.expandIcon\"></span>\r\n                    <span class=\"p-accordion-header-text\" *ngIf=\"!hasHeaderFacet\">\r\n                        {{header}}\r\n                    </span>\r\n                    <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\r\n                    <ng-content select=\"p-header\" *ngIf=\"hasHeaderFacet\"></ng-content>\r\n                </a>\r\n            </div>\r\n            <div [attr.id]=\"id + '-content'\" class=\"p-toggleable-content\" [@tabContent]=\"selected ? {value: 'visible', params: {transitionParams: transitionOptions}} : {value: 'hidden', params: {transitionParams: transitionOptions}}\"\r\n                role=\"region\" [attr.aria-hidden]=\"!selected\" [attr.aria-labelledby]=\"id\">\r\n                <div class=\"p-accordion-content\">\r\n                    <ng-content></ng-content>\r\n                    <ng-container *ngIf=\"contentTemplate && (cache ? loaded : selected)\">\r\n                        <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\r\n                    </ng-container>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    `,\r\n    animations: [\r\n        trigger('tabContent', [\r\n            state('hidden', style({\r\n                height: '0',\r\n                overflow: 'hidden'\r\n            })),\r\n            state('visible', style({\r\n                height: '*'\r\n            })),\r\n            transition('visible <=> hidden', [style({overflow: 'hidden'}), animate('{{transitionParams}}')]),\r\n            transition('void => *', animate(0))\r\n        ])\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None,\r\n    styleUrls: ['./accordion.css']\r\n})\r\nexport class AccordionTab implements AfterContentInit,OnDestroy {\r\n\r\n    @Input() header: string;\r\n\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() cache: boolean = true;\r\n\r\n    @Output() selectedChange: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Input() transitionOptions: string = '400ms cubic-bezier(0.86, 0, 0.07, 1)';\r\n\r\n    @ContentChildren(Header) headerFacet: QueryList<Header>;\r\n\r\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\r\n\r\n    private _selected: boolean;\r\n\r\n    @Input() get selected(): any {\r\n        return this._selected;\r\n    }\r\n\r\n    set selected(val: any) {\r\n        this._selected = val;\r\n        \r\n        if (!this.loaded) {\r\n            this.changeDetector.detectChanges();\r\n        }\r\n    }\r\n\r\n    contentTemplate: TemplateRef<any>;\r\n\r\n    headerTemplate: TemplateRef<any>;\r\n\r\n    id: string = `p-accordiontab-${idx++}`;\r\n\r\n    loaded: boolean;\r\n\r\n    accordion: Accordion;\r\n\r\n    constructor(@Inject(forwardRef(() => Accordion)) accordion, public changeDetector: ChangeDetectorRef) {\r\n        this.accordion = accordion as Accordion;\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch(item.getType()) {\r\n                case 'content':\r\n                    this.contentTemplate = item.template;\r\n                break;\r\n\r\n                case 'header':\r\n                    this.headerTemplate = item.template;\r\n                break;\r\n                \r\n                default:\r\n                    this.contentTemplate = item.template;\r\n                break;\r\n            }\r\n        });\r\n    }\r\n\r\n    toggle(event) {\r\n        if (this.disabled) {\r\n            return false;\r\n        }\r\n\r\n        let index = this.findTabIndex();\r\n\r\n        if (this.selected) {\r\n            this.selected = false;\r\n            this.accordion.onClose.emit({ originalEvent: event, index: index });\r\n        }\r\n        else {\r\n            if (!this.accordion.multiple) {\r\n                for (var i = 0; i < this.accordion.tabs.length; i++) {\r\n                    this.accordion.tabs[i].selected = false;\r\n                    this.accordion.tabs[i].selectedChange.emit(false);\r\n                    this.accordion.tabs[i].changeDetector.markForCheck();\r\n                }\r\n            }\r\n\r\n            this.selected = true;\r\n            this.loaded = true;\r\n            this.accordion.onOpen.emit({ originalEvent: event, index: index });\r\n        }\r\n\r\n        this.selectedChange.emit(this.selected);\r\n        this.accordion.updateActiveIndex();\r\n        this.changeDetector.markForCheck();\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    findTabIndex() {\r\n        let index = -1;\r\n        for (var i = 0; i < this.accordion.tabs.length; i++) {\r\n            if (this.accordion.tabs[i] == this) {\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        return index;\r\n    }\r\n\r\n    get hasHeaderFacet(): boolean {\r\n        return this.headerFacet && this.headerFacet.length > 0;\r\n    }\r\n\r\n    onKeydown(event: KeyboardEvent) {\r\n        if (event.which === 32 || event.which === 13) {\r\n            this.toggle(event);\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.accordion.tabs.splice(this.findTabIndex(), 1);\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-accordion',\r\n    template: `\r\n        <div [ngClass]=\"'p-accordion p-component'\" [ngStyle]=\"style\" [class]=\"styleClass\" role=\"tablist\">\r\n            <ng-content></ng-content>\r\n        </div>\r\n    `,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class Accordion implements BlockableUI, AfterContentInit, OnDestroy {\r\n    \r\n    @Input() multiple: boolean;\r\n    \r\n    @Output() onClose: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onOpen: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Input() style: any;\r\n    \r\n    @Input() styleClass: string;\r\n\r\n    @Input() expandIcon: string = 'pi pi-fw pi-chevron-right';\r\n\r\n    @Input() collapseIcon: string = 'pi pi-fw pi-chevron-down';\r\n\r\n    @Output() activeIndexChange: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @ContentChildren(AccordionTab) tabList: QueryList<AccordionTab>;\r\n\r\n    tabListSubscription: Subscription;\r\n    \r\n    private _activeIndex: any;\r\n\r\n    preventActiveIndexPropagation: boolean;\r\n    \r\n    public tabs: AccordionTab[] = [];\r\n\r\n    constructor(public el: ElementRef, public changeDetector: ChangeDetectorRef) {}\r\n\r\n    ngAfterContentInit() {\r\n        this.initTabs();\r\n\r\n        this.tabListSubscription = this.tabList.changes.subscribe(_ => {\r\n            this.initTabs();\r\n        });\r\n    }\r\n\r\n    initTabs(): any {\r\n        this.tabs = this.tabList.toArray();\r\n        this.updateSelectionState();\r\n        this.changeDetector.markForCheck();\r\n    }\r\n      \r\n    getBlockableElement(): HTMLElement {\r\n        return this.el.nativeElement.children[0];\r\n    } \r\n    \r\n    @Input() get activeIndex(): any {\r\n        return this._activeIndex;\r\n    }\r\n\r\n    set activeIndex(val: any) {\r\n        this._activeIndex = val;\r\n        if (this.preventActiveIndexPropagation) {\r\n            this.preventActiveIndexPropagation = false;\r\n            return;\r\n        }\r\n\r\n        this.updateSelectionState();\r\n    }\r\n\r\n    updateSelectionState() {\r\n        if (this.tabs && this.tabs.length && this._activeIndex != null) {\r\n            for (let i = 0; i < this.tabs.length; i++) {\r\n                let selected = this.multiple ? this._activeIndex.includes(i) : (i === this._activeIndex);\r\n                let changed = selected !== this.tabs[i].selected;\r\n\r\n                if (changed) {\r\n                    this.tabs[i].selected = selected;\r\n                    this.tabs[i].selectedChange.emit(selected);\r\n                    this.tabs[i].changeDetector.markForCheck();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    updateActiveIndex() {\r\n        let index: any = this.multiple ? [] : null;\r\n        this.tabs.forEach((tab, i) => {\r\n            if (tab.selected) {\r\n                if (this.multiple) {\r\n                    index.push(i);\r\n                }\r\n                else {\r\n                    index = i;\r\n                    return;\r\n                }\r\n            }\r\n        });\r\n\r\n        this.preventActiveIndexPropagation = true;\r\n        this.activeIndexChange.emit(index);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.tabListSubscription) {\r\n            this.tabListSubscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [Accordion,AccordionTab,SharedModule],\r\n    declarations: [Accordion,AccordionTab]\r\n})\r\nexport class AccordionModule { }\r\n"]}