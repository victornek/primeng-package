{"version":3,"file":"primeng-defer.umd.js","sources":["../../src/app/components/defer/defer.ts","../../src/app/components/defer/primeng-defer.ts"],"sourcesContent":["import {NgModule,Directive,ElementRef,AfterViewInit,OnDestroy,TemplateRef,EmbeddedViewRef,\r\n        ViewContainerRef,Renderer2,EventEmitter,Output,ContentChild} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\n\r\n@Directive({\r\n    selector: '[pDefer]'\r\n})\r\nexport class DeferredLoader implements AfterViewInit,OnDestroy {\r\n        \r\n    @Output() onLoad: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @ContentChild(TemplateRef) template: TemplateRef<any>;\r\n        \r\n    documentScrollListener: Function;\r\n    \r\n    view: EmbeddedViewRef<any>;\r\n            \r\n    constructor(public el: ElementRef, public renderer: Renderer2, public viewContainer: ViewContainerRef) {}\r\n    \r\n    ngAfterViewInit() {\r\n        if (this.shouldLoad()) {\r\n            this.load();\r\n        }\r\n        \r\n        if (!this.isLoaded()) {\r\n            this.documentScrollListener = this.renderer.listen('window', 'scroll', () => {\r\n                if (this.shouldLoad()) {\r\n                    this.load();\r\n                    this.documentScrollListener();\r\n                    this.documentScrollListener = null;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    \r\n    shouldLoad(): boolean {\r\n        if (this.isLoaded()) {\r\n            return false;\r\n        }\r\n        else {\r\n            let rect = this.el.nativeElement.getBoundingClientRect();\r\n            let docElement = document.documentElement;\r\n            let winHeight = docElement.clientHeight;\r\n            \r\n            return (winHeight >= rect.top);\r\n        }\r\n    }\r\n    \r\n    load(): void { \r\n        this.view = this.viewContainer.createEmbeddedView(this.template);\r\n        this.onLoad.emit();\r\n    }\r\n    \r\n    isLoaded() {\r\n        return this.view != null;\r\n    }\r\n            \r\n    ngOnDestroy() {\r\n        this.view = null;\r\n        \r\n        if (this.documentScrollListener) {\r\n            this.documentScrollListener();\r\n        }\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [DeferredLoader],\r\n    declarations: [DeferredLoader]\r\n})\r\nexport class DeferModule { }","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["EventEmitter","Directive","ElementRef","Renderer2","ViewContainerRef","Output","ContentChild","TemplateRef","NgModule","CommonModule"],"mappings":";;;;;;;QAiBI,wBAAmB,EAAc,EAAS,QAAmB,EAAS,aAA+B;YAAlF,OAAE,GAAF,EAAE,CAAY;YAAS,aAAQ,GAAR,QAAQ,CAAW;YAAS,kBAAa,GAAb,aAAa,CAAkB;YAR3F,WAAM,GAAsB,IAAIA,iBAAY,EAAE,CAAC;SAQgD;QAEzG,wCAAe,GAAf;YAAA,iBAcC;YAbG,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;gBACnB,IAAI,CAAC,IAAI,EAAE,CAAC;aACf;YAED,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE;gBAClB,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,QAAQ,EAAE;oBACnE,IAAI,KAAI,CAAC,UAAU,EAAE,EAAE;wBACnB,KAAI,CAAC,IAAI,EAAE,CAAC;wBACZ,KAAI,CAAC,sBAAsB,EAAE,CAAC;wBAC9B,KAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;qBACtC;iBACJ,CAAC,CAAC;aACN;SACJ;QAED,mCAAU,GAAV;YACI,IAAI,IAAI,CAAC,QAAQ,EAAE,EAAE;gBACjB,OAAO,KAAK,CAAC;aAChB;iBACI;gBACD,IAAI,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,qBAAqB,EAAE,CAAC;gBACzD,IAAI,UAAU,GAAG,QAAQ,CAAC,eAAe,CAAC;gBAC1C,IAAI,SAAS,GAAG,UAAU,CAAC,YAAY,CAAC;gBAExC,QAAQ,SAAS,IAAI,IAAI,CAAC,GAAG,EAAE;aAClC;SACJ;QAED,6BAAI,GAAJ;YACI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACjE,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;SACtB;QAED,iCAAQ,GAAR;YACI,OAAO,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC;SAC5B;QAED,oCAAW,GAAX;YACI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YAEjB,IAAI,IAAI,CAAC,sBAAsB,EAAE;gBAC7B,IAAI,CAAC,sBAAsB,EAAE,CAAC;aACjC;SACJ;;;;gBA3DJC,cAAS,SAAC;oBACP,QAAQ,EAAE,UAAU;iBACvB;;;gBAN0BC,eAAU;gBACZC,cAAS;gBAA1BC,qBAAgB;;;yBAQnBC,WAAM;2BAENC,iBAAY,SAACC,gBAAW;;;QA4D7B;;;;;gBALCC,aAAQ,SAAC;oBACN,OAAO,EAAE,CAACC,mBAAY,CAAC;oBACvB,OAAO,EAAE,CAAC,cAAc,CAAC;oBACzB,YAAY,EAAE,CAAC,cAAc,CAAC;iBACjC;;;ICtED;;;;;;;;;;;;;"}