{"version":3,"sources":["../../src/app/components/captcha/captcha.ts"],"names":["Captcha","el","_zone","cd","this","siteKey","theme","type","size","tabindex","language","initCallback","onResponse","EventEmitter","onExpire","_instance","prototype","ngAfterViewInit","_this","window","grecaptcha","render","init","setTimeout","nativeElement","children","sitekey","hl","callback","response","run","recaptchaCallback","expired-callback","recaptchaExpiredCallback","reset","markForCheck","getResponse","emit","ngOnDestroy","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ElementRef","NgZone","ChangeDetectorRef","Input","Output","NgModule","imports","CommonModule","exports","declarations"],"mappings":"oaA+BI,SAAAA,EAAmBC,EAAuBC,EAAsBC,GAA7CC,KAAAH,GAAAA,EAAuBG,KAAAF,MAAAA,EAAsBE,KAAAD,GAAAA,EApBvDC,KAAAC,QAAkB,KAElBD,KAAAE,MAAQ,QAERF,KAAAG,KAAO,QAEPH,KAAAI,KAAO,SAEPJ,KAAAK,SAAW,EAEXL,KAAAM,SAAmB,KAEnBN,KAAAO,aAAe,gBAEdP,KAAAQ,WAAgC,IAAIC,EAAAA,aAEpCT,KAAAU,SAA8B,IAAID,EAAAA,aAEpCT,KAAAW,UAAiB,YAIzBf,EAAAgB,UAAAC,gBAAA,WAAA,IAAAC,EAAAd,KACce,OAAQC,WACHD,OAAQC,WAAWC,OAM1BjB,KAAKkB,OALLC,YAAW,WACPL,EAAKI,SACP,KAOAH,OAAQf,KAAKO,cAAgB,WACjCO,EAAKI,SAKftB,EAAAgB,UAAAM,KAAA,WAAA,IAAAJ,EAAAd,KACIA,KAAKW,UAAkBI,OAAQC,WAAWC,OAAOjB,KAAKH,GAAGuB,cAAcC,SAAS,GAAI,CAChFC,QAAWtB,KAAKC,QAChBC,MAASF,KAAKE,MACdC,KAAQH,KAAKG,KACbC,KAAQJ,KAAKI,KACbC,SAAYL,KAAKK,SACjBkB,GAAMvB,KAAKM,SACXkB,SAAY,SAACC,GAAsBX,EAAKhB,MAAM4B,KAAI,WAAM,OAAAZ,EAAKa,kBAAkBF,OAC/EG,mBAAoB,WAAOd,EAAKhB,MAAM4B,KAAI,WAAM,OAAAZ,EAAKe,kCAI7DjC,EAAAgB,UAAAkB,MAAA,WAC2B,OAAnB9B,KAAKW,YAGHI,OAAQC,WAAWc,MAAM9B,KAAKW,WACpCX,KAAKD,GAAGgC,iBAGZnC,EAAAgB,UAAAoB,YAAA,WACI,OAAuB,OAAnBhC,KAAKW,UACE,KAEEI,OAAQC,WAAWgB,YAAYhC,KAAKW,YAGrDf,EAAAgB,UAAAe,kBAAA,SAAkBF,GACdzB,KAAKQ,WAAWyB,KAAK,CACjBR,SAAUA,KAIlB7B,EAAAgB,UAAAiB,yBAAA,WACI7B,KAAKU,SAASuB,QAGlBrC,EAAAgB,UAAAsB,YAAA,WAC0B,MAAlBlC,KAAKW,WACDI,OAAQC,WAAWc,MAAM9B,KAAKW,qCAxF7CwB,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,YACVC,SAAU,cACVC,gBAAiBC,EAAAA,wBAAwBC,OACzCC,cAAeC,EAAAA,kBAAkBC,kDAP+CC,EAAAA,kBAAxBC,EAAAA,cAA+EC,EAAAA,sDAWtIC,EAAAA,qBAEAA,EAAAA,oBAEAA,EAAAA,oBAEAA,EAAAA,wBAEAA,EAAAA,wBAEAA,EAAAA,4BAEAA,EAAAA,0BAEAC,EAAAA,yBAEAA,EAAAA,gBA0EL,iCALCC,EAAAA,SAAQd,KAAA,CAAC,CACNe,QAAS,CAACC,EAAAA,cACVC,QAAS,CAACzD,GACV0D,aAAc,CAAC1D","sourcesContent":["import {NgModule,AfterViewInit,Component,EventEmitter,Input,NgZone,OnDestroy,Output,ElementRef,ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\n\r\n@Component({\r\n    selector: 'p-captcha',\r\n    template: `<div></div>`,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class Captcha implements AfterViewInit,OnDestroy {\r\n\r\n    @Input() siteKey: string = null;\r\n        \r\n    @Input() theme = 'light';\r\n    \r\n    @Input() type = 'image';\r\n    \r\n    @Input() size = 'normal';\r\n    \r\n    @Input() tabindex = 0;\r\n    \r\n    @Input() language: string = null;\r\n     \r\n    @Input() initCallback = \"initRecaptcha\";\r\n    \r\n    @Output() onResponse: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onExpire: EventEmitter<any> = new EventEmitter();\r\n    \r\n    private _instance: any = null;\r\n\r\n    constructor(public el: ElementRef, public _zone: NgZone, public cd: ChangeDetectorRef) {}\r\n    \r\n    ngAfterViewInit() {\r\n        if ((<any>window).grecaptcha) {\r\n            if (!(<any>window).grecaptcha.render){\r\n                setTimeout(() =>{\r\n                    this.init();\r\n                },100)\r\n            }\r\n            else {\r\n                this.init();\r\n            }\r\n        }\r\n        else {\r\n            (<any>window)[this.initCallback] = () => {\r\n              this.init();\r\n            }\r\n        } \r\n    }\r\n    \r\n    init()Â {\r\n        this._instance = (<any>window).grecaptcha.render(this.el.nativeElement.children[0], {\r\n            'sitekey': this.siteKey,\r\n            'theme': this.theme,\r\n            'type': this.type,\r\n            'size': this.size,\r\n            'tabindex': this.tabindex,\r\n            'hl': this.language,\r\n            'callback': (response: string) => {this._zone.run(() => this.recaptchaCallback(response))},\r\n            'expired-callback': () => {this._zone.run(() => this.recaptchaExpiredCallback())}\r\n        });\r\n    }\r\n    \r\n    reset() {\r\n        if (this._instance === null)\r\n            return;\r\n        \r\n        (<any>window).grecaptcha.reset(this._instance);\r\n        this.cd.markForCheck();\r\n    }\r\n    \r\n    getResponse(): String {\r\n        if (this._instance === null)\r\n            return null;\r\n        \r\n        return (<any>window).grecaptcha.getResponse(this._instance);\r\n    }\r\n    \r\n    recaptchaCallback(response: string) {\r\n        this.onResponse.emit({\r\n            response: response\r\n        });\r\n    }\r\n\r\n    recaptchaExpiredCallback() {\r\n        this.onExpire.emit();\r\n    }\r\n    \r\n    ngOnDestroy() {\r\n        if (this._instance != null) {\r\n          (<any>window).grecaptcha.reset(this._instance);\r\n        }\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [Captcha],\r\n    declarations: [Captcha]\r\n})\r\nexport class CaptchaModule { }\r\n"]}