{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","../../src/app/components/inputnumber/inputnumber.ts"],"names":["Object","create","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","INPUTNUMBER_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","InputNumber","multi","el","cd","this","showButtons","format","buttonLayout","incrementButtonIcon","decrementButtonIcon","step","onInput","EventEmitter","onFocus","onBlur","onModelChange","onModelTouched","groupChar","prefixChar","suffixChar","_modeOption","_useGroupingOption","defineProperty","prototype","_localeOption","localeOption","updateConstructParser","_localeMatcherOption","localeMatcherOption","modeOption","_currencyOption","currencyOption","_currencyDisplayOption","currencyDisplayOption","useGroupingOption","_minFractionDigitsOption","minFractionDigitsOption","_maxFractionDigitsOption","maxFractionDigitsOption","_prefixOption","prefixOption","_suffixOption","suffixOption","ngOnInit","constructParser","initialized","getOptions","localeMatcher","style","mode","currency","currencyDisplay","useGrouping","minimumFractionDigits","minFractionDigits","maximumFractionDigits","maxFractionDigits","numberFormat","Intl","NumberFormat","locale","numerals","arguments","length","concat","__spread","reverse","index","Map","map","d","_numeral","RegExp","join","_decimal","getDecimalExpression","_group","getGroupingExpression","_minusSign","getMinusSignExpression","_currency","getCurrencyExpression","_suffix","getSuffixExpression","_prefix","getPrefixExpression","_index","get","escapeRegExp","text","replace","formatter","trim","charAt","prefix","split","suffix","formatValue","formattedValue","toString","parseValue","filteredText","parsedValue","isNaN","repeat","event","interval","dir","_this","clearTimer","timer","setTimeout","spin","currentValue","input","nativeElement","newValue","validateValue","maxlength","updateInput","updateModel","handleOnInput","onUpButtonMouseDown","focus","preventDefault","onUpButtonMouseUp","onUpButtonMouseLeave","onUpButtonKeyDown","keyCode","onUpButtonKeyUp","onDownButtonMouseDown","onDownButtonMouseUp","onDownButtonMouseLeave","onDownButtonKeyUp","onDownButtonKeyDown","onUserInput","isSpecialChar","target","lastValue","onInputKeyDown","shiftKey","altKey","selectionStart","selectionEnd","inputValue","newValueStr","which","isNumeralChar","deleteChar","decimalCharIndex","search","lastIndex","test","slice","setSelectionRange","updateValue","deleteRange","onInputKeyPress","code","char","String","fromCharCode","isDecimalSign","isMinusSign","insert","onPaste","data","clipboardData","window","getData","filteredData","sign","minusCharIndex","insertText","resolvedOptions","operation","start","end","initCursor","valueLength","onInputClick","resetRegex","valueStr","insertedValueStr","isValueChanged","emit","originalEvent","min","max","currentLength","newLength","startValue","startExpr","sRegex","tExpr","tRegex","prevChar","nextChar","diff","isGroupChar","setAttribute","onInputFocus","focused","onInputBlur","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","val","disabled","clearInterval","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","providers","encapsulation","ViewEncapsulation","None","host","[class.p-inputwrapper-filled]","[class.p-inputwrapper-focus]","ElementRef","ChangeDetectorRef","Input","ViewChild","Output","NgModule","imports","CommonModule","InputTextModule","ButtonModule","exports","declarations"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","\r\nimport {NgModule,Component,ChangeDetectionStrategy, Input, ElementRef, ViewChild, OnInit, EventEmitter, Output, forwardRef, ViewEncapsulation, ChangeDetectorRef} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {InputTextModule} from 'primeng/inputtext';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\n\r\nexport const INPUTNUMBER_VALUE_ACCESSOR: any = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => InputNumber),\r\n    multi: true\r\n};\r\n@Component({\r\n    selector: 'p-inputNumber',\r\n    template: `\r\n        <span [ngClass]=\"{'p-inputnumber p-component': true,'p-inputnumber-buttons-stacked': this.showButtons && this.buttonLayout === 'stacked',\r\n                'p-inputnumber-buttons-horizontal': this.showButtons && this.buttonLayout === 'horizontal', 'p-inputnumber-buttons-vertical': this.showButtons && this.buttonLayout === 'vertical'}\"\r\n                [ngStyle]=\"style\" [class]=\"styleClass\">\r\n            <input #input [ngClass]=\"'p-inputnumber-input'\" [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\" pInputText [value]=\"formattedValue()\" [attr.placeholder]=\"placeholder\" [attr.title]=\"title\" [attr.id]=\"inputId\"\r\n                [attr.size]=\"size\" [attr.name]=\"name\" [attr.autocomplete]=\"autocomplete\" [attr.maxlength]=\"maxlength\" [attr.tabindex]=\"tabindex\" [attr.aria-label]=\"ariaLabel\"\r\n                [attr.aria-required]=\"ariaRequired\" [disabled]=\"disabled\" [attr.required]=\"required\" [attr.aria-valumin]=\"min\" [attr.aria-valuemax]=\"max\"\r\n                (input)=\"onUserInput($event)\" (keydown)=\"onInputKeyDown($event)\" (keypress)=\"onInputKeyPress($event)\" (paste)=\"onPaste($event)\" (click)=\"onInputClick()\"\r\n                (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\">\r\n            <span class=\"p-inputnumber-button-group\" *ngIf=\"showButtons && buttonLayout === 'stacked'\">\r\n                <button type=\"button\" pButton [ngClass]=\"{'p-inputnumber-button p-inputnumber-button-up': true}\" [class]=\"incrementButtonClass\" [icon]=\"incrementButtonIcon\" [disabled]=\"disabled\"\r\n                    (mousedown)=\"this.onUpButtonMouseDown($event)\" (mouseup)=\"onUpButtonMouseUp()\" (mouseleave)=\"onUpButtonMouseLeave()\" (keydown)=\"onUpButtonKeyDown($event)\" (keyup)=\"onUpButtonKeyUp()\"></button>\r\n                <button type=\"button\" pButton [ngClass]=\"{'p-inputnumber-button p-inputnumber-button-down': true}\" [class]=\"decrementButtonClass\" [icon]=\"decrementButtonIcon\" [disabled]=\"disabled\"\r\n                    (mousedown)=\"this.onDownButtonMouseDown($event)\" (mouseup)=\"onDownButtonMouseUp()\" (mouseleave)=\"onDownButtonMouseLeave()\" (keydown)=\"onDownButtonKeyDown($event)\" (keyup)=\"onDownButtonKeyUp()\"></button>\r\n            </span>\r\n            <button type=\"button\" pButton [ngClass]=\"{'p-inputnumber-button p-inputnumber-button-up': true}\" [class]=\"incrementButtonClass\" [icon]=\"incrementButtonIcon\" *ngIf=\"showButtons && buttonLayout !== 'stacked'\" [disabled]=\"disabled\"\r\n                (mousedown)=\"this.onUpButtonMouseDown($event)\" (mouseup)=\"onUpButtonMouseUp()\" (mouseleave)=\"onUpButtonMouseLeave()\" (keydown)=\"onUpButtonKeyDown($event)\" (keyup)=\"onUpButtonKeyUp()\"></button>\r\n            <button type=\"button\" pButton [ngClass]=\"{'p-inputnumber-button p-inputnumber-button-down': true}\" [class]=\"decrementButtonClass\" [icon]=\"decrementButtonIcon\" *ngIf=\"showButtons && buttonLayout !== 'stacked'\" [disabled]=\"disabled\"\r\n                (mousedown)=\"this.onDownButtonMouseDown($event)\" (mouseup)=\"onDownButtonMouseUp()\" (mouseleave)=\"onDownButtonMouseLeave()\" (keydown)=\"onDownButtonKeyDown($event)\" (keyup)=\"onDownButtonKeyUp()\"></button>\r\n        </span>\r\n    `,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [INPUTNUMBER_VALUE_ACCESSOR],\r\n    encapsulation: ViewEncapsulation.None,\r\n    styleUrls: ['./inputnumber.css'],\r\n    host: {\r\n        '[class.p-inputwrapper-filled]': 'filled',\r\n        '[class.p-inputwrapper-focus]': 'focused'\r\n    }\r\n})\r\nexport class InputNumber implements OnInit,ControlValueAccessor {\r\n\r\n    @Input() showButtons: boolean = false;\r\n\r\n    @Input() format: boolean = true;\r\n\r\n    @Input() buttonLayout: string = \"stacked\";\r\n\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() inputId: string;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() placeholder: string;\r\n\r\n    @Input() size: number;\r\n\r\n    @Input() maxlength: number;\r\n\r\n    @Input() tabindex: string;\r\n\r\n    @Input() title: string;\r\n\r\n    @Input() ariaLabel: string;\r\n\r\n    @Input() ariaRequired: boolean;\r\n\r\n    @Input() name: string;\r\n\r\n    @Input() required: boolean;\r\n\r\n    @Input() autocomplete: string;\r\n\r\n    @Input() min: number;\r\n\r\n    @Input() max: number;\r\n\r\n    @Input() incrementButtonClass: string;\r\n\r\n    @Input() decrementButtonClass: string;\r\n\r\n    @Input() incrementButtonIcon: string = 'pi pi-angle-up';\r\n\r\n    @Input() decrementButtonIcon: string = 'pi pi-angle-down';\r\n\r\n    @Input() step: number = 1;\r\n\r\n    @Input() inputStyle: any;\r\n\r\n    @Input() inputStyleClass: string;\r\n\r\n    @ViewChild('input') input: ElementRef;\r\n\r\n    @Output() onInput: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n\r\n    value: number;\r\n\r\n    onModelChange: Function = () => {};\r\n\r\n    onModelTouched: Function = () => {};\r\n\r\n    focused: boolean;\r\n\r\n    initialized: boolean;\r\n\r\n    groupChar: string = '';\r\n\r\n    prefixChar: string = '';\r\n\r\n    suffixChar: string = '';\r\n\r\n    isSpecialChar: boolean;\r\n\r\n    timer: any;\r\n\r\n    lastValue: string;\r\n\r\n    _numeral: any;\r\n\r\n    numberFormat: any;\r\n\r\n    _decimal: any;\r\n\r\n    _group: any;\r\n\r\n    _minusSign: any;\r\n\r\n    _currency: any;\r\n\r\n    _prefix: any;\r\n\r\n    _suffix: any;\r\n\r\n    _index: any;\r\n\r\n    _localeOption: string;\r\n\r\n    _localeMatcherOption: string;\r\n\r\n    _modeOption: string = \"decimal\";\r\n\r\n    _currencyOption: string;\r\n\r\n    _currencyDisplayOption: string;\r\n\r\n    _useGroupingOption: boolean = true;\r\n\r\n    _minFractionDigitsOption: number;\r\n\r\n    _maxFractionDigitsOption: number;\r\n\r\n    _prefixOption: string;\r\n\r\n    _suffixOption: string;\r\n\r\n    @Input() get locale(): string {\r\n        return this._localeOption;\r\n    }\r\n\r\n    set locale(localeOption: string) {\r\n        this._localeOption = localeOption;\r\n        this.updateConstructParser();\r\n    }\r\n\r\n    @Input() get localeMatcher(): string {\r\n        return this._localeMatcherOption;\r\n    }\r\n\r\n    set localeMatcher(localeMatcherOption: string) {\r\n        this._localeMatcherOption = localeMatcherOption;\r\n        this.updateConstructParser();\r\n    }\r\n\r\n    @Input() get mode(): string {\r\n        return this._modeOption;\r\n    }\r\n\r\n    set mode(modeOption: string) {\r\n        this._modeOption = modeOption;\r\n        this.updateConstructParser();\r\n    }\r\n\r\n    @Input() get currency(): string {\r\n        return this._currencyOption;\r\n    }\r\n\r\n    set currency(currencyOption: string) {\r\n        this._currencyOption = currencyOption;\r\n        this.updateConstructParser();\r\n    }\r\n\r\n    @Input() get currencyDisplay(): string {\r\n        return this._currencyDisplayOption;\r\n    }\r\n\r\n    set currencyDisplay(currencyDisplayOption: string) {\r\n        this._currencyDisplayOption = currencyDisplayOption;\r\n        this.updateConstructParser();\r\n    }\r\n\r\n    @Input() get useGrouping(): boolean {\r\n        return this._useGroupingOption;\r\n    }\r\n\r\n    set useGrouping(useGroupingOption: boolean) {\r\n        this._useGroupingOption = useGroupingOption;\r\n        this.updateConstructParser();\r\n    }\r\n\r\n    @Input() get minFractionDigits(): number {\r\n        return this._minFractionDigitsOption;\r\n    }\r\n\r\n    set minFractionDigits(minFractionDigitsOption: number) {\r\n        this._minFractionDigitsOption = minFractionDigitsOption;\r\n        this.updateConstructParser();\r\n    }\r\n\r\n    @Input() get maxFractionDigits(): number {\r\n        return this._maxFractionDigitsOption;\r\n    }\r\n\r\n    set maxFractionDigits(maxFractionDigitsOption: number) {\r\n        this._maxFractionDigitsOption = maxFractionDigitsOption;\r\n        this.updateConstructParser();\r\n    }\r\n\r\n    @Input() get prefix(): string {\r\n        return this._prefixOption;\r\n    }\r\n\r\n    set prefix(prefixOption: string) {\r\n        this._prefixOption = prefixOption;\r\n        this.updateConstructParser();\r\n    }\r\n\r\n    @Input() get suffix(): string {\r\n        return this._suffixOption;\r\n    }\r\n\r\n    set suffix(suffixOption: string) {\r\n        this._suffixOption = suffixOption;\r\n        this.updateConstructParser();\r\n    }\r\n\r\n    constructor(public el: ElementRef, private cd: ChangeDetectorRef) { }\r\n\r\n    ngOnInit() {\r\n        this.constructParser();\r\n\r\n        this.initialized = true;\r\n    }\r\n\r\n    getOptions() {\r\n        return {\r\n            localeMatcher: this.localeMatcher,\r\n            style: this.mode,\r\n            currency: this.currency,\r\n            currencyDisplay: this.currencyDisplay,\r\n            useGrouping: this.useGrouping,\r\n            minimumFractionDigits: this.minFractionDigits,\r\n            maximumFractionDigits: this.maxFractionDigits\r\n        };\r\n    }\r\n\r\n    constructParser() {\r\n        this.numberFormat = new Intl.NumberFormat(this.locale, this.getOptions());\r\n        const numerals = [...new Intl.NumberFormat(this.locale, {useGrouping: false}).format(9876543210)].reverse();\r\n        const index = new Map(numerals.map((d, i) => [d, i]));\r\n        this._numeral = new RegExp(`[${numerals.join('')}]`, 'g');\r\n        this._decimal = this.getDecimalExpression();\r\n        this._group = this.getGroupingExpression();\r\n        this._minusSign = this.getMinusSignExpression();\r\n        this._currency = this.getCurrencyExpression();\r\n        this._suffix = this.getSuffixExpression();\r\n        this._prefix = this.getPrefixExpression();\r\n        this._index = d => index.get(d);\r\n    }\r\n\r\n    updateConstructParser() {\r\n        if (this.initialized) {\r\n            this.constructParser();\r\n        }\r\n    }\r\n\r\n    escapeRegExp(text) {\r\n        return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\r\n    }\r\n\r\n    getDecimalExpression() {\r\n        const formatter = new Intl.NumberFormat(this.locale, {useGrouping: false});\r\n        return new RegExp(`[${formatter.format(1.1).trim().replace(this._numeral, '')}]`, 'g');\r\n    }\r\n\r\n    getGroupingExpression() {\r\n        const formatter = new Intl.NumberFormat(this.locale, {useGrouping: true});\r\n        this.groupChar = formatter.format(1000000).trim().replace(this._numeral, '').charAt(0);\r\n        return new RegExp(`[${this.groupChar}]`, 'g');\r\n    }\r\n\r\n    getMinusSignExpression() {\r\n        const formatter = new Intl.NumberFormat(this.locale, {useGrouping: false});\r\n        return new RegExp(`[${formatter.format(-1).trim().replace(this._numeral, '')}]`, 'g');\r\n    }\r\n\r\n    getCurrencyExpression() {\r\n        if (this.currency) {\r\n            const formatter = new Intl.NumberFormat(this.locale, {style: 'currency', currency: this.currency, currencyDisplay: this.currencyDisplay});\r\n            return new RegExp(`[${formatter.format(1).replace(/\\s/g, '').replace(this._numeral, '').replace(this._decimal, '').replace(this._group, '')}]`, 'g');\r\n        }\r\n\r\n        return new RegExp(`[]`,'g');\r\n    }\r\n\r\n    getPrefixExpression() {\r\n        if (this.prefix) {\r\n            this.prefixChar = this.prefix;\r\n        }\r\n        else {\r\n            const formatter = new Intl.NumberFormat(this.locale, {style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay});\r\n            this.prefixChar = formatter.format(1).split('1')[0];\r\n        }\r\n\r\n        return new RegExp(`${this.escapeRegExp(this.prefixChar||'')}`, 'g');\r\n    }\r\n\r\n    getSuffixExpression() {\r\n        if (this.suffix) {\r\n            this.suffixChar = this.suffix;\r\n        }\r\n        else {\r\n            const formatter = new Intl.NumberFormat(this.locale, {style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay,\r\n                minimumFractionDigits: 0, maximumFractionDigits: 0});\r\n            this.suffixChar = formatter.format(1).split('1')[1];\r\n        }\r\n\r\n        return new RegExp(`${this.escapeRegExp(this.suffixChar||'')}`, 'g');\r\n    }\r\n\r\n    formatValue(value) {\r\n        if (value != null) {\r\n            if (value === '-') { // Minus sign\r\n                return value;\r\n            }\r\n\r\n            if (this.format) {\r\n                let formatter = new Intl.NumberFormat(this.locale, this.getOptions());\r\n                let formattedValue = formatter.format(value);\r\n                if (this.prefix) {\r\n                    formattedValue = this.prefix + formattedValue;\r\n                }\r\n\r\n                if (this.suffix) {\r\n                    formattedValue = formattedValue + this.suffix;\r\n                }\r\n\r\n                return formattedValue;\r\n            }\r\n\r\n            return value.toString();\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    parseValue(text) {\r\n        let filteredText = text\r\n                            .replace(this._suffix, '')\r\n                            .replace(this._prefix, '')\r\n                            .trim()\r\n                            .replace(/\\s/g, '')\r\n                            .replace(this._currency, '')\r\n                            .replace(this._group, '')\r\n                            .replace(this._minusSign, '-')\r\n                            .replace(this._decimal, '.')\r\n                            .replace(this._numeral, this._index);\r\n\r\n        if (filteredText) {\r\n            if (filteredText === '-') // Minus sign\r\n                return filteredText;\r\n\r\n            let parsedValue = +filteredText;\r\n            return isNaN(parsedValue) ? null : parsedValue;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    repeat(event, interval, dir) {\r\n        let i = interval || 500;\r\n\r\n        this.clearTimer();\r\n        this.timer = setTimeout(() => {\r\n            this.repeat(event, 40, dir);\r\n        }, i);\r\n\r\n        this.spin(event, dir);\r\n    }\r\n\r\n    spin(event, dir) {\r\n        let step = this.step * dir;\r\n        let currentValue = this.parseValue(this.input.nativeElement.value) || 0;\r\n        let newValue = this.validateValue(currentValue + step);\r\n        if (this.maxlength && this.maxlength < this.formatValue(newValue).length) {\r\n            return;\r\n        }\r\n\r\n        this.updateInput(newValue, null, 'spin');\r\n        this.updateModel(event, newValue);\r\n\r\n        this.handleOnInput(event, currentValue, newValue);\r\n    }\r\n\r\n    onUpButtonMouseDown(event) {\r\n        this.input.nativeElement.focus();\r\n        this.repeat(event, null, 1);\r\n        event.preventDefault();\r\n    }\r\n\r\n    onUpButtonMouseUp() {\r\n        this.clearTimer();\r\n    }\r\n\r\n    onUpButtonMouseLeave() {\r\n        this.clearTimer();\r\n    }\r\n\r\n    onUpButtonKeyDown(event) {\r\n        if (event.keyCode === 32 || event.keyCode === 13) {\r\n            this.repeat(event, null, 1);\r\n        }\r\n    }\r\n\r\n    onUpButtonKeyUp() {\r\n        this.clearTimer();\r\n    }\r\n\r\n    onDownButtonMouseDown(event) {\r\n        this.input.nativeElement.focus();\r\n        this.repeat(event, null, -1);\r\n        event.preventDefault();\r\n    }\r\n\r\n    onDownButtonMouseUp() {\r\n        this.clearTimer();\r\n    }\r\n\r\n    onDownButtonMouseLeave() {\r\n        this.clearTimer();\r\n    }\r\n\r\n    onDownButtonKeyUp() {\r\n        this.clearTimer();\r\n    }\r\n\r\n    onDownButtonKeyDown(event) {\r\n        if (event.keyCode === 32 || event.keyCode === 13) {\r\n            this.repeat(event, null, -1);\r\n        }\r\n    }\r\n\r\n    onUserInput(event) {\r\n        if (this.isSpecialChar) {\r\n            event.target.value = this.lastValue;\r\n        }\r\n        this.isSpecialChar = false;\r\n    }\r\n\r\n    onInputKeyDown(event) {\r\n        this.lastValue = event.target.value;\r\n        if (event.shiftKey || event.altKey) {\r\n            this.isSpecialChar = true;\r\n            return;\r\n        }\r\n\r\n        let selectionStart = event.target.selectionStart;\r\n        let selectionEnd = event.target.selectionEnd;\r\n        let inputValue = event.target.value;\r\n        let newValueStr = null;\r\n\r\n        if (event.altKey) {\r\n            event.preventDefault();\r\n        }\r\n\r\n        switch (event.which) {\r\n            //up\r\n            case 38:\r\n                this.spin(event, 1);\r\n                event.preventDefault();\r\n            break;\r\n\r\n            //down\r\n            case 40:\r\n                this.spin(event, -1);\r\n                event.preventDefault();\r\n            break;\r\n\r\n            //left\r\n            case 37:\r\n                if (!this.isNumeralChar(inputValue.charAt(selectionStart - 1))) {\r\n                    event.preventDefault();\r\n                }\r\n            break;\r\n\r\n            //right\r\n            case 39:\r\n                if (!this.isNumeralChar(inputValue.charAt(selectionStart))) {\r\n                    event.preventDefault();\r\n                }\r\n            break;\r\n\r\n            //backspace\r\n            case 8: {\r\n                event.preventDefault();\r\n\r\n                if (selectionStart === selectionEnd) {\r\n                    let deleteChar = inputValue.charAt(selectionStart - 1);\r\n                    let decimalCharIndex = inputValue.search(this._decimal);\r\n                    this._decimal.lastIndex = 0;\r\n\r\n                    if (this.isNumeralChar(deleteChar)) {\r\n                        if (this._group.test(deleteChar)) {\r\n                            this._group.lastIndex = 0;\r\n                            newValueStr = inputValue.slice(0, selectionStart - 2) + inputValue.slice(selectionStart - 1);\r\n                        }\r\n                        else if (this._decimal.test(deleteChar)) {\r\n                            this._decimal.lastIndex = 0;\r\n                            this.input.nativeElement.setSelectionRange(selectionStart - 1, selectionStart - 1);\r\n                        }\r\n                        else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\r\n                            newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\r\n                        }\r\n                        else if (decimalCharIndex > 0 && decimalCharIndex === 1) {\r\n                            newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\r\n                            newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\r\n                        }\r\n                        else {\r\n                            newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\r\n                        }\r\n                    }\r\n\r\n                    this.updateValue(event, newValueStr, null, 'delete-single');\r\n                }\r\n                else {\r\n                    newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\r\n                    this.updateValue(event, newValueStr, null, 'delete-range');\r\n                }\r\n\r\n                break;\r\n            }\r\n\r\n            // del\r\n            case 46:\r\n                event.preventDefault();\r\n\r\n                if (selectionStart === selectionEnd) {\r\n                    let deleteChar = inputValue.charAt(selectionStart);\r\n                    let decimalCharIndex = inputValue.search(this._decimal);\r\n                    this._decimal.lastIndex = 0;\r\n\r\n                    if (this.isNumeralChar(deleteChar)) {\r\n                        if (this._group.test(deleteChar)) {\r\n                            this._group.lastIndex = 0;\r\n                            newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 2);\r\n                        }\r\n                        else if (this._decimal.test(deleteChar)) {\r\n                            this._decimal.lastIndex = 0;\r\n                            this.input.nativeElement.setSelectionRange(selectionStart + 1, selectionStart + 1);\r\n                        }\r\n                        else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\r\n                            newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\r\n                        }\r\n                        else if (decimalCharIndex > 0 && decimalCharIndex === 1) {\r\n                            newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\r\n                            newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\r\n                        }\r\n                        else {\r\n                            newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\r\n                        }\r\n                    }\r\n\r\n                    this.updateValue(event, newValueStr, null, 'delete-back-single');\r\n                }\r\n                else {\r\n                    newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\r\n                    this.updateValue(event, newValueStr, null, 'delete-range');\r\n                }\r\n            break;\r\n\r\n            default:\r\n            break;\r\n        }\r\n    }\r\n\r\n    onInputKeyPress(event) {\r\n        event.preventDefault();\r\n        let code = event.which || event.keyCode;\r\n        let char = String.fromCharCode(code);\r\n        const isDecimalSign = this.isDecimalSign(char);\r\n        const isMinusSign = this.isMinusSign(char);\r\n\r\n        if ((48 <= code && code <= 57) || isMinusSign || isDecimalSign) {\r\n            this.insert(event, char, { isDecimalSign, isMinusSign });\r\n        }\r\n    }\r\n\r\n    onPaste(event) {\r\n        event.preventDefault();\r\n        let data = (event.clipboardData || window['clipboardData']).getData('Text');\r\n        if (data) {\r\n            let filteredData = this.parseValue(data);\r\n            if (filteredData != null) {\r\n                this.insert(event, filteredData.toString());\r\n            }\r\n        }\r\n    }\r\n\r\n    isMinusSign(char) {\r\n        if (this._minusSign.test(char)) {\r\n            this._minusSign.lastIndex = 0;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isDecimalSign(char) {\r\n        if (this._decimal.test(char)) {\r\n            this._decimal.lastIndex = 0;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    insert(event, text, sign = { isDecimalSign: false, isMinusSign: false }) {\r\n        let selectionStart = this.input.nativeElement.selectionStart;\r\n        let selectionEnd = this.input.nativeElement.selectionEnd;\r\n        let inputValue = this.input.nativeElement.value.trim();\r\n        const decimalCharIndex = inputValue.search(this._decimal);\r\n        this._decimal.lastIndex = 0;\r\n        const minusCharIndex = inputValue.search(this._minusSign);\r\n        this._minusSign.lastIndex = 0;\r\n        let newValueStr;\r\n\r\n        if (sign.isMinusSign) {\r\n            if (selectionStart === 0) {\r\n                newValueStr = inputValue;\r\n                if (minusCharIndex === -1 || selectionEnd !== 0) {\r\n                    newValueStr = this.insertText(inputValue, text, 0, selectionEnd);\r\n                }\r\n\r\n                this.updateValue(event, newValueStr, text, 'insert');\r\n            }\r\n        }\r\n        else if (sign.isDecimalSign) {\r\n            if (decimalCharIndex > 0 && selectionStart === decimalCharIndex) {\r\n                this.updateValue(event, inputValue, text, 'insert');\r\n            }\r\n            else if (decimalCharIndex > selectionStart && decimalCharIndex < selectionEnd) {\r\n                newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\r\n                this.updateValue(event, newValueStr, text, 'insert');\r\n            }\r\n        }\r\n        else {\r\n            const maxFractionDigits = this.numberFormat.resolvedOptions().maximumFractionDigits;\r\n            const operation = selectionStart !== selectionEnd ? 'range-insert' : 'insert';\r\n\r\n            if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\r\n                if ((selectionStart + text.length - (decimalCharIndex + 1)) <= maxFractionDigits) {\r\n                    newValueStr = inputValue.slice(0, selectionStart) + text + inputValue.slice(selectionStart + text.length);\r\n                    this.updateValue(event, newValueStr, text, operation);\r\n                }\r\n            }\r\n            else {\r\n                newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\r\n                this.updateValue(event, newValueStr, text, operation);\r\n            }\r\n        }\r\n    }\r\n\r\n    insertText(value, text, start, end) {\r\n        let textSplit = text.split('.');\r\n\r\n        if (textSplit.length == 2) {\r\n            const decimalCharIndex = value.slice(start, end).search(this._decimal);\r\n            this._decimal.lastIndex = 0;\r\n            return (decimalCharIndex > 0) ? value.slice(0, start) + this.formatValue(text) + value.slice(end) : (value || this.formatValue(text));\r\n        }\r\n        else if ((end - start) === value.length) {\r\n            return this.formatValue(text);\r\n        }\r\n        else if (start === 0) {\r\n            return text + value.slice(end);\r\n        }\r\n        else if (end === value.length) {\r\n            return value.slice(0, start) + text;\r\n        }\r\n        else {\r\n            return value.slice(0, start) + text + value.slice(end);\r\n        }\r\n    }\r\n\r\n    deleteRange(value, start, end) {\r\n        let newValueStr;\r\n\r\n        if ((end - start) === value.length)\r\n            newValueStr = '';\r\n        else if (start === 0)\r\n            newValueStr = value.slice(end);\r\n        else if (end === value.length)\r\n            newValueStr = value.slice(0, start);\r\n        else\r\n            newValueStr = value.slice(0, start) + value.slice(end);\r\n\r\n        return newValueStr;\r\n    }\r\n\r\n    initCursor() {\r\n        let selectionStart = this.input.nativeElement.selectionStart;\r\n        let inputValue = this.input.nativeElement.value;\r\n        let valueLength = inputValue.length;\r\n        let index = null;\r\n\r\n        let char = inputValue.charAt(selectionStart);\r\n        if (this.isNumeralChar(char)) {\r\n            return;\r\n        }\r\n\r\n        //left\r\n        let i = selectionStart - 1;\r\n        while (i >= 0) {\r\n            char = inputValue.charAt(i);\r\n            if (this.isNumeralChar(char)) {\r\n                index = i;\r\n                break;\r\n            }\r\n            else {\r\n                i--;\r\n            }\r\n        }\r\n\r\n        if (index !== null) {\r\n            this.input.nativeElement.setSelectionRange(index + 1, index + 1);\r\n        }\r\n        else {\r\n            i = selectionStart + 1;\r\n            while (i < valueLength) {\r\n                char = inputValue.charAt(i);\r\n                if (this.isNumeralChar(char)) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n                else {\r\n                    i++;\r\n                }\r\n            }\r\n\r\n            if (index !== null) {\r\n                this.input.nativeElement.setSelectionRange(index, index);\r\n            }\r\n        }\r\n    }\r\n\r\n    onInputClick() {\r\n        this.initCursor();\r\n    }\r\n\r\n    isNumeralChar(char) {\r\n        if (char.length === 1 && (this._numeral.test(char) || this._decimal.test(char) || this._group.test(char) || this._minusSign.test(char))) {\r\n            this.resetRegex();\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    resetRegex() {\r\n        this._numeral.lastIndex =  0;\r\n        this._decimal.lastIndex =  0;\r\n        this._group.lastIndex =  0;\r\n        this._minusSign.lastIndex =  0;\r\n    }\r\n\r\n    updateValue(event, valueStr, insertedValueStr, operation) {\r\n        let currentValue = this.input.nativeElement.value;\r\n        let newValue = null;\r\n\r\n        if (valueStr != null) {\r\n            newValue = this.parseValue(valueStr);\r\n            this.updateInput(newValue, insertedValueStr, operation);\r\n        }\r\n\r\n        this.handleOnInput(event, currentValue, newValue);\r\n    }\r\n\r\n    handleOnInput(event, currentValue, newValue) {\r\n        if (this.isValueChanged(currentValue, newValue)) {\r\n            this.onInput.emit({ originalEvent: event, value: newValue });\r\n        }\r\n    }\r\n\r\n    isValueChanged(currentValue, newValue) {\r\n        if (newValue === null && currentValue !== null) {\r\n            return true;\r\n        }\r\n\r\n        if (newValue != null) {\r\n            let parsedCurrentValue = (typeof currentValue === 'string') ? this.parseValue(currentValue) : currentValue;\r\n            return newValue !== parsedCurrentValue;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    validateValue(value) {\r\n        if (this.min !== null && value < this.min) {\r\n            return this.min;\r\n        }\r\n\r\n        if (this.max !== null && value > this.max) {\r\n            return this.max;\r\n        }\r\n\r\n        if (value === '-') { // Minus sign\r\n            return null;\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    updateInput(value, insertedValueStr, operation) {\r\n        insertedValueStr = insertedValueStr || '';\r\n\r\n        let inputValue = this.input.nativeElement.value;\r\n        let newValue = this.formatValue(value);\r\n        let currentLength = inputValue.length;\r\n\r\n        if (currentLength === 0) {\r\n            this.input.nativeElement.value = newValue;\r\n            this.input.nativeElement.setSelectionRange(0, 0);\r\n            this.initCursor();\r\n            const prefixLength = (this.prefixChar || '').length;\r\n            const selectionEnd = prefixLength + insertedValueStr.length;\r\n            this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\r\n        }\r\n        else {\r\n            let selectionStart = this.input.nativeElement.selectionStart;\r\n            let selectionEnd = this.input.nativeElement.selectionEnd;\r\n            if (this.maxlength && this.maxlength < newValue.length) {\r\n                return;\r\n            }\r\n\r\n            this.input.nativeElement.value = newValue;\r\n            let newLength = newValue.length;\r\n\r\n            if (operation === 'range-insert') {\r\n                const startValue = this.parseValue((inputValue || '').slice(0, selectionStart));\r\n                const startValueStr = startValue !== null ? startValue.toString() : '';\r\n                const startExpr = startValueStr.split('').join(`(${this.groupChar})?`);\r\n                const sRegex = new RegExp(startExpr, 'g');\r\n                sRegex.test(newValue);\r\n\r\n                const tExpr = insertedValueStr.split('').join(`(${this.groupChar})?`);\r\n                const tRegex = new RegExp(tExpr, 'g');\r\n                tRegex.test(newValue.slice(sRegex.lastIndex));\r\n\r\n                selectionEnd = sRegex.lastIndex + tRegex.lastIndex;\r\n                this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\r\n            }\r\n            else if (newLength === currentLength) {\r\n                if (operation === 'insert' || operation === 'delete-back-single')\r\n                    this.input.nativeElement.setSelectionRange(selectionEnd + 1, selectionEnd + 1);\r\n                else if (operation === 'delete-single')\r\n                    this.input.nativeElement.setSelectionRange(selectionEnd - 1, selectionEnd - 1);\r\n                else if (operation === 'delete-range' || operation === 'spin')\r\n                    this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\r\n            }\r\n            else if (operation === 'delete-back-single') {\r\n                let prevChar = inputValue.charAt(selectionEnd - 1);\r\n                let nextChar = inputValue.charAt(selectionEnd);\r\n                let diff = currentLength - newLength;\r\n                let isGroupChar = this._group.test(nextChar);\r\n\r\n                if (isGroupChar && diff === 1) {\r\n                    selectionEnd += 1;\r\n                }\r\n                else if (!isGroupChar && this.isNumeralChar(prevChar)) {\r\n                    selectionEnd += (-1 * diff) + 1;\r\n                }\r\n\r\n                this._group.lastIndex = 0;\r\n                this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\r\n            }\r\n            else {\r\n                selectionEnd = selectionEnd + (newLength - currentLength);\r\n                this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\r\n            }\r\n        }\r\n\r\n        this.input.nativeElement.setAttribute('aria-valuenow', value);\r\n    }\r\n\r\n    onInputFocus(event) {\r\n        this.focused = true;\r\n        this.onFocus.emit(event);\r\n    }\r\n\r\n    onInputBlur(event) {\r\n        this.focused = false;\r\n\r\n        let newValue = this.validateValue(this.parseValue(this.input.nativeElement.value));\r\n        this.input.nativeElement.value = this.formatValue(newValue);\r\n        this.input.nativeElement.setAttribute('aria-valuenow', newValue);\r\n        this.updateModel(event, newValue);\r\n\r\n        this.onBlur.emit(event);\r\n    }\r\n\r\n    formattedValue() {\r\n        return this.formatValue(this.value);\r\n    }\r\n\r\n    updateModel(event, value) {\r\n        if (this.value !== value) {\r\n            this.value = value;\r\n            this.onModelChange(value);\r\n        }\r\n\r\n        this.onModelTouched();\r\n    }\r\n\r\n    writeValue(value: any) : void {\r\n        this.value = value;\r\n        this.cd.markForCheck();\r\n    }\r\n\r\n    registerOnChange(fn: Function): void {\r\n        this.onModelChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: Function): void {\r\n        this.onModelTouched = fn;\r\n    }\r\n\r\n    setDisabledState(val: boolean): void {\r\n        this.disabled = val;\r\n        this.cd.markForCheck();\r\n    }\r\n\r\n    get filled() {\r\n        return (this.value != null && this.value.toString().length > 0)\r\n    }\r\n\r\n    clearTimer() {\r\n        if (this.timer) {\r\n            clearInterval(this.timer);\r\n        }\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule,InputTextModule, ButtonModule],\r\n    exports: [InputNumber],\r\n    declarations: [InputNumber]\r\n})\r\nexport class InputNumberModule { }\r\n"]}