{"version":3,"sources":["../../src/app/components/editor/editor.ts"],"names":["EDITOR_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","Editor","multi","el","this","onTextChange","EventEmitter","onSelectionChange","onInit","onModelChange","onModelTouched","prototype","ngAfterViewInit","_this","editorElement","DomHandler","findSingle","nativeElement","defaultModule","toolbar","modules","Object","assign","quill","Quill","placeholder","readOnly","readonly","theme","formats","bounds","debug","scrollingContainer","value","pasteHTML","on","delta","oldContents","source","html","children","innerHTML","text","getText","trim","emit","htmlValue","textValue","range","oldRange","editor","ngAfterContentInit","templates","forEach","item","getType","toolbarTemplate","template","writeValue","setText","registerOnChange","fn","registerOnTouched","getQuill","defineProperty","_readonly","val","disable","enable","Component","args","selector","providers","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ElementRef","Output","ContentChild","Header","Input","ContentChildren","PrimeTemplate","NgModule","imports","CommonModule","exports","SharedModule","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,AfterViewInit,Input,Output,EventEmitter,ContentChild,forwardRef,ChangeDetectionStrategy, ViewEncapsulation, ContentChildren, QueryList, AfterContentInit, TemplateRef} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {SharedModule,Header, PrimeTemplate} from 'primeng/api'\r\nimport {DomHandler} from 'primeng/dom';\r\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\r\nimport * as Quill from \"quill\";\r\n\r\nexport const EDITOR_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => Editor),\r\n  multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'p-editor',\r\n    template: `\r\n        <div [ngClass]=\"'p-editor-container'\" [class]=\"styleClass\">\r\n            <div class=\"p-editor-toolbar\" *ngIf=\"toolbar || toolbarTemplate\">\r\n                <ng-content select=\"p-header\"></ng-content>\r\n                <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\r\n            </div>\r\n            <div class=\"p-editor-toolbar\" *ngIf=\"!toolbar && !toolbarTemplate\">\r\n                <span class=\"ql-formats\">\r\n                    <select class=\"ql-header\">\r\n                      <option value=\"1\">Heading</option>\r\n                      <option value=\"2\">Subheading</option>\r\n                      <option selected>Normal</option>\r\n                    </select>\r\n                    <select class=\"ql-font\">\r\n                      <option selected>Sans Serif</option>\r\n                      <option value=\"serif\">Serif</option>\r\n                      <option value=\"monospace\">Monospace</option>\r\n                    </select>\r\n                </span>\r\n                <span class=\"ql-formats\">\r\n                    <button class=\"ql-bold\" aria-label=\"Bold\" type=\"button\"></button>\r\n                    <button class=\"ql-italic\" aria-label=\"Italic\" type=\"button\"></button>\r\n                    <button class=\"ql-underline\" aria-label=\"Underline\" type=\"button\"></button>\r\n                </span>\r\n                <span class=\"ql-formats\">\r\n                    <select class=\"ql-color\"></select>\r\n                    <select class=\"ql-background\"></select>\r\n                </span>\r\n                <span class=\"ql-formats\">\r\n                    <button class=\"ql-list\" value=\"ordered\" aria-label=\"Ordered List\" type=\"button\"></button>\r\n                    <button class=\"ql-list\" value=\"bullet\" aria-label=\"Unordered List\" type=\"button\"></button>\r\n                    <select class=\"ql-align\">\r\n                        <option selected></option>\r\n                        <option value=\"center\"></option>\r\n                        <option value=\"right\"></option>\r\n                        <option value=\"justify\"></option>\r\n                    </select>\r\n                </span>\r\n                <span class=\"ql-formats\">\r\n                    <button class=\"ql-link\" aria-label=\"Insert Link\" type=\"button\"></button>\r\n                    <button class=\"ql-image\" aria-label=\"Insert Image\" type=\"button\"></button>\r\n                    <button class=\"ql-code-block\" aria-label=\"Insert Code Block\" type=\"button\"></button>\r\n                </span>\r\n                <span class=\"ql-formats\">\r\n                    <button class=\"ql-clean\" aria-label=\"Remove Styles\" type=\"button\"></button>\r\n                </span>\r\n            </div>\r\n            <div class=\"p-editor-content\" [ngStyle]=\"style\"></div>\r\n        </div>\r\n    `,\r\n    providers: [EDITOR_VALUE_ACCESSOR],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class Editor implements AfterViewInit,AfterContentInit,ControlValueAccessor {\r\n        \r\n    @Output() onTextChange: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onSelectionChange: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @ContentChild(Header) toolbar;\r\n    \r\n    @Input() style: any;\r\n        \r\n    @Input() styleClass: string;\r\n    \r\n    @Input() placeholder: string;\r\n    \r\n    @Input() formats: string[];\r\n\r\n    @Input() modules: any;\r\n\r\n    @Input() bounds: any;\r\n\r\n    @Input() scrollingContainer: any;\r\n\r\n    @Input() debug: string;\r\n    \r\n    @Output() onInit: EventEmitter<any> = new EventEmitter();\r\n\r\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\r\n    \r\n    value: string;\r\n    \r\n    _readonly: boolean;\r\n    \r\n    onModelChange: Function = () => {};\r\n    \r\n    onModelTouched: Function = () => {};\r\n    \r\n    quill: any;\r\n\r\n    toolbarTemplate: TemplateRef<any>;\r\n    \r\n    constructor(public el: ElementRef) {}\r\n\r\n    ngAfterViewInit() {\r\n        let editorElement = DomHandler.findSingle(this.el.nativeElement ,'div.p-editor-content'); \r\n        let toolbarElement = DomHandler.findSingle(this.el.nativeElement ,'div.p-editor-toolbar'); \r\n        let defaultModule  = {toolbar: toolbarElement};\r\n        let modules = this.modules ? {...defaultModule, ...this.modules} : defaultModule;\r\n\r\n        this.quill = new Quill(editorElement, {\r\n            modules: modules,\r\n            placeholder: this.placeholder,\r\n            readOnly: this.readonly,\r\n            theme: 'snow',\r\n            formats: this.formats,\r\n            bounds: this.bounds,\r\n            debug: this.debug,\r\n            scrollingContainer: this.scrollingContainer\r\n        });\r\n                \r\n        if (this.value) {\r\n            this.quill.pasteHTML(this.value);\r\n        }\r\n        \r\n        this.quill.on('text-change', (delta, oldContents, source) => {\r\n            if (source === 'user') {\r\n                let html = editorElement.children[0].innerHTML;\r\n                let text = this.quill.getText().trim();\r\n                if (html === '<p><br></p>') {\r\n                    html = null;\r\n                }\r\n\r\n                this.onTextChange.emit({\r\n                    htmlValue: html,\r\n                    textValue: text,\r\n                    delta: delta,\r\n                    source: source\r\n                });\r\n                \r\n                this.onModelChange(html);\r\n                this.onModelTouched();\r\n            }\r\n        });\r\n        \r\n        this.quill.on('selection-change', (range, oldRange, source) => {\r\n            this.onSelectionChange.emit({\r\n                range: range,\r\n                oldRange: oldRange,\r\n                source: source\r\n            });\r\n        });\r\n        \r\n        this.onInit.emit({\r\n            editor: this.quill\r\n        });\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch(item.getType()) {\r\n                case 'toolbar':\r\n                    this.toolbarTemplate = item.template;\r\n                break;\r\n            }\r\n        });\r\n    }\r\n        \r\n    writeValue(value: any) : void {\r\n        this.value = value;\r\n                \r\n        if (this.quill) {\r\n            if (value)\r\n                this.quill.pasteHTML(value);\r\n            else\r\n                this.quill.setText('');\r\n        }\r\n    }\r\n    \r\n    registerOnChange(fn: Function): void {\r\n        this.onModelChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: Function): void {\r\n        this.onModelTouched = fn;\r\n    }\r\n    \r\n    getQuill() {\r\n        return this.quill;\r\n    }\r\n    \r\n    @Input() get readonly(): boolean {\r\n        return this._readonly;\r\n    }\r\n\r\n    set readonly(val:boolean) {\r\n        this._readonly = val;\r\n        \r\n        if (this.quill) {\r\n            if (this._readonly)\r\n                this.quill.disable();\r\n            else\r\n                this.quill.enable();\r\n        }\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [Editor,SharedModule],\r\n    declarations: [Editor]\r\n})\r\nexport class EditorModule { }\r\n"]}