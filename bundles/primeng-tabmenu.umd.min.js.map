{"version":3,"sources":["../../src/app/components/tabmenu/tabmenu.ts"],"names":["TabMenu","prototype","ngAfterContentInit","_this","this","templates","forEach","item","getType","itemTemplate","template","ngAfterViewInit","updateInkBar","ngAfterViewChecked","tabChanged","itemClick","event","disabled","preventDefault","command","originalEvent","activeItem","tabHeader","DomHandler","findSingle","navbar","nativeElement","inkbar","style","width","getWidth","left","getOffset","Component","args","selector","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","Input","ViewChild","ContentChildren","PrimeTemplate","NgModule","imports","CommonModule","RouterModule","SharedModule","RippleModule","exports","declarations"],"mappings":"uoBA4CA,SAAAA,YAsBIA,EAAAC,UAAAC,mBAAA,WAAA,IAAAC,EAAAC,KACIA,KAAKC,UAAUC,SAAQ,SAACC,GACpB,OAAOA,EAAKC,WACR,IAAK,OAIL,QACIL,EAAKM,aAAeF,EAAKG,cAMzCV,EAAAC,UAAAU,gBAAA,WACIP,KAAKQ,gBAGTZ,EAAAC,UAAAY,mBAAA,WACQT,KAAKU,aACLV,KAAKQ,eACLR,KAAKU,YAAa,IAI1Bd,EAAAC,UAAAc,UAAA,SAAUC,EAAcT,GAChBA,EAAKU,SACLD,EAAME,kBAINX,EAAKY,SACLZ,EAAKY,QAAQ,CACTC,cAAeJ,EACfT,KAAMA,IAIdH,KAAKiB,WAAad,EAClBH,KAAKU,YAAa,IAGtBd,EAAAC,UAAAW,aAAA,WACI,IAAIU,EAAYC,EAAAA,WAAWC,WAAWpB,KAAKqB,OAAOC,cAAe,kBAC7DJ,IACAlB,KAAKuB,OAAOD,cAAcE,MAAMC,MAAQN,EAAAA,WAAWO,SAASR,GAAa,KACzElB,KAAKuB,OAAOD,cAAcE,MAAMG,KAAOR,EAAAA,WAAWS,UAAUV,GAAWS,KAAOR,EAAAA,WAAWS,UAAU5B,KAAKqB,OAAOC,eAAeK,KAAO,gCAxGhJE,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,YACVzB,SAAU,u0FA8BV0B,gBAAiBC,EAAAA,wBAAwBC,OACzCC,cAAeC,EAAAA,kBAAkBC,4hBAKhCC,EAAAA,0BAEAA,EAAAA,qBAEAA,EAAAA,qBAEAA,EAAAA,0BAEAA,EAAAA,sBAEAC,EAAAA,UAAST,KAAA,CAAC,0BAEVS,EAAAA,UAAST,KAAA,CAAC,6BAEVU,EAAAA,gBAAeV,KAAA,CAACW,EAAAA,wBA8DrB,iCALCC,EAAAA,SAAQZ,KAAA,CAAC,CACNa,QAAS,CAACC,EAAAA,aAAaC,EAAAA,aAAaC,EAAAA,aAAaC,EAAAA,cACjDC,QAAS,CAACpD,EAAQiD,EAAAA,aAAaC,EAAAA,cAC/BG,aAAc,CAACrD","sourcesContent":["import {NgModule,Component,Input,ContentChildren,QueryList,AfterContentInit,AfterViewInit,AfterViewChecked,TemplateRef,ChangeDetectionStrategy, ViewEncapsulation, ViewChild, ElementRef} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {MenuItem} from 'primeng/api';\r\nimport {RippleModule} from 'primeng/ripple';\r\nimport {PrimeTemplate, SharedModule} from 'primeng/api';\r\nimport {RouterModule} from '@angular/router';\r\nimport {DomHandler} from 'primeng/dom';\r\n\r\n@Component({\r\n    selector: 'p-tabMenu',\r\n    template: `\r\n        <div [ngClass]=\"'p-tabmenu p-component'\" [ngStyle]=\"style\" [class]=\"styleClass\">\r\n            <ul #navbar class=\"p-tabmenu-nav p-reset\" role=\"tablist\">\r\n                <li *ngFor=\"let item of model; let i = index\" role=\"tab\" [attr.aria-selected]=\"activeItem==item\" [attr.aria-expanded]=\"activeItem==item\"\r\n                    [ngClass]=\"{'p-tabmenuitem':true,'p-disabled':item.disabled,'p-highlight':activeItem==item,'p-hidden': item.visible === false}\">\r\n                    <a *ngIf=\"!item.routerLink\" [attr.href]=\"item.url\" class=\"p-menuitem-link\" role=\"presentation\" (click)=\"itemClick($event,item)\" [attr.tabindex]=\"item.disabled ? null : '0'\"\r\n                        [attr.target]=\"item.target\" [attr.title]=\"item.title\" [attr.id]=\"item.id\" pRipple>\r\n                        <ng-container *ngIf=\"!itemTemplate\">\r\n                            <span class=\"p-menuitem-icon\" [ngClass]=\"item.icon\" *ngIf=\"item.icon\"></span>\r\n                            <span class=\"p-menuitem-text\" *ngIf=\"item.escape !== false; else htmlLabel\">{{item.label}}</span>\r\n                            <ng-template #htmlLabel><span class=\"p-menuitem-text\" [innerHTML]=\"item.label\"></span></ng-template>\r\n                        </ng-container>\r\n                        <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: item, index: i}\"></ng-container>\r\n                    </a>\r\n                    <a *ngIf=\"item.routerLink\" [routerLink]=\"item.routerLink\" [queryParams]=\"item.queryParams\" [routerLinkActive]=\"'p-menuitem-link-active'\" [routerLinkActiveOptions]=\"item.routerLinkActiveOptions||{exact:false}\"\r\n                        role=\"presentation\" class=\"p-menuitem-link\" (click)=\"itemClick($event,item)\" [attr.tabindex]=\"item.disabled ? null : '0'\"\r\n                        [attr.target]=\"item.target\" [attr.title]=\"item.title\" [attr.id]=\"item.id\"\r\n                        [fragment]=\"item.fragment\" [queryParamsHandling]=\"item.queryParamsHandling\" [preserveFragment]=\"item.preserveFragment\" [skipLocationChange]=\"item.skipLocationChange\" [replaceUrl]=\"item.replaceUrl\" [state]=\"item.state\" pRipple>\r\n                        <ng-container *ngIf=\"!itemTemplate\">\r\n                            <span class=\"p-menuitem-icon\" [ngClass]=\"item.icon\" *ngIf=\"item.icon\"></span>\r\n                            <span class=\"p-menuitem-text\" *ngIf=\"item.escape !== false; else htmlRouteLabel\">{{item.label}}</span>\r\n                            <ng-template #htmlRouteLabel><span class=\"p-menuitem-text\" [innerHTML]=\"item.label\"></span></ng-template>\r\n                        </ng-container>\r\n                        <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: item, index: i}\"></ng-container>\r\n                    </a>\r\n                </li>\r\n                <li #inkbar class=\"p-tabmenu-ink-bar\"></li>\r\n            </ul>\r\n        </div>\r\n    `,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None,\r\n    styleUrls: ['./tabmenu.css']\r\n})\r\nexport class TabMenu implements AfterContentInit,AfterViewInit,AfterViewChecked {\r\n\r\n    @Input() model: MenuItem[];\r\n\r\n    @Input() activeItem: MenuItem;\r\n\r\n    @Input() popup: boolean;\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @ViewChild('navbar') navbar: ElementRef;\r\n\r\n    @ViewChild('inkbar') inkbar: ElementRef;\r\n\r\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\r\n\r\n    itemTemplate: TemplateRef<any>;\r\n\r\n    tabChanged: boolean;\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch(item.getType()) {\r\n                case 'item':\r\n                    this.itemTemplate = item.template;\r\n                break;\r\n                \r\n                default:\r\n                    this.itemTemplate = item.template;\r\n                break;\r\n            }\r\n        });\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.updateInkBar();\r\n    }\r\n\r\n    ngAfterViewChecked() {\r\n        if (this.tabChanged) {\r\n            this.updateInkBar();\r\n            this.tabChanged = false;\r\n        }\r\n    }\r\n\r\n    itemClick(event: Event, item: MenuItem)Â {\r\n        if (item.disabled) {\r\n            event.preventDefault();\r\n            return;\r\n        }\r\n\r\n        if (item.command) {\r\n            item.command({\r\n                originalEvent: event,\r\n                item: item\r\n            });\r\n        }\r\n\r\n        this.activeItem = item;\r\n        this.tabChanged = true;\r\n    }\r\n\r\n    updateInkBar() {\r\n        let tabHeader = DomHandler.findSingle(this.navbar.nativeElement, 'li.p-highlight');\r\n        if (tabHeader) {\r\n            this.inkbar.nativeElement.style.width = DomHandler.getWidth(tabHeader) + 'px';\r\n            this.inkbar.nativeElement.style.left = DomHandler.getOffset(tabHeader).left - DomHandler.getOffset(this.navbar.nativeElement).left + 'px';\r\n        }\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule,RouterModule,SharedModule,RippleModule],\r\n    exports: [TabMenu,RouterModule,SharedModule],\r\n    declarations: [TabMenu]\r\n})\r\nexport class TabMenuModule { }\r\n"]}