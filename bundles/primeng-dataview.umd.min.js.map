{"version":3,"sources":["../../src/app/components/dataview/dataview.ts"],"names":["DataView","el","cd","this","layout","pageLinks","paginatorPosition","alwaysShowPaginator","paginatorDropdownScrollHeight","currentPageReportTemplate","showPageLinks","emptyMessage","onLazyLoad","EventEmitter","trackBy","index","item","loadingIcon","first","onPage","onSort","onChangeLayout","prototype","ngOnInit","lazy","emit","createLazyLoadMetadata","initialized","ngOnChanges","simpleChanges","value","_value","currentValue","updateTotalRecords","hasFilter","filter","filterValue","sortField","sortOrder","sort","ngAfterContentInit","_this","templates","forEach","getType","listItemTemplate","template","gridItemTemplate","paginatorLeftTemplate","paginatorRightTemplate","headerTemplate","footerTemplate","updateItemTemplate","itemTemplate","changeLayout","markForCheck","totalRecords","length","paginate","event","rows","data1","data2","value1","ObjectUtils","resolveFieldData","value2","result","localeCompare","isEmpty","data","filteredValue","getBlockableElement","nativeElement","children","filterMatchMode","searchFields","filterBy","split","FilterUtils","filterLocale","paginator","trim","Component","args","selector","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ElementRef","ChangeDetectorRef","Input","Output","ContentChild","Header","Footer","ContentChildren","PrimeTemplate","DataViewLayoutOptions","dv","preventDefault","NgModule","imports","CommonModule","SharedModule","PaginatorModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,OnInit,AfterContentInit,Input,Output,EventEmitter,ContentChild,ContentChildren,QueryList,TemplateRef,OnChanges,SimpleChanges,ChangeDetectionStrategy,ChangeDetectorRef, ViewEncapsulation} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {ObjectUtils} from 'primeng/utils';\r\nimport {Header,Footer,PrimeTemplate,SharedModule} from 'primeng/api';\r\nimport {PaginatorModule} from 'primeng/paginator';\r\nimport {BlockableUI} from 'primeng/api';\r\nimport {FilterUtils} from 'primeng/utils';\r\n\r\n@Component({\r\n    selector: 'p-dataView',\r\n    template: `\r\n        <div [ngClass]=\"{'p-dataview p-component': true, 'p-dataview-list': (layout === 'list'), 'p-dataview-grid': (layout === 'grid')}\" [ngStyle]=\"style\" [class]=\"styleClass\">\r\n            <div class=\"p-dataview-loading\" *ngIf=\"loading\">\r\n                <div class=\"p-dataview-loading-overlay p-component-overlay\">\r\n                    <i [class]=\"'p-dataview-loading-icon pi-spin ' + loadingIcon\"></i>\r\n                </div>\r\n            </div>\r\n            <div class=\"p-dataview-header\" *ngIf=\"header || headerTemplate\">\r\n                <ng-content select=\"p-header\"></ng-content>\r\n                <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\r\n            </div>\r\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" [alwaysShow]=\"alwaysShowPaginator\"\r\n                (onPageChange)=\"paginate($event)\" styleClass=\"p-paginator-top\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\"\r\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\" [dropdownScrollHeight]=\"paginatorDropdownScrollHeight\" [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\"\r\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\r\n            <div class=\"p-dataview-content\">\r\n                <div class=\"p-grid p-nogutter\">\r\n                    <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"paginator ? ((filteredValue||value) | slice:(lazy ? 0 : first):((lazy ? 0 : first) + rows)) : (filteredValue||value)\" [ngForTrackBy]=\"trackBy\">\r\n                        <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: rowData, rowIndex: rowIndex}\"></ng-container>\r\n                    </ng-template>\r\n                    <div *ngIf=\"isEmpty()\" class=\"p-col\">\r\n                        <div class=\"p-dataview-emptymessage\">{{emptyMessage}}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" [alwaysShow]=\"alwaysShowPaginator\"\r\n                (onPageChange)=\"paginate($event)\" styleClass=\"p-paginator-bottom\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\"\r\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\" [dropdownScrollHeight]=\"paginatorDropdownScrollHeight\" [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\"\r\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\r\n            <div class=\"p-dataview-footer\" *ngIf=\"footer || footerTemplate\">\r\n                <ng-content select=\"p-footer\"></ng-content>\r\n                <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\r\n            </div>\r\n        </div>\r\n    `,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None,\r\n    styleUrls: ['./dataview.css']\r\n})\r\nexport class DataView implements OnInit,AfterContentInit,BlockableUI,OnChanges {\r\n\r\n    @Input() layout: string = 'list';\r\n\r\n    @Input() paginator: boolean;\r\n\r\n    @Input() rows: number;\r\n\r\n    @Input() totalRecords: number;\r\n\r\n    @Input() pageLinks: number = 5;\r\n\r\n    @Input() rowsPerPageOptions: any[];\r\n\r\n    @Input() paginatorPosition: string = 'bottom';\r\n\r\n    @Input() alwaysShowPaginator: boolean = true;\r\n\r\n    @Input() paginatorDropdownAppendTo: any;\r\n\r\n    @Input() paginatorDropdownScrollHeight: string = '200px';\r\n\r\n    @Input() currentPageReportTemplate: string = '{currentPage} of {totalPages}';\r\n\r\n    @Input() showCurrentPageReport: boolean;\r\n\r\n    @Input() showJumpToPageDropdown: boolean;\r\n\r\n    @Input() showPageLinks: boolean = true;\r\n\r\n    @Input() lazy: boolean;\r\n\r\n    @Input() emptyMessage: string = 'No records found';\r\n\r\n    @Output() onLazyLoad: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() trackBy: Function = (index: number, item: any) => item;\r\n\r\n    @Input() filterBy: string;\r\n\r\n    @Input() filterLocale: string;\r\n\r\n    @Input() loading: boolean;\r\n\r\n    @Input() loadingIcon: string = 'pi pi-spinner';\r\n\r\n    @Input() first: number = 0;\r\n\r\n    @Input() sortField: string;\r\n\r\n    @Input() sortOrder: number;\r\n\r\n    @Input() value: any[];\r\n\r\n    @Output() onPage: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onSort: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onChangeLayout: EventEmitter<any> = new EventEmitter();\r\n\r\n    @ContentChild(Header) header;\r\n\r\n    @ContentChild(Footer) footer;\r\n\r\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\r\n\r\n    _value: any[];\r\n\r\n    listItemTemplate: TemplateRef<any>;\r\n\r\n    gridItemTemplate: TemplateRef<any>;\r\n\r\n    itemTemplate: TemplateRef<any>;\r\n\r\n    headerTemplate: TemplateRef<any>;\r\n\r\n    footerTemplate: TemplateRef<any>;\r\n\r\n    paginatorLeftTemplate: TemplateRef<any>;\r\n\r\n    paginatorRightTemplate: TemplateRef<any>;\r\n\r\n    filteredValue: any[];\r\n\r\n    filterValue: string;\r\n\r\n    initialized: boolean;\r\n\r\n    constructor(public el: ElementRef, public cd: ChangeDetectorRef) {}\r\n\r\n    ngOnInit() {\r\n        if (this.lazy) {\r\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n        }\r\n        this.initialized = true;\r\n    }\r\n\r\n    ngOnChanges(simpleChanges: SimpleChanges) {\r\n        if (simpleChanges.value) {\r\n            this._value = simpleChanges.value.currentValue;\r\n            this.updateTotalRecords();\r\n\r\n            if (!this.lazy && this.hasFilter()) {\r\n                this.filter(this.filterValue);\r\n            }\r\n        }\r\n\r\n        if (simpleChanges.sortField || simpleChanges.sortOrder) {\r\n            //avoid triggering lazy load prior to lazy initialization at onInit\r\n            if (!this.lazy || this.initialized) {\r\n                this.sort();\r\n            }\r\n        }\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch(item.getType()) {\r\n                case 'listItem':\r\n                    this.listItemTemplate = item.template;\r\n                break;\r\n\r\n                case 'gridItem':\r\n                    this.gridItemTemplate = item.template;\r\n                break;\r\n\r\n                case 'paginatorleft':\r\n                    this.paginatorLeftTemplate = item.template;\r\n                break;\r\n\r\n                case 'paginatorright':\r\n                    this.paginatorRightTemplate = item.template;\r\n                break;\r\n\r\n                case 'header':\r\n                    this.headerTemplate = item.template;\r\n                break;\r\n\r\n                case 'footer':\r\n                    this.footerTemplate = item.template;\r\n                break;\r\n            }\r\n        });\r\n\r\n        this.updateItemTemplate();\r\n    }\r\n\r\n    updateItemTemplate() {\r\n        switch(this.layout) {\r\n            case 'list':\r\n                this.itemTemplate = this.listItemTemplate;\r\n            break;\r\n\r\n            case 'grid':\r\n                this.itemTemplate = this.gridItemTemplate;\r\n            break;\r\n        }\r\n    }\r\n\r\n    changeLayout(layout: string) {\r\n        this.layout = layout;\r\n        this.onChangeLayout.emit({\r\n            layout: this.layout\r\n        });\r\n        this.updateItemTemplate();\r\n\r\n        this.cd.markForCheck();\r\n    }\r\n\r\n    updateTotalRecords() {\r\n        this.totalRecords = this.lazy ? this.totalRecords : (this._value ? this._value.length : 0);\r\n    }\r\n\r\n    paginate(event) {\r\n        this.first = event.first;\r\n        this.rows = event.rows;\r\n\r\n        if (this.lazy) {\r\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n        }\r\n\r\n        this.onPage.emit({\r\n            first: this.first,\r\n            rows: this.rows\r\n        });\r\n    }\r\n\r\n    sort() {\r\n        this.first = 0;\r\n\r\n        if (this.lazy) {\r\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n        }\r\n        else if (this.value) {\r\n            this.value.sort((data1, data2) => {\r\n                let value1 = ObjectUtils.resolveFieldData(data1, this.sortField);\r\n                let value2 = ObjectUtils.resolveFieldData(data2, this.sortField);\r\n                let result = null;\r\n\r\n                if (value1 == null && value2 != null)\r\n                    result = -1;\r\n                else if (value1 != null && value2 == null)\r\n                    result = 1;\r\n                else if (value1 == null && value2 == null)\r\n                    result = 0;\r\n                else if (typeof value1 === 'string' && typeof value2 === 'string')\r\n                    result = value1.localeCompare(value2);\r\n                else\r\n                    result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\r\n\r\n                return (this.sortOrder * result);\r\n            });\r\n\r\n            if (this.hasFilter()) {\r\n                this.filter(this.filterValue);\r\n            }\r\n        }\r\n\r\n        this.onSort.emit({\r\n            sortField: this.sortField,\r\n            sortOrder: this.sortOrder\r\n        });\r\n    }\r\n\r\n    isEmpty() {\r\n        let data = this.filteredValue||this.value;\r\n        return data == null || data.length == 0;\r\n    }\r\n\r\n    createLazyLoadMetadata(): any {\r\n        return {\r\n            first: this.first,\r\n            rows: this.rows,\r\n            sortField: this.sortField,\r\n            sortOrder: this.sortOrder\r\n        };\r\n    }\r\n\r\n    getBlockableElement(): HTMLElement {\r\n        return this.el.nativeElement.children[0];\r\n    }\r\n\r\n    filter(filter: string, filterMatchMode:string =\"contains\") {\r\n        this.filterValue = filter;\r\n\r\n        if (this.value && this.value.length) {\r\n            let searchFields = this.filterBy.split(',');\r\n            this.filteredValue = FilterUtils.filter(this.value, searchFields, filter, filterMatchMode, this.filterLocale);\r\n\r\n            if (this.filteredValue.length === this.value.length ) {\r\n                this.filteredValue = null;\r\n            }\r\n\r\n            if (this.paginator) {\r\n                this.first = 0;\r\n                this.totalRecords = this.filteredValue ? this.filteredValue.length : this.value ? this.value.length : 0;\r\n            }\r\n\r\n            this.cd.markForCheck();\r\n        }\r\n    }\r\n\r\n    hasFilter() {\r\n        return this.filterValue && this.filterValue.trim().length > 0;\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-dataViewLayoutOptions',\r\n    template: `\r\n        <div [ngClass]=\"'p-dataview-layout-options p-selectbutton p-buttonset'\" [ngStyle]=\"style\" [class]=\"styleClass\">\r\n            <button type=\"button\" class=\"p-button p-button-icon-only\" [ngClass]=\"{'p-highlight': dv.layout === 'list'}\" (click)=\"changeLayout($event, 'list')\" (keydown.enter)=\"changeLayout($event, 'list')\">\r\n                <i class=\"pi pi-bars\"></i>\r\n            </button><button type=\"button\" class=\"p-button p-button-icon-only\" [ngClass]=\"{'p-highlight': dv.layout === 'grid'}\" (click)=\"changeLayout($event, 'grid')\" (keydown.enter)=\"changeLayout($event, 'grid')\">\r\n                <i class=\"pi pi-th-large\"></i>\r\n            </button>\r\n        </div>\r\n    `,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class DataViewLayoutOptions  {\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    constructor(public dv: DataView) {}\r\n\r\n    changeLayout(event: Event, layout: string) {\r\n        this.dv.changeLayout(layout);\r\n        event.preventDefault();\r\n    }\r\n}\r\n@NgModule({\r\n    imports: [CommonModule,SharedModule,PaginatorModule],\r\n    exports: [DataView,SharedModule,DataViewLayoutOptions],\r\n    declarations: [DataView,DataViewLayoutOptions]\r\n})\r\nexport class DataViewModule { }\r\n"]}