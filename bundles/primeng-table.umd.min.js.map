{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","../../src/app/components/table/table.ts"],"names":["Object","create","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","TableService","this","sortSource","Subject","selectionSource","contextMenuSource","valueSource","totalRecordsSource","columnsSource","sortSource$","asObservable","selectionSource$","contextMenuSource$","valueSource$","totalRecordsSource$","columnsSource$","prototype","onSort","sortMeta","onSelectionChange","onContextMenu","data","onValueChange","onTotalRecordsChange","onColumnsChange","columns","Injectable","Table","el","zone","tableService","cd","pageLinks","alwaysShowPaginator","paginatorPosition","paginatorDropdownScrollHeight","currentPageReportTemplate","showPageLinks","defaultSortOrder","sortMode","resetPageOnSort","selectionChange","EventEmitter","contextMenuSelectionChange","contextMenuSelectionMode","rowTrackBy","index","item","lazy","lazyLoadOnInit","compareSelectionBy","csvSeparator","exportFilename","filters","filterDelay","expandedRowKeys","editingRowKeys","rowExpandMode","virtualScrollDelay","virtualRowHeight","columnResizeMode","loadingIcon","showLoader","stateStorage","editMode","onRowSelect","onRowUnselect","onPage","onFilter","onLazyLoad","onRowExpand","onRowCollapse","onContextMenuSelect","onColResize","onColReorder","onRowReorder","onEditInit","onEditComplete","onEditCancel","onHeaderCheckboxToggle","sortFunction","firstChange","rowsChange","onStateSave","onStateRestore","_value","_totalRecords","_first","selectionKeys","_sortOrder","ngOnInit","virtualScroll","emit","createLazyLoadMetadata","restoringFilter","initialized","ngAfterContentInit","_this","templates","forEach","getType","captionTemplate","template","headerTemplate","bodyTemplate","loadingBodyTemplate","footerTemplate","summaryTemplate","colGroupTemplate","expandedRowTemplate","frozenRowsTemplate","frozenHeaderTemplate","frozenBodyTemplate","frozenFooterTemplate","frozenColGroupTemplate","emptyMessageTemplate","paginatorLeftTemplate","paginatorRightTemplate","ngAfterViewInit","isStateful","resizableColumns","restoreColumnWidths","clearCache","scrollable","scrollableViewChild","scrollableFrozenViewChild","ngOnChanges","simpleChange","stateRestored","restoreState","currentValue","totalRecords","sortField","sortSingle","multiSortMeta","sortMultiple","hasFilter","_filter","_columns","reorderableColumns","columnOrderStateRestored","restoreColumnOrder","_sortField","sortOrder","_multiSortMeta","selection","_selection","preventSelectionSetterPropagation","updateSelectionKeys","defineProperty","val","cols","_rows","dataKey","Array","isArray","_b","_c","String","ObjectUtils","resolveFieldData","onPageChange","event","first","rows","saveState","anchorRowIndex","resetScrollTop","sort","originalEvent","field","metaKey","ctrlKey","getSortMeta","order","restoringSort","customSort","mode","data1","data2","value1","value2","result","localeCompare","multisortField","multisortmeta","isSorted","sorted","handleRowClick","target","targetNode","nodeName","parentNode","parentElement","DomHandler","hasClass","selectionMode","isMultipleSelectionMode","shiftKey","clearSelection","rangeRowIndex","clearSelectionRange","rowIndex","selectRange","rowData","selected","isSelected","metaSelection","rowTouched","metaKeySelection","dataKeyValue","isSingleSelectionMode","selectionIndex_1","findIndexInSelection","filter","type","selectionIndex_2","handleRowTouchEnd","handleRowRightClick","contextMenu","contextMenuSelection","show","rangeStart","rangeEnd","paginator","rangeRowData","filteredValue","this_1","selectionIndex","undefined","equals","toggleRowWithRadio","toggleRowWithCheckbox","selectionIndex_3","toggleRowsWithCheckbox","check","slice","checked","matchMode","filterTimeout","clearTimeout","isFilterBlank","setTimeout","filterGlobal","trim","resetScroll","globalFilterFieldsArray","globalFilterFields","Error","localMatch","globalMatch","localFiltered","prop","hasOwnProperty","filterMeta","filterField","filterValue","filterMatchMode","dataFieldValue","filterConstraint","FilterUtils","filterLocale","j","globalFilterField","markForCheck","empty","globalFilter","clear","reset","console","warn","exportCSV","options","csv","frozenColumns","selectionOnly","frozenValue","column","exportable","header","record","i_1","cellData","exportFunction","replace","blob","Blob","window","navigator","msSaveOrOpenBlob","link","document","createElement","style","display","body","appendChild","download","setAttribute","URL","createObjectURL","click","open","encodeURI","removeChild","scrollToVirtualIndex","scrollTo","top","updateEditingCell","cell","editingCell","editingCellData","editingCellField","editingCellRowIndex","bindDocumentEditListener","isEditingCellValid","find","documentEditListener","editingCellClick","removeClass","unbindDocumentEditListener","addEventListener","removeEventListener","initRowEdit","saveRowEdit","rowElement","cancelRowEdit","toggleRow","preventDefault","isRowExpanded","isRowEditing","onColumnResizeBegin","containerLeft","getOffset","containerViewChild","nativeElement","left","lastResizerHelperX","pageX","scrollLeft","onColumnResize","addClass","resizeHelperViewChild","height","offsetHeight","onColumnResizeEnd","delta","offsetLeft","columnWidth","offsetWidth","minWidth","parseInt","newColumnWidth","nextColumn","nextElementSibling","offsetParent","nextColumnWidth","nextColumnMinWidth","scrollableView","findParentScrollableView","scrollableBodyTable","findSingle","scrollableHeaderTable","scrollableFooterTable","resizeColumnIndex","resizeColGroup","width","setScrollableItemsWidthOnExpandResize","tableViewChild","containerWidth","element","scrollableBody","scrollableHeader","scrollableFooter","scrollableBodyTableWidth","scrollableHeaderTableWidth","isContainerInViewport","setWidth","container","table","calculateScrollbarWidth","parent","colGroup","children","col","nextCol","onColumnDragStart","columnElement","reorderIconWidth","getHiddenElementOuterWidth","reorderIndicatorUpViewChild","reorderIconHeight","getHiddenElementOuterHeight","reorderIndicatorDownViewChild","draggedColumn","dataTransfer","setData","onColumnDragEnter","dropHeader","containerOffset","dropHeaderOffset","dragIndex","indexWithinGroup","dropIndex","targetLeft","columnCenter","Math","ceil","dropPosition","dropEffect","onColumnDragLeave","onColumnDrop","dropColumn","allowDrop","reorderArray","runOutsideAngular","draggable","onRowDragStart","rowDragging","draggedRowIndex","onRowDragOver","rowY","getWindowScrollTop","pageY","rowMidY","getOuterHeight","prevRowElement","previousElementSibling","droppedRowIndex","onRowDragLeave","onRowDragEnd","onRowDrop","isEmpty","getBlockableElement","getStorage","localStorage","sessionStorage","stateKey","storage","state","saveColumnWidths","saveColumnOrder","keys","setItem","JSON","stringify","clearState","removeItem","stateString","getItem","state_1","parse","columnWidthsState","columnWidths","tableWidthState","tableWidth","Promise","resolve","then","widths","map","getOuterWidth","join","widths_1","split","headerCols","bodyCols","columnOrder_1","key","columnOrder","reorderedColumns_1","findColumnByKey","ngOnDestroy","Component","args","selector","providers","changeDetection","ChangeDetectionStrategy","Default","encapsulation","ViewEncapsulation","None","ElementRef","NgZone","ChangeDetectorRef","Input","Output","ViewChild","ContentChildren","PrimeTemplate","TableBody","dt","subscription","subscribe","detectChanges","unsubscribe","ScrollableView","loadedPages","_scrollHeight","includes","log","virtualScrollBody","checkViewportSize","frozen","scrollableAlignerViewChild","calculateScrollbarHeight","frozenView","frozenSiblingBody","scrollBarWidth","scrollHeaderBoxViewChild","paddingRight","scrollFooterBoxViewChild","bindEvents","scrollHeaderViewChild","headerScrollListener","onHeaderScroll","bind","scrollFooterViewChild","footerScrollListener","onFooterScroll","bodyScrollListener","onBodyScroll","getElementRef","scrollBodyViewChild","unbindEvents","preventBodyScrollPropagation","marginLeft","scrollTop","onScrollIndexChange","createPageRange","floor","page","loadPage","range","getPageCount","dataToRender","dataLength","scrollToIndex","CdkVirtualScrollViewport","SortableColumn","isEnabled","updateSortState","onClick","onEnterKey","pSortableColumnDisabled","Directive","host","[class.p-sortable-column]","[class.p-highlight]","[attr.tabindex]","[attr.role]","[attr.aria-sort]","HostListener","SortIcon","OnPush","SelectableRow","onTouchEnd","onArrowDownKeyDown","row","currentTarget","nextRow","findNextSelectableRow","focus","onArrowUpKeyDown","prevRow","findPrevSelectableRow","onEnterKeyDown","pSelectableRowDisabled","[class.p-selectable-row]","SelectableRowDblClick","ContextMenuRow","pContextMenuRowDisabled","[class.p-highlight-contextmenu]","RowToggler","pRowTogglerDisabled","ResizableColumn","resizer","className","resizerMouseDownListener","onMouseDown","bindDocumentEvents","documentMouseMoveListener","onDocumentMouseMove","documentMouseUpListener","onDocumentMouseUp","unbindDocumentEvents","which","pResizableColumnDisabled","ReorderableColumn","mouseDownListener","dragStartListener","onDragStart","dragOverListener","onDragEnter","dragEnterListener","dragLeaveListener","onDragLeave","onDragOver","onDrop","pReorderableColumnDisabled","EditableColumn","closeEditingCell","openCell","focusCellSelector","pFocusCellSelector","focusableElement","completed","onEscapeKeyDown","onShiftKeyDown","moveToPreviousCell","moveToNextCell","findCell","currentCell","targetCell","findPreviousEditableColumn","invokeElementMethod","findNextEditableColumn","prevCell","previousRow","lastElementChild","nextCell","firstElementChild","pEditableColumnDisabled","EditableRow","pEditableRowDisabled","InitEditableRow","editableRow","SaveEditableRow","CancelEditableRow","CellEditor","editableColumn","inputTemplate","outputTemplate","decorators","Optional","TableRadioButton","disabled","onFocus","boxViewChild","onBlur","TableCheckbox","TableHeaderCheckbox","valueChangeSubscription","updateCheckedState","selectionChangeSubscription","isDisabled","isAllFilteredValuesChecked","ReorderableRowHandle","ReorderableRow","droppable","dragEndListener","onDragEnd","pReorderableRowDisabled","NgModule","imports","CommonModule","PaginatorModule","ScrollingModule","exports","SharedModule","declarations"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { NgModule, Component, HostListener, OnInit, OnDestroy, AfterViewInit, Directive, Optional, AfterContentInit,\r\n    Input, Output, EventEmitter, ElementRef, ContentChildren, TemplateRef, QueryList, ViewChild, NgZone, ChangeDetectorRef, OnChanges, SimpleChanges, ChangeDetectionStrategy, Query, ViewEncapsulation} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\r\nimport { PaginatorModule } from 'primeng/paginator';\r\nimport { DomHandler } from 'primeng/dom';\r\nimport { ObjectUtils } from 'primeng/utils';\r\nimport { SortMeta } from 'primeng/api';\r\nimport { TableState } from 'primeng/api';\r\nimport { FilterMetadata } from 'primeng/api';\r\nimport { Injectable } from '@angular/core';\r\nimport { BlockableUI } from 'primeng/api';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { FilterUtils } from 'primeng/utils';\r\nimport { ScrollingModule, CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\r\n\r\n@Injectable()\r\nexport class TableService {\r\n\r\n    private sortSource = new Subject<SortMeta|SortMeta[]>();\r\n    private selectionSource = new Subject();\r\n    private contextMenuSource = new Subject<any>();\r\n    private valueSource = new Subject<any>();\r\n    private totalRecordsSource = new Subject<any>();\r\n    private columnsSource = new Subject();\r\n\r\n    sortSource$ = this.sortSource.asObservable();\r\n    selectionSource$ = this.selectionSource.asObservable();\r\n    contextMenuSource$ = this.contextMenuSource.asObservable();\r\n    valueSource$ = this.valueSource.asObservable();\r\n    totalRecordsSource$ = this.totalRecordsSource.asObservable();\r\n    columnsSource$ = this.columnsSource.asObservable();\r\n\r\n    onSort(sortMeta: SortMeta|SortMeta[]) {\r\n        this.sortSource.next(sortMeta);\r\n    }\r\n\r\n    onSelectionChange() {\r\n        this.selectionSource.next();\r\n    }\r\n\r\n    onContextMenu(data: any) {\r\n        this.contextMenuSource.next(data);\r\n    }\r\n\r\n    onValueChange(value: any) {\r\n        this.valueSource.next(value);\r\n    }\r\n\r\n    onTotalRecordsChange(value: number) {\r\n        this.totalRecordsSource.next(value);\r\n    }\r\n\r\n    onColumnsChange(columns: any[]) {\r\n        this.columnsSource.next(columns);\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-table',\r\n    template: `\r\n        <div #container [ngStyle]=\"style\" [class]=\"styleClass\" data-scrollselectors=\".p-datatable-scrollable-body, .p-datatable-unfrozen-view .p-datatable-scrollable-body\"\r\n            [ngClass]=\"{'p-datatable p-component': true,\r\n                'p-datatable-hoverable-rows': (rowHover||selectionMode),\r\n                'p-datatable-auto-layout': autoLayout,\r\n                'p-datatable-resizable': resizableColumns,\r\n                'p-datatable-resizable-fit': (resizableColumns && columnResizeMode === 'fit'),\r\n                'p-datatable-scrollable': scrollable,\r\n                'p-datatable-flex-scrollable': (scrollable && scrollHeight === 'flex'),\r\n                'p-datatable-responsive': responsive}\">\r\n            <div class=\"p-datatable-loading-overlay p-component-overlay\" *ngIf=\"loading && showLoader\">\r\n                <i [class]=\"'p-datatable-loading-icon pi-spin ' + loadingIcon\"></i>\r\n            </div>\r\n            <div *ngIf=\"captionTemplate\" class=\"p-datatable-header\">\r\n                <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\r\n            </div>\r\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"p-paginator-top\" [alwaysShow]=\"alwaysShowPaginator\"\r\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\"\r\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\" [dropdownScrollHeight]=\"paginatorDropdownScrollHeight\"\r\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\r\n\r\n            <div class=\"p-datatable-wrapper\" *ngIf=\"!scrollable\">\r\n                <table role=\"grid\" #table [ngClass]=\"tableStyleClass\" [ngStyle]=\"tableStyle\">\r\n                    <ng-container *ngTemplateOutlet=\"colGroupTemplate; context {$implicit: columns}\"></ng-container>\r\n                    <thead class=\"p-datatable-thead\">\r\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\r\n                    </thead>\r\n                    <tbody class=\"p-datatable-tbody\" [pTableBody]=\"columns\" [pTableBodyTemplate]=\"bodyTemplate\"></tbody>\r\n                    <tfoot *ngIf=\"footerTemplate\" class=\"p-datatable-tfoot\">\r\n                        <ng-container *ngTemplateOutlet=\"footerTemplate; context {$implicit: columns}\"></ng-container>\r\n                    </tfoot>\r\n                </table>\r\n            </div>\r\n\r\n            <div class=\"p-datatable-scrollable-wrapper\" *ngIf=\"scrollable\">\r\n               <div class=\"p-datatable-scrollable-view p-datatable-frozen-view\" *ngIf=\"frozenColumns||frozenBodyTemplate\" #scrollableFrozenView [pScrollableView]=\"frozenColumns\" [frozen]=\"true\" [ngStyle]=\"{width: frozenWidth}\" [scrollHeight]=\"scrollHeight\"></div>\r\n               <div class=\"p-datatable-scrollable-view\" #scrollableView [pScrollableView]=\"columns\" [frozen]=\"false\" [scrollHeight]=\"scrollHeight\" [ngStyle]=\"{left: frozenWidth, width: 'calc(100% - '+frozenWidth+')'}\"></div>\r\n            </div>\r\n\r\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" styleClass=\"p-paginator-bottom\" [alwaysShow]=\"alwaysShowPaginator\"\r\n                (onPageChange)=\"onPageChange($event)\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\"\r\n                [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\" [dropdownAppendTo]=\"paginatorDropdownAppendTo\" [dropdownScrollHeight]=\"paginatorDropdownScrollHeight\"\r\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\r\n\r\n            <div *ngIf=\"summaryTemplate\" class=\"p-datatable-footer\">\r\n                <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\r\n            </div>\r\n\r\n            <div #resizeHelper class=\"p-column-resizer-helper\" style=\"display:none\" *ngIf=\"resizableColumns\"></div>\r\n            <span #reorderIndicatorUp class=\"pi pi-arrow-down p-datatable-reorder-indicator-up\" style=\"display:none\" *ngIf=\"reorderableColumns\"></span>\r\n            <span #reorderIndicatorDown class=\"pi pi-arrow-up p-datatable-reorder-indicator-down\" style=\"display:none\" *ngIf=\"reorderableColumns\"></span>\r\n        </div>\r\n    `,\r\n    providers: [TableService],\r\n    changeDetection: ChangeDetectionStrategy.Default,\r\n    encapsulation: ViewEncapsulation.None,\r\n    styleUrls: ['./table.css']\r\n})\r\nexport class Table implements OnInit, AfterViewInit, AfterContentInit, BlockableUI, OnChanges {\r\n\r\n    @Input() frozenColumns: any[];\r\n\r\n    @Input() frozenValue: any[];\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() tableStyle: any;\r\n\r\n    @Input() tableStyleClass: string;\r\n\r\n    @Input() paginator: boolean;\r\n\r\n    @Input() pageLinks: number = 5;\r\n\r\n    @Input() rowsPerPageOptions: any[];\r\n\r\n    @Input() alwaysShowPaginator: boolean = true;\r\n\r\n    @Input() paginatorPosition: string = 'bottom';\r\n\r\n    @Input() paginatorDropdownAppendTo: any;\r\n\r\n    @Input() paginatorDropdownScrollHeight: string = '200px';\r\n\r\n    @Input() currentPageReportTemplate: string = '{currentPage} of {totalPages}';\r\n\r\n    @Input() showCurrentPageReport: boolean;\r\n\r\n    @Input() showJumpToPageDropdown: boolean;\r\n\r\n    @Input() showPageLinks: boolean = true;\r\n\r\n    @Input() defaultSortOrder: number = 1;\r\n\r\n    @Input() sortMode: string = 'single';\r\n\r\n    @Input() resetPageOnSort: boolean = true;\r\n\r\n    @Input() selectionMode: string;\r\n\r\n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Input() contextMenuSelection: any;\r\n\r\n    @Output() contextMenuSelectionChange: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Input() contextMenuSelectionMode: string = \"separate\";\r\n\r\n    @Input() dataKey: string;\r\n\r\n    @Input() metaKeySelection: boolean;\r\n\r\n    @Input() rowTrackBy: Function = (index: number, item: any) => item;\r\n\r\n    @Input() lazy: boolean = false;\r\n\r\n    @Input() lazyLoadOnInit: boolean = true;\r\n\r\n    @Input() compareSelectionBy: string = 'deepEquals';\r\n\r\n    @Input() csvSeparator: string = ',';\r\n\r\n    @Input() exportFilename: string = 'download';\r\n\r\n    @Input() filters: { [s: string]: FilterMetadata; } = {};\r\n\r\n    @Input() globalFilterFields: string[];\r\n\r\n    @Input() filterDelay: number = 300;\r\n\r\n    @Input() filterLocale: string;\r\n\r\n    @Input() expandedRowKeys: { [s: string]: boolean; } = {};\r\n\r\n    @Input() editingRowKeys: { [s: string]: boolean; } = {};\r\n\r\n    @Input() rowExpandMode: string = 'multiple';\r\n\r\n    @Input() scrollable: boolean;\r\n\r\n    @Input() scrollHeight: string;\r\n\r\n    @Input() virtualScroll: boolean;\r\n\r\n    @Input() virtualScrollDelay: number = 150;\r\n\r\n    @Input() virtualRowHeight: number = 28;\r\n\r\n    @Input() frozenWidth: string;\r\n\r\n    @Input() responsive: boolean;\r\n\r\n    @Input() contextMenu: any;\r\n\r\n    @Input() resizableColumns: boolean;\r\n\r\n    @Input() columnResizeMode: string = 'fit';\r\n\r\n    @Input() reorderableColumns: boolean;\r\n\r\n    @Input() loading: boolean;\r\n\r\n    @Input() loadingIcon: string = 'pi pi-spinner';\r\n\r\n    @Input() showLoader: boolean = true;\r\n\r\n    @Input() rowHover: boolean;\r\n\r\n    @Input() customSort: boolean;\r\n\r\n    @Input() autoLayout: boolean;\r\n\r\n    @Input() exportFunction;\r\n\r\n    @Input() stateKey: string;\r\n\r\n    @Input() stateStorage: string = 'session';\r\n\r\n    @Input() editMode: string = 'cell';\r\n\r\n    @Input() minBufferPx: number;\r\n\r\n    @Input() maxBufferPx: number;\r\n\r\n    @Output() onRowSelect: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onRowUnselect: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onPage: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onSort: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onFilter: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onLazyLoad: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onRowExpand: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onRowCollapse: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onContextMenuSelect: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onColResize: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onColReorder: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onRowReorder: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onEditInit: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onEditComplete: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onEditCancel: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onHeaderCheckboxToggle: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() sortFunction: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() firstChange: EventEmitter<number> = new EventEmitter();\r\n\r\n    @Output() rowsChange: EventEmitter<number> = new EventEmitter();\r\n\r\n    @Output() onStateSave: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onStateRestore: EventEmitter<any> = new EventEmitter();\r\n\r\n    @ViewChild('container') containerViewChild: ElementRef;\r\n\r\n    @ViewChild('resizeHelper') resizeHelperViewChild: ElementRef;\r\n\r\n    @ViewChild('reorderIndicatorUp') reorderIndicatorUpViewChild: ElementRef;\r\n\r\n    @ViewChild('reorderIndicatorDown') reorderIndicatorDownViewChild: ElementRef;\r\n\r\n    @ViewChild('table') tableViewChild: ElementRef;\r\n\r\n    @ViewChild('scrollableView') scrollableViewChild;\r\n\r\n    @ViewChild('scrollableFrozenView') scrollableFrozenViewChild;\r\n\r\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\r\n\r\n    _value: any[] = [];\r\n\r\n    _columns: any[];\r\n\r\n    _totalRecords: number = 0;\r\n\r\n    _first: number = 0;\r\n\r\n    _rows: number;\r\n\r\n    filteredValue: any[];\r\n\r\n    headerTemplate: TemplateRef<any>;\r\n\r\n    bodyTemplate: TemplateRef<any>;\r\n\r\n    loadingBodyTemplate: TemplateRef<any>;\r\n\r\n    captionTemplate: TemplateRef<any>;\r\n\r\n    frozenRowsTemplate: TemplateRef<any>;\r\n\r\n    footerTemplate: TemplateRef<any>;\r\n\r\n    summaryTemplate: TemplateRef<any>;\r\n\r\n    colGroupTemplate: TemplateRef<any>;\r\n\r\n    expandedRowTemplate: TemplateRef<any>;\r\n\r\n    frozenHeaderTemplate: TemplateRef<any>;\r\n\r\n    frozenBodyTemplate: TemplateRef<any>;\r\n\r\n    frozenFooterTemplate: TemplateRef<any>;\r\n\r\n    frozenColGroupTemplate: TemplateRef<any>;\r\n\r\n    emptyMessageTemplate: TemplateRef<any>;\r\n\r\n    paginatorLeftTemplate: TemplateRef<any>;\r\n\r\n    paginatorRightTemplate: TemplateRef<any>;\r\n\r\n    selectionKeys: any = {};\r\n\r\n    lastResizerHelperX: number;\r\n\r\n    reorderIconWidth: number;\r\n\r\n    reorderIconHeight: number;\r\n\r\n    draggedColumn: any;\r\n\r\n    draggedRowIndex: number;\r\n\r\n    droppedRowIndex: number;\r\n\r\n    rowDragging: boolean;\r\n\r\n    dropPosition: number;\r\n\r\n    editingCell: Element;\r\n\r\n    editingCellData: any;\r\n\r\n    editingCellField: any;\r\n\r\n    editingCellRowIndex: number;\r\n\r\n    editingCellClick: boolean;\r\n\r\n    documentEditListener: any;\r\n\r\n    _multiSortMeta: SortMeta[];\r\n\r\n    _sortField: string;\r\n\r\n    _sortOrder: number = 1;\r\n\r\n    preventSelectionSetterPropagation: boolean;\r\n\r\n    _selection: any;\r\n\r\n    anchorRowIndex: number;\r\n\r\n    rangeRowIndex: number;\r\n\r\n    filterTimeout: any;\r\n\r\n    initialized: boolean;\r\n\r\n    rowTouched: boolean;\r\n\r\n    restoringSort: boolean;\r\n\r\n    restoringFilter: boolean;\r\n\r\n    stateRestored: boolean;\r\n\r\n    columnOrderStateRestored: boolean;\r\n\r\n    columnWidthsState: string;\r\n\r\n    tableWidthState: string;\r\n\r\n    constructor(public el: ElementRef, public zone: NgZone, public tableService: TableService, public cd: ChangeDetectorRef) {}\r\n\r\n    ngOnInit() {\r\n        if (this.lazy && this.lazyLoadOnInit) {\r\n            if (!this.virtualScroll) {\r\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n            }\r\n\r\n            if (this.restoringFilter) {\r\n                this.restoringFilter = false;\r\n            }\r\n        }\r\n\r\n        this.initialized = true;\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch (item.getType()) {\r\n                case 'caption':\r\n                    this.captionTemplate = item.template;\r\n                break;\r\n\r\n                case 'header':\r\n                    this.headerTemplate = item.template;\r\n                break;\r\n\r\n                case 'body':\r\n                    this.bodyTemplate = item.template;\r\n                break;\r\n\r\n                case 'loadingbody':\r\n                    this.loadingBodyTemplate = item.template;\r\n                break;\r\n\r\n                case 'footer':\r\n                    this.footerTemplate = item.template;\r\n                break;\r\n\r\n                case 'summary':\r\n                    this.summaryTemplate = item.template;\r\n                break;\r\n\r\n                case 'colgroup':\r\n                    this.colGroupTemplate = item.template;\r\n                break;\r\n\r\n                case 'rowexpansion':\r\n                    this.expandedRowTemplate = item.template;\r\n                break;\r\n\r\n                case 'frozenrows':\r\n                    this.frozenRowsTemplate = item.template;\r\n                break;\r\n\r\n                case 'frozenheader':\r\n                    this.frozenHeaderTemplate = item.template;\r\n                break;\r\n\r\n                case 'frozenbody':\r\n                    this.frozenBodyTemplate = item.template;\r\n                break;\r\n\r\n                case 'frozenfooter':\r\n                    this.frozenFooterTemplate = item.template;\r\n                break;\r\n\r\n                case 'frozencolgroup':\r\n                    this.frozenColGroupTemplate = item.template;\r\n                break;\r\n\r\n                case 'emptymessage':\r\n                    this.emptyMessageTemplate = item.template;\r\n                break;\r\n\r\n                case 'paginatorleft':\r\n                    this.paginatorLeftTemplate = item.template;\r\n                break;\r\n\r\n                case 'paginatorright':\r\n                    this.paginatorRightTemplate = item.template;\r\n                break;\r\n            }\r\n        });\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.isStateful() && this.resizableColumns) {\r\n            this.restoreColumnWidths();\r\n        }\r\n    }\r\n\r\n    clearCache() {\r\n        if (this.scrollable) {\r\n            if (this.scrollableViewChild) {\r\n                this.scrollableViewChild.clearCache();\r\n            }\r\n\r\n            if (this.scrollableFrozenViewChild) {\r\n                this.scrollableViewChild.clearCache();\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnChanges(simpleChange: SimpleChanges) {\r\n        if (simpleChange.value) {\r\n            if (this.isStateful() && !this.stateRestored) {\r\n                this.restoreState();\r\n            }\r\n\r\n            this._value = simpleChange.value.currentValue;\r\n\r\n            if (!this.lazy) {\r\n                this.clearCache();\r\n                this.totalRecords = (this._value ? this._value.length : 0);\r\n\r\n                if (this.sortMode == 'single' && this.sortField)\r\n                    this.sortSingle();\r\n                else if (this.sortMode == 'multiple' && this.multiSortMeta)\r\n                    this.sortMultiple();\r\n                else if (this.hasFilter())       //sort already filters\r\n                    this._filter();\r\n            }\r\n\r\n            this.tableService.onValueChange(simpleChange.value.currentValue);\r\n        }\r\n\r\n        if (simpleChange.columns) {\r\n            this._columns = simpleChange.columns.currentValue;\r\n            this.tableService.onColumnsChange(simpleChange.columns.currentValue);\r\n\r\n            if (this._columns && this.isStateful() && this.reorderableColumns && !this.columnOrderStateRestored ) {\r\n                this.restoreColumnOrder();\r\n            }\r\n        }\r\n\r\n        if (simpleChange.sortField) {\r\n            this._sortField = simpleChange.sortField.currentValue;\r\n\r\n            //avoid triggering lazy load prior to lazy initialization at onInit\r\n            if ( !this.lazy || this.initialized ) {\r\n                if (this.sortMode === 'single') {\r\n                    this.sortSingle();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (simpleChange.sortOrder) {\r\n            this._sortOrder = simpleChange.sortOrder.currentValue;\r\n\r\n            //avoid triggering lazy load prior to lazy initialization at onInit\r\n            if ( !this.lazy || this.initialized ) {\r\n                if (this.sortMode === 'single') {\r\n                    this.sortSingle();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (simpleChange.multiSortMeta) {\r\n            this._multiSortMeta = simpleChange.multiSortMeta.currentValue;\r\n            if (this.sortMode === 'multiple') {\r\n                this.sortMultiple();\r\n            }\r\n        }\r\n\r\n        if (simpleChange.selection) {\r\n            this._selection = simpleChange.selection.currentValue;\r\n\r\n            if (!this.preventSelectionSetterPropagation) {\r\n                this.updateSelectionKeys();\r\n                this.tableService.onSelectionChange();\r\n            }\r\n            this.preventSelectionSetterPropagation = false;\r\n        }\r\n    }\r\n\r\n    @Input() get value(): any[] {\r\n        return this._value;\r\n    }\r\n    set value(val: any[]) {\r\n        this._value = val;\r\n    }\r\n\r\n    @Input() get columns(): any[] {\r\n        return this._columns;\r\n    }\r\n    set columns(cols: any[]) {\r\n        this._columns = cols;\r\n    }\r\n\r\n    @Input() get first(): number {\r\n        return this._first;\r\n    }\r\n    set first(val: number) {\r\n        this._first = val;\r\n    }\r\n\r\n    @Input() get rows(): number {\r\n        return this._rows;\r\n    }\r\n    set rows(val: number) {\r\n        this._rows = val;\r\n    }\r\n\r\n    @Input() get totalRecords(): number {\r\n        return this._totalRecords;\r\n    }\r\n    set totalRecords(val: number) {\r\n        this._totalRecords = val;\r\n        this.tableService.onTotalRecordsChange(this._totalRecords);\r\n    }\r\n\r\n    @Input() get sortField(): string {\r\n        return this._sortField;\r\n    }\r\n\r\n    set sortField(val: string) {\r\n        this._sortField = val;\r\n    }\r\n\r\n    @Input() get sortOrder(): number {\r\n        return this._sortOrder;\r\n    }\r\n    set sortOrder(val: number) {\r\n        this._sortOrder = val;\r\n    }\r\n\r\n    @Input() get multiSortMeta(): SortMeta[] {\r\n        return this._multiSortMeta;\r\n    }\r\n\r\n    set multiSortMeta(val: SortMeta[]) {\r\n        this._multiSortMeta = val;\r\n    }\r\n\r\n    @Input() get selection(): any {\r\n        return this._selection;\r\n    }\r\n\r\n    set selection(val: any) {\r\n        this._selection = val;\r\n    }\r\n\r\n    updateSelectionKeys() {\r\n        if (this.dataKey && this._selection) {\r\n            this.selectionKeys = {};\r\n            if (Array.isArray(this._selection)) {\r\n                for(let data of this._selection) {\r\n                    this.selectionKeys[String(ObjectUtils.resolveFieldData(data, this.dataKey))] = 1;\r\n                }\r\n            }\r\n            else {\r\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(this._selection, this.dataKey))] = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    onPageChange(event) {\r\n        this.first = event.first;\r\n        this.rows = event.rows;\r\n\r\n        if (this.lazy) {\r\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n        }\r\n\r\n        this.onPage.emit({\r\n            first: this.first,\r\n            rows: this.rows\r\n        });\r\n\r\n        this.firstChange.emit(this.first);\r\n        this.rowsChange.emit(this.rows);\r\n        this.tableService.onValueChange(this.value);\r\n\r\n        if (this.isStateful()) {\r\n            this.saveState();\r\n        }\r\n\r\n        this.anchorRowIndex = null;\r\n\r\n        if (this.scrollable) {\r\n            this.resetScrollTop();\r\n        }\r\n    }\r\n\r\n    sort(event) {\r\n        let originalEvent = event.originalEvent;\r\n\r\n        if (this.sortMode === 'single') {\r\n            this._sortOrder = (this.sortField === event.field) ? this.sortOrder * -1 : this.defaultSortOrder;\r\n            this._sortField = event.field;\r\n            this.sortSingle();\r\n\r\n            if (this.resetPageOnSort) {\r\n                this._first = 0;\r\n                this.firstChange.emit(this._first);\r\n\r\n                if (this.scrollable) {\r\n                    this.resetScrollTop();\r\n                }\r\n            }\r\n        }\r\n        if (this.sortMode === 'multiple') {\r\n            let metaKey = originalEvent.metaKey || originalEvent.ctrlKey;\r\n            let sortMeta = this.getSortMeta(event.field);\r\n\r\n            if (sortMeta) {\r\n                if (!metaKey) {\r\n                    this._multiSortMeta = [{ field: event.field, order: sortMeta.order * -1 }];\r\n\r\n                    if (this.resetPageOnSort) {\r\n                        this._first = 0;\r\n                        this.firstChange.emit(this._first);\r\n\r\n                        if (this.scrollable) {\r\n                            this.resetScrollTop();\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    sortMeta.order = sortMeta.order * -1;\r\n                }\r\n            }\r\n            else {\r\n                if (!metaKey || !this.multiSortMeta) {\r\n                    this._multiSortMeta = [];\r\n\r\n                    if (this.resetPageOnSort) {\r\n                        this._first = 0;\r\n                        this.firstChange.emit(this._first);\r\n                    }\r\n                }\r\n                this._multiSortMeta.push({ field: event.field, order: this.defaultSortOrder });\r\n            }\r\n\r\n            this.sortMultiple();\r\n        }\r\n\r\n        if (this.isStateful()) {\r\n            this.saveState();\r\n        }\r\n\r\n        this.anchorRowIndex = null;\r\n    }\r\n\r\n    sortSingle() {\r\n        if (this.sortField && this.sortOrder) {\r\n            if (this.restoringSort) {\r\n                this.restoringSort = false;\r\n            }\r\n\r\n            if (this.lazy) {\r\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n            }\r\n            else if (this.value) {\r\n                if (this.customSort) {\r\n                    this.sortFunction.emit({\r\n                        data: this.value,\r\n                        mode: this.sortMode,\r\n                        field: this.sortField,\r\n                        order: this.sortOrder\r\n                    });\r\n                }\r\n                else {\r\n                    this.value.sort((data1, data2) => {\r\n                        let value1 = ObjectUtils.resolveFieldData(data1, this.sortField);\r\n                        let value2 = ObjectUtils.resolveFieldData(data2, this.sortField);\r\n                        let result = null;\r\n\r\n                        if (value1 == null && value2 != null)\r\n                            result = -1;\r\n                        else if (value1 != null && value2 == null)\r\n                            result = 1;\r\n                        else if (value1 == null && value2 == null)\r\n                            result = 0;\r\n                        else if (typeof value1 === 'string' && typeof value2 === 'string')\r\n                            result = value1.localeCompare(value2);\r\n                        else\r\n                            result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\r\n\r\n                        return (this.sortOrder * result);\r\n                    });\r\n\r\n                    this._value = [...this.value];\r\n                }\r\n\r\n                if (this.hasFilter()) {\r\n                    this._filter();\r\n                }\r\n            }\r\n\r\n            let sortMeta: SortMeta = {\r\n                field: this.sortField,\r\n                order: this.sortOrder\r\n            };\r\n\r\n            this.onSort.emit(sortMeta);\r\n            this.tableService.onSort(sortMeta);\r\n        }\r\n    }\r\n\r\n    sortMultiple() {\r\n        if (this.multiSortMeta) {\r\n            if (this.lazy) {\r\n                this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n            }\r\n            else if (this.value) {\r\n                if (this.customSort) {\r\n                    this.sortFunction.emit({\r\n                        data: this.value,\r\n                        mode: this.sortMode,\r\n                        multiSortMeta: this.multiSortMeta\r\n                    });\r\n                }\r\n                else {\r\n                    this.value.sort((data1, data2) => {\r\n                        return this.multisortField(data1, data2, this.multiSortMeta, 0);\r\n                    });\r\n\r\n                    this._value = [...this.value];\r\n                }\r\n\r\n                if (this.hasFilter()) {\r\n                    this._filter();\r\n                }\r\n            }\r\n\r\n            this.onSort.emit({\r\n                multisortmeta: this.multiSortMeta\r\n            });\r\n            this.tableService.onSort(this.multiSortMeta);\r\n        }\r\n    }\r\n\r\n    multisortField(data1, data2, multiSortMeta, index) {\r\n        let value1 = ObjectUtils.resolveFieldData(data1, multiSortMeta[index].field);\r\n        let value2 = ObjectUtils.resolveFieldData(data2, multiSortMeta[index].field);\r\n        let result = null;\r\n\r\n        if (value1 == null && value2 != null)\r\n            result = -1;\r\n        else if (value1 != null && value2 == null)\r\n            result = 1;\r\n        else if (value1 == null && value2 == null)\r\n            result = 0;\r\n        else if (typeof value1 == 'string' || value1 instanceof String) {\r\n            if (value1.localeCompare && (value1 != value2)) {\r\n                return (multiSortMeta[index].order * value1.localeCompare(value2));\r\n            }\r\n        }\r\n        else {\r\n            result = (value1 < value2) ? -1 : 1;\r\n        }\r\n\r\n        if (value1 == value2) {\r\n            return (multiSortMeta.length - 1) > (index) ? (this.multisortField(data1, data2, multiSortMeta, index + 1)) : 0;\r\n        }\r\n\r\n        return (multiSortMeta[index].order * result);\r\n    }\r\n\r\n    getSortMeta(field: string) {\r\n        if (this.multiSortMeta && this.multiSortMeta.length) {\r\n            for (let i = 0; i < this.multiSortMeta.length; i++) {\r\n                if (this.multiSortMeta[i].field === field) {\r\n                    return this.multiSortMeta[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    isSorted(field: string) {\r\n        if (this.sortMode === 'single') {\r\n            return (this.sortField && this.sortField === field);\r\n        }\r\n        else if (this.sortMode === 'multiple') {\r\n            let sorted = false;\r\n            if (this.multiSortMeta) {\r\n                for(let i = 0; i < this.multiSortMeta.length; i++) {\r\n                    if (this.multiSortMeta[i].field == field) {\r\n                        sorted = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return sorted;\r\n        }\r\n    }\r\n\r\n    handleRowClick(event) {\r\n        let target = (<HTMLElement> event.originalEvent.target);\r\n        let targetNode = target.nodeName;\r\n        let parentNode = target.parentElement && target.parentElement.nodeName;\r\n        if (targetNode == 'INPUT' || targetNode == 'BUTTON' || targetNode == 'A' ||\r\n            parentNode == 'INPUT' || parentNode == 'BUTTON' || parentNode == 'A' ||\r\n            (DomHandler.hasClass(event.originalEvent.target, 'p-clickable'))) {\r\n            return;\r\n        }\r\n\r\n        if (this.selectionMode) {\r\n            this.preventSelectionSetterPropagation = true;\r\n            if (this.isMultipleSelectionMode() && event.originalEvent.shiftKey && this.anchorRowIndex != null) {\r\n                DomHandler.clearSelection();\r\n                if (this.rangeRowIndex != null) {\r\n                    this.clearSelectionRange(event.originalEvent);\r\n                }\r\n\r\n                this.rangeRowIndex = event.rowIndex;\r\n                this.selectRange(event.originalEvent, event.rowIndex);\r\n            }\r\n            else {\r\n                let rowData = event.rowData;\r\n                let selected = this.isSelected(rowData);\r\n                let metaSelection = this.rowTouched ? false : this.metaKeySelection;\r\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;\r\n                this.anchorRowIndex = event.rowIndex;\r\n                this.rangeRowIndex = event.rowIndex;\r\n\r\n                if (metaSelection) {\r\n                    let metaKey = event.originalEvent.metaKey||event.originalEvent.ctrlKey;\r\n\r\n                    if (selected && metaKey) {\r\n                        if (this.isSingleSelectionMode()) {\r\n                            this._selection = null;\r\n                            this.selectionKeys = {};\r\n                            this.selectionChange.emit(null);\r\n                        }\r\n                        else {\r\n                            let selectionIndex = this.findIndexInSelection(rowData);\r\n                            this._selection = this.selection.filter((val,i) => i!=selectionIndex);\r\n                            this.selectionChange.emit(this.selection);\r\n                            if (dataKeyValue) {\r\n                                delete this.selectionKeys[dataKeyValue];\r\n                            }\r\n                        }\r\n\r\n                        this.onRowUnselect.emit({originalEvent: event.originalEvent, data: rowData, type: 'row'});\r\n                    }\r\n                    else {\r\n                        if (this.isSingleSelectionMode()) {\r\n                            this._selection = rowData;\r\n                            this.selectionChange.emit(rowData);\r\n                            if (dataKeyValue) {\r\n                                this.selectionKeys = {};\r\n                                this.selectionKeys[dataKeyValue] = 1;\r\n                            }\r\n                        }\r\n                        else if (this.isMultipleSelectionMode()) {\r\n                            if (metaKey) {\r\n                                this._selection = this.selection||[];\r\n                            }\r\n                            else {\r\n                                this._selection = [];\r\n                                this.selectionKeys = {};\r\n                            }\r\n\r\n                            this._selection = [...this.selection,rowData];\r\n                            this.selectionChange.emit(this.selection);\r\n                            if (dataKeyValue) {\r\n                                this.selectionKeys[dataKeyValue] = 1;\r\n                            }\r\n                        }\r\n\r\n                        this.onRowSelect.emit({originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex});\r\n                    }\r\n                }\r\n                else {\r\n                    if (this.selectionMode === 'single') {\r\n                        if (selected) {\r\n                            this._selection = null;\r\n                            this.selectionKeys = {};\r\n                            this.selectionChange.emit(this.selection);\r\n                            this.onRowUnselect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row' });\r\n                        }\r\n                        else {\r\n                            this._selection = rowData;\r\n                            this.selectionChange.emit(this.selection);\r\n                            this.onRowSelect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex });\r\n                            if (dataKeyValue) {\r\n                                this.selectionKeys = {};\r\n                                this.selectionKeys[dataKeyValue] = 1;\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (this.selectionMode === 'multiple') {\r\n                        if (selected) {\r\n                            let selectionIndex = this.findIndexInSelection(rowData);\r\n                            this._selection = this.selection.filter((val, i) => i != selectionIndex);\r\n                            this.selectionChange.emit(this.selection);\r\n                            this.onRowUnselect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row' });\r\n                            if (dataKeyValue) {\r\n                                delete this.selectionKeys[dataKeyValue];\r\n                            }\r\n                        }\r\n                        else {\r\n                            this._selection = this.selection ? [...this.selection, rowData] : [rowData];\r\n                            this.selectionChange.emit(this.selection);\r\n                            this.onRowSelect.emit({ originalEvent: event.originalEvent, data: rowData, type: 'row', index: event.rowIndex });\r\n                            if (dataKeyValue) {\r\n                                this.selectionKeys[dataKeyValue] = 1;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.tableService.onSelectionChange();\r\n\r\n            if (this.isStateful()) {\r\n                this.saveState();\r\n            }\r\n        }\r\n\r\n        this.rowTouched = false;\r\n    }\r\n\r\n    handleRowTouchEnd(event) {\r\n        this.rowTouched = true;\r\n    }\r\n\r\n    handleRowRightClick(event) {\r\n        if (this.contextMenu) {\r\n            const rowData = event.rowData;\r\n\r\n            if (this.contextMenuSelectionMode === 'separate') {\r\n                this.contextMenuSelection = rowData;\r\n                this.contextMenuSelectionChange.emit(rowData);\r\n                this.onContextMenuSelect.emit({originalEvent: event.originalEvent, data: rowData, index: event.rowIndex});\r\n                this.contextMenu.show(event.originalEvent);\r\n                this.tableService.onContextMenu(rowData);\r\n            }\r\n            else if (this.contextMenuSelectionMode === 'joint') {\r\n                this.preventSelectionSetterPropagation = true;\r\n                let selected = this.isSelected(rowData);\r\n                let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;\r\n\r\n                if (!selected) {\r\n                    if (this.isSingleSelectionMode()) {\r\n                        this.selection = rowData;\r\n                        this.selectionChange.emit(rowData);\r\n                    }\r\n                    else if (this.isMultipleSelectionMode()) {\r\n                        this.selection = [rowData];\r\n                        this.selectionChange.emit(this.selection);\r\n                    }\r\n\r\n                    if (dataKeyValue) {\r\n                        this.selectionKeys[dataKeyValue] = 1;\r\n                    }\r\n                }\r\n\r\n                this.contextMenu.show(event.originalEvent);\r\n                this.onContextMenuSelect.emit({originalEvent: event, data: rowData, index: event.rowIndex});\r\n            }\r\n        }\r\n    }\r\n\r\n    selectRange(event: MouseEvent, rowIndex: number) {\r\n        let rangeStart, rangeEnd;\r\n\r\n        if (this.anchorRowIndex > rowIndex) {\r\n            rangeStart = rowIndex;\r\n            rangeEnd = this.anchorRowIndex;\r\n        }\r\n        else if (this.anchorRowIndex < rowIndex) {\r\n            rangeStart = this.anchorRowIndex;\r\n            rangeEnd = rowIndex;\r\n        }\r\n        else {\r\n            rangeStart = rowIndex;\r\n            rangeEnd = rowIndex;\r\n        }\r\n\r\n        if (this.lazy && this.paginator) {\r\n            rangeStart -= this.first;\r\n            rangeEnd -= this.first;\r\n        }\r\n\r\n        for(let i = rangeStart; i <= rangeEnd; i++) {\r\n            let rangeRowData = this.filteredValue ? this.filteredValue[i] : this.value[i];\r\n            if (!this.isSelected(rangeRowData)) {\r\n                this._selection = [...this.selection, rangeRowData];\r\n                let dataKeyValue: string = this.dataKey ? String(ObjectUtils.resolveFieldData(rangeRowData, this.dataKey)) : null;\r\n                if (dataKeyValue) {\r\n                    this.selectionKeys[dataKeyValue] = 1;\r\n                }\r\n                this.onRowSelect.emit({originalEvent: event, data: rangeRowData, type: 'row'});\r\n            }\r\n        }\r\n\r\n        this.selectionChange.emit(this.selection);\r\n    }\r\n\r\n    clearSelectionRange(event: MouseEvent) {\r\n        let rangeStart, rangeEnd;\r\n\r\n        if (this.rangeRowIndex > this.anchorRowIndex) {\r\n            rangeStart = this.anchorRowIndex;\r\n            rangeEnd = this.rangeRowIndex;\r\n        }\r\n        else if (this.rangeRowIndex < this.anchorRowIndex) {\r\n            rangeStart = this.rangeRowIndex;\r\n            rangeEnd = this.anchorRowIndex;\r\n        }\r\n        else {\r\n            rangeStart = this.rangeRowIndex;\r\n            rangeEnd = this.rangeRowIndex;\r\n        }\r\n\r\n        for(let i = rangeStart; i <= rangeEnd; i++) {\r\n            let rangeRowData = this.value[i];\r\n            let selectionIndex = this.findIndexInSelection(rangeRowData);\r\n            this._selection = this.selection.filter((val,i) => i!=selectionIndex);\r\n            let dataKeyValue: string = this.dataKey ? String(ObjectUtils.resolveFieldData(rangeRowData, this.dataKey)) : null;\r\n            if (dataKeyValue) {\r\n                delete this.selectionKeys[dataKeyValue];\r\n            }\r\n            this.onRowUnselect.emit({originalEvent: event, data: rangeRowData, type: 'row'});\r\n        }\r\n    }\r\n\r\n    isSelected(rowData) {\r\n        if (rowData && this.selection) {\r\n            if (this.dataKey) {\r\n                return this.selectionKeys[ObjectUtils.resolveFieldData(rowData, this.dataKey)] !== undefined;\r\n            }\r\n            else {\r\n                if (this.selection instanceof Array)\r\n                    return this.findIndexInSelection(rowData) > -1;\r\n                else\r\n                    return this.equals(rowData, this.selection);\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    findIndexInSelection(rowData: any) {\r\n        let index: number = -1;\r\n        if (this.selection && this.selection.length) {\r\n            for (let i = 0; i < this.selection.length; i++) {\r\n                if (this.equals(rowData, this.selection[i])) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return index;\r\n    }\r\n\r\n    toggleRowWithRadio(event: any, rowData:any) {\r\n        this.preventSelectionSetterPropagation = true;\r\n\r\n        if (this.selection != rowData) {\r\n            this._selection = rowData;\r\n            this.selectionChange.emit(this.selection);\r\n            this.onRowSelect.emit({originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'radiobutton'});\r\n\r\n            if (this.dataKey) {\r\n                this.selectionKeys = {};\r\n                this.selectionKeys[String(ObjectUtils.resolveFieldData(rowData, this.dataKey))] = 1;\r\n            }\r\n        }\r\n        else {\r\n            this._selection = null;\r\n            this.selectionChange.emit(this.selection);\r\n            this.onRowUnselect.emit({originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'radiobutton'});\r\n        }\r\n\r\n        this.tableService.onSelectionChange();\r\n\r\n        if (this.isStateful()) {\r\n            this.saveState();\r\n        }\r\n    }\r\n\r\n    toggleRowWithCheckbox(event, rowData: any) {\r\n        this.selection = this.selection||[];\r\n        let selected = this.isSelected(rowData);\r\n        let dataKeyValue = this.dataKey ? String(ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;\r\n        this.preventSelectionSetterPropagation = true;\r\n\r\n        if (selected) {\r\n            let selectionIndex = this.findIndexInSelection(rowData);\r\n            this._selection = this.selection.filter((val, i) => i != selectionIndex);\r\n            this.selectionChange.emit(this.selection);\r\n            this.onRowUnselect.emit({ originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'checkbox' });\r\n            if (dataKeyValue) {\r\n                delete this.selectionKeys[dataKeyValue];\r\n            }\r\n        }\r\n        else {\r\n            this._selection = this.selection ? [...this.selection, rowData] : [rowData];\r\n            this.selectionChange.emit(this.selection);\r\n            this.onRowSelect.emit({ originalEvent: event.originalEvent, index: event.rowIndex, data: rowData, type: 'checkbox' });\r\n            if (dataKeyValue) {\r\n                this.selectionKeys[dataKeyValue] = 1;\r\n            }\r\n        }\r\n\r\n        this.tableService.onSelectionChange();\r\n\r\n        if (this.isStateful()) {\r\n            this.saveState();\r\n        }\r\n    }\r\n\r\n    toggleRowsWithCheckbox(event: Event, check: boolean) {\r\n        this._selection = check ? this.filteredValue ? this.filteredValue.slice(): this.value.slice() : [];\r\n        this.preventSelectionSetterPropagation = true;\r\n        this.updateSelectionKeys();\r\n        this.selectionChange.emit(this._selection);\r\n        this.tableService.onSelectionChange();\r\n        this.onHeaderCheckboxToggle.emit({originalEvent: event, checked: check});\r\n\r\n        if (this.isStateful()) {\r\n            this.saveState();\r\n        }\r\n    }\r\n\r\n    equals(data1, data2) {\r\n        return this.compareSelectionBy === 'equals' ? (data1 === data2) : ObjectUtils.equals(data1, data2, this.dataKey);\r\n    }\r\n\r\n    filter(value, field, matchMode) {\r\n        if (this.filterTimeout) {\r\n            clearTimeout(this.filterTimeout);\r\n        }\r\n\r\n        if (!this.isFilterBlank(value)) {\r\n            this.filters[field] = { value: value, matchMode: matchMode };\r\n        } else if (this.filters[field]) {\r\n            delete this.filters[field];\r\n        }\r\n\r\n        this.filterTimeout = setTimeout(() => {\r\n            this._filter(true);\r\n            this.filterTimeout = null;\r\n        }, this.filterDelay);\r\n\r\n        this.anchorRowIndex = null;\r\n    }\r\n\r\n    filterGlobal(value, matchMode) {\r\n        this.filter(value, 'global', matchMode);\r\n    }\r\n\r\n    isFilterBlank(filter: any): boolean {\r\n        if (filter !== null && filter !== undefined) {\r\n            if ((typeof filter === 'string' && filter.trim().length == 0) || (filter instanceof Array && filter.length == 0))\r\n                return true;\r\n            else\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    _filter(resetScroll = false) {\r\n        if (!this.restoringFilter) {\r\n            this.first = 0;\r\n            this.firstChange.emit(this.first);\r\n        }\r\n\r\n        if (this.lazy) {\r\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n        }\r\n        else {\r\n            if (!this.value) {\r\n                return;\r\n            }\r\n\r\n            if (!this.hasFilter()) {\r\n                this.filteredValue = null;\r\n                if (this.paginator) {\r\n                    this.totalRecords = this.value ? this.value.length : 0;\r\n                }\r\n            }\r\n            else {\r\n                let globalFilterFieldsArray;\r\n                if (this.filters['global']) {\r\n                    if (!this.columns && !this.globalFilterFields)\r\n                        throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');\r\n                    else\r\n                        globalFilterFieldsArray = this.globalFilterFields||this.columns;\r\n                }\r\n\r\n                this.filteredValue = [];\r\n\r\n                for (let i = 0; i < this.value.length; i++) {\r\n                    let localMatch = true;\r\n                    let globalMatch = false;\r\n                    let localFiltered = false;\r\n\r\n                    for (let prop in this.filters) {\r\n                        if (this.filters.hasOwnProperty(prop) && prop !== 'global') {\r\n                            localFiltered = true;\r\n                            let filterMeta = this.filters[prop];\r\n                            let filterField = prop;\r\n                            let filterValue = filterMeta.value;\r\n                            let filterMatchMode = filterMeta.matchMode || 'startsWith';\r\n                            let dataFieldValue = ObjectUtils.resolveFieldData(this.value[i], filterField);\r\n                            let filterConstraint = FilterUtils[filterMatchMode];\r\n\r\n                            if (!filterConstraint(dataFieldValue, filterValue, this.filterLocale)) {\r\n                                localMatch = false;\r\n                            }\r\n\r\n                            if (!localMatch) {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {\r\n                        for(let j = 0; j < globalFilterFieldsArray.length; j++) {\r\n                            let globalFilterField = globalFilterFieldsArray[j].field||globalFilterFieldsArray[j];\r\n                            globalMatch = FilterUtils[this.filters['global'].matchMode](ObjectUtils.resolveFieldData(this.value[i], globalFilterField), this.filters['global'].value, this.filterLocale);\r\n\r\n                            if (globalMatch) {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    let matches: boolean;\r\n                    if (this.filters['global']) {\r\n                        matches = localFiltered ? (localFiltered && localMatch && globalMatch) : globalMatch;\r\n                    }\r\n                    else {\r\n                        matches = localFiltered && localMatch;\r\n                    }\r\n\r\n                    if (matches) {\r\n                        this.filteredValue.push(this.value[i]);\r\n                    }\r\n                }\r\n\r\n                if (this.filteredValue.length === this.value.length) {\r\n                    this.filteredValue = null;\r\n                }\r\n\r\n                if (this.paginator) {\r\n                    this.totalRecords = this.filteredValue ? this.filteredValue.length : this.value ? this.value.length : 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.onFilter.emit({\r\n            filters: this.filters,\r\n            filteredValue: this.filteredValue || this.value\r\n        });\r\n\r\n        this.tableService.onValueChange(this.value);\r\n\r\n        if (this.isStateful() && !this.restoringFilter) {\r\n            this.saveState();\r\n        }\r\n\r\n        if (this.restoringFilter) {\r\n            this.restoringFilter = false;\r\n        }\r\n\r\n        this.cd.markForCheck();\r\n\r\n        if (this.scrollable && resetScroll) {\r\n            // reset scrolling only when this call is initiated by filter event\r\n            this.resetScrollTop();\r\n        }\r\n    }\r\n\r\n    hasFilter() {\r\n        let empty = true;\r\n        for (let prop in this.filters) {\r\n            if (this.filters.hasOwnProperty(prop)) {\r\n                empty = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return !empty;\r\n    }\r\n\r\n    createLazyLoadMetadata(): any {\r\n        return {\r\n            first: this.first,\r\n            rows: this.rows,\r\n            sortField: this.sortField,\r\n            sortOrder: this.sortOrder,\r\n            filters: this.filters,\r\n            globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,\r\n            multiSortMeta: this.multiSortMeta\r\n        };\r\n    }\r\n\r\n    public clear() {\r\n        this._sortField = null;\r\n        this._sortOrder = this.defaultSortOrder;\r\n        this._multiSortMeta = null;\r\n        this.tableService.onSort(null);\r\n\r\n        this.filteredValue = null;\r\n        this.filters = {};\r\n\r\n        this.first = 0;\r\n        this.firstChange.emit(this.first);\r\n\r\n        if (this.lazy) {\r\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\r\n        }\r\n        else {\r\n            this.totalRecords = (this._value ? this._value.length : 0);\r\n        }\r\n    }\r\n\r\n    public reset() {\r\n        console.warn(\"reset function is deprecated, use clear instead.\");\r\n        this.clear();\r\n    }\r\n\r\n    public exportCSV(options?: any) {\r\n        let data;\r\n        let csv = '';\r\n        let columns = this.frozenColumns ? [...this.frozenColumns, ...this.columns] : this.columns;\r\n\r\n        if (options && options.selectionOnly) {\r\n            data = this.selection || [];\r\n        }\r\n        else {\r\n            data = this.filteredValue || this.value;\r\n\r\n            if (this.frozenValue) {\r\n                data = data ? [...this.frozenValue, ...data] : this.frozenValue;\r\n            }\r\n        }\r\n\r\n        //headers\r\n        for (let i = 0; i < columns.length; i++) {\r\n            let column = columns[i];\r\n            if (column.exportable !== false && column.field) {\r\n                csv += '\"' + (column.header || column.field) + '\"';\r\n\r\n                if (i < (columns.length - 1)) {\r\n                    csv += this.csvSeparator;\r\n                }\r\n            }\r\n        }\r\n\r\n        //body\r\n        data.forEach((record, i) => {\r\n            csv += '\\n';\r\n            for (let i = 0; i < columns.length; i++) {\r\n                let column = columns[i];\r\n                if (column.exportable !== false && column.field) {\r\n                    let cellData = ObjectUtils.resolveFieldData(record, column.field);\r\n\r\n                    if (cellData != null) {\r\n                        if (this.exportFunction) {\r\n                            cellData = this.exportFunction({\r\n                                data: cellData,\r\n                                field: column.field\r\n                            });\r\n                        }\r\n                        else\r\n                            cellData = String(cellData).replace(/\"/g, '\"\"');\r\n                    }\r\n                    else\r\n                        cellData = '';\r\n\r\n                    csv += '\"' + cellData + '\"';\r\n\r\n                    if (i < (columns.length - 1)) {\r\n                        csv += this.csvSeparator;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        let blob = new Blob([csv], {\r\n            type: 'text/csv;charset=utf-8;'\r\n        });\r\n\r\n        if (window.navigator.msSaveOrOpenBlob) {\r\n            navigator.msSaveOrOpenBlob(blob, this.exportFilename + '.csv');\r\n        }\r\n        else {\r\n            let link = document.createElement(\"a\");\r\n            link.style.display = 'none';\r\n            document.body.appendChild(link);\r\n            if (link.download !== undefined) {\r\n                link.setAttribute('href', URL.createObjectURL(blob));\r\n                link.setAttribute('download', this.exportFilename + '.csv');\r\n                link.click();\r\n            }\r\n            else {\r\n                csv = 'data:text/csv;charset=utf-8,' + csv;\r\n                window.open(encodeURI(csv));\r\n            }\r\n            document.body.removeChild(link);\r\n        }\r\n    }\r\n\r\n    public resetScrollTop() {\r\n        if (this.virtualScroll)\r\n            this.scrollToVirtualIndex(0);\r\n        else\r\n            this.scrollTo({top: 0});\r\n    }\r\n\r\n    public scrollToVirtualIndex(index: number) {\r\n        if (this.scrollableViewChild) {\r\n            this.scrollableViewChild.scrollToVirtualIndex(index);\r\n        }\r\n\r\n        if (this.scrollableFrozenViewChild) {\r\n            this.scrollableFrozenViewChild.scrollToVirtualIndex(index);\r\n        }\r\n    }\r\n\r\n    public scrollTo(options) {\r\n        if (this.scrollableViewChild) {\r\n            this.scrollableViewChild.scrollTo(options);\r\n        }\r\n\r\n        if (this.scrollableFrozenViewChild) {\r\n            this.scrollableFrozenViewChild.scrollTo(options);\r\n        }\r\n    }\r\n\r\n    updateEditingCell(cell, data, field, index) {\r\n        this.editingCell = cell;\r\n        this.editingCellData = data;\r\n        this.editingCellField = field;\r\n        this.editingCellRowIndex = index;\r\n        this.bindDocumentEditListener();\r\n    }\r\n\r\n    isEditingCellValid() {\r\n        return (this.editingCell && DomHandler.find(this.editingCell, '.ng-invalid.ng-dirty').length === 0);\r\n    }\r\n\r\n    bindDocumentEditListener() {\r\n        if (!this.documentEditListener) {\r\n            this.documentEditListener = (event) => {\r\n                if (this.editingCell && !this.editingCellClick && this.isEditingCellValid()) {\r\n                    DomHandler.removeClass(this.editingCell, 'p-cell-editing');\r\n                    this.editingCell = null;\r\n                    this.onEditComplete.emit({ field: this.editingCellField, data: this.editingCellData, originalEvent: event, index: this.editingCellRowIndex });\r\n                    this.editingCellField = null;\r\n                    this.editingCellData = null;\r\n                    this.editingCellRowIndex = null;\r\n                    this.unbindDocumentEditListener();\r\n                    this.cd.markForCheck();\r\n                }\r\n\r\n                this.editingCellClick = false;\r\n            };\r\n\r\n            document.addEventListener('click', this.documentEditListener);\r\n        }\r\n    }\r\n\r\n    unbindDocumentEditListener() {\r\n        if (this.documentEditListener) {\r\n            document.removeEventListener('click', this.documentEditListener);\r\n            this.documentEditListener = null;\r\n        }\r\n    }\r\n\r\n    initRowEdit(rowData: any) {\r\n        let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\r\n        this.editingRowKeys[dataKeyValue] = true;\r\n    }\r\n\r\n    saveRowEdit(rowData: any, rowElement: HTMLTableRowElement) {\r\n        if (DomHandler.find(rowElement, '.ng-invalid.ng-dirty').length === 0) {\r\n            let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\r\n            delete this.editingRowKeys[dataKeyValue];\r\n        }\r\n    }\r\n\r\n    cancelRowEdit(rowData: any) {\r\n        let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\r\n        delete this.editingRowKeys[dataKeyValue];\r\n    }\r\n\r\n    toggleRow(rowData: any, event?: Event) {\r\n        if (!this.dataKey) {\r\n            throw new Error('dataKey must be defined to use row expansion');\r\n        }\r\n\r\n        let dataKeyValue = String(ObjectUtils.resolveFieldData(rowData, this.dataKey));\r\n\r\n        if (this.expandedRowKeys[dataKeyValue] != null) {\r\n            delete this.expandedRowKeys[dataKeyValue];\r\n            this.onRowCollapse.emit({\r\n                originalEvent: event,\r\n                data: rowData\r\n            });\r\n        }\r\n        else {\r\n            if (this.rowExpandMode === 'single') {\r\n                this.expandedRowKeys = {};\r\n            }\r\n\r\n            this.expandedRowKeys[dataKeyValue] = true;\r\n            this.onRowExpand.emit({\r\n                originalEvent: event,\r\n                data: rowData\r\n            });\r\n        }\r\n\r\n        if (event) {\r\n            event.preventDefault();\r\n        }\r\n\r\n        if (this.isStateful()) {\r\n            this.saveState();\r\n        }\r\n    }\r\n\r\n    isRowExpanded(rowData: any): boolean {\r\n        return this.expandedRowKeys[String(ObjectUtils.resolveFieldData(rowData, this.dataKey))] === true;\r\n    }\r\n\r\n    isRowEditing(rowData: any): boolean {\r\n        return this.editingRowKeys[String(ObjectUtils.resolveFieldData(rowData, this.dataKey))] === true;\r\n    }\r\n\r\n    isSingleSelectionMode() {\r\n        return this.selectionMode === 'single';\r\n    }\r\n\r\n    isMultipleSelectionMode() {\r\n        return this.selectionMode === 'multiple';\r\n    }\r\n\r\n    onColumnResizeBegin(event) {\r\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\r\n        this.lastResizerHelperX = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft);\r\n        this.onColumnResize(event);\r\n        event.preventDefault();\r\n    }\r\n\r\n    onColumnResize(event) {\r\n        let containerLeft = DomHandler.getOffset(this.containerViewChild.nativeElement).left;\r\n        DomHandler.addClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\r\n        this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild.nativeElement.offsetHeight + 'px';\r\n        this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';\r\n        this.resizeHelperViewChild.nativeElement.style.left = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft) + 'px';\r\n\r\n        this.resizeHelperViewChild.nativeElement.style.display = 'block';\r\n    }\r\n\r\n    onColumnResizeEnd(event, column) {\r\n        let delta = this.resizeHelperViewChild.nativeElement.offsetLeft - this.lastResizerHelperX;\r\n        let columnWidth = column.offsetWidth;\r\n        let minWidth = parseInt(column.style.minWidth || 15);\r\n\r\n        if (columnWidth + delta < minWidth) {\r\n            delta = minWidth - columnWidth;\r\n        }\r\n\r\n        const newColumnWidth = columnWidth + delta;\r\n\r\n        if (newColumnWidth >= minWidth) {\r\n            if (this.columnResizeMode === 'fit') {\r\n                let nextColumn = column.nextElementSibling;\r\n                while (!nextColumn.offsetParent) {\r\n                    nextColumn = nextColumn.nextElementSibling;\r\n                }\r\n\r\n                if (nextColumn) {\r\n                    let nextColumnWidth = nextColumn.offsetWidth - delta;\r\n                    let nextColumnMinWidth = nextColumn.style.minWidth || 15;\r\n\r\n                    if (newColumnWidth > 15 && nextColumnWidth > parseInt(nextColumnMinWidth)) {\r\n                        if (this.scrollable) {\r\n                            let scrollableView = this.findParentScrollableView(column);\r\n                            let scrollableBodyTable = DomHandler.findSingle(scrollableView, '.p-datatable-scrollable-body table') || DomHandler.findSingle(scrollableView, '.p-datatable-scrollable-body table');\r\n                            let scrollableHeaderTable = DomHandler.findSingle(scrollableView, 'table.p-datatable-scrollable-header-table');\r\n                            let scrollableFooterTable = DomHandler.findSingle(scrollableView, 'table.p-datatable-scrollable-footer-table');\r\n                            let resizeColumnIndex = DomHandler.index(column);\r\n\r\n                            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\r\n                            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\r\n                            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\r\n                        }\r\n                        else {\r\n                            column.style.width = newColumnWidth + 'px';\r\n                            if (nextColumn) {\r\n                                nextColumn.style.width = nextColumnWidth + 'px';\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else if (this.columnResizeMode === 'expand') {\r\n                if (newColumnWidth >= minWidth) {\r\n                    if (this.scrollable) {\r\n                        this.setScrollableItemsWidthOnExpandResize(column, newColumnWidth, delta);\r\n                    }\r\n                    else {\r\n                        this.tableViewChild.nativeElement.style.width = this.tableViewChild.nativeElement.offsetWidth + delta + 'px';\r\n                        column.style.width = newColumnWidth + 'px';\r\n                        let containerWidth = this.tableViewChild.nativeElement.style.width;\r\n                        this.containerViewChild.nativeElement.style.width = containerWidth + 'px';\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.onColResize.emit({\r\n                element: column,\r\n                delta: delta\r\n            });\r\n\r\n            if (this.isStateful()) {\r\n                this.saveState();\r\n            }\r\n        }\r\n\r\n        this.resizeHelperViewChild.nativeElement.style.display = 'none';\r\n        DomHandler.removeClass(this.containerViewChild.nativeElement, 'p-unselectable-text');\r\n    }\r\n\r\n    setScrollableItemsWidthOnExpandResize(column, newColumnWidth, delta) {\r\n        let scrollableView = column ? this.findParentScrollableView(column) : this.containerViewChild.nativeElement;\r\n        let scrollableBody = DomHandler.findSingle(scrollableView, '.p-datatable-scrollable-body') || DomHandler.findSingle(scrollableView, 'cdk-virtual-scroll-viewport');\r\n        let scrollableHeader = DomHandler.findSingle(scrollableView, '.p-datatable-scrollable-header');\r\n        let scrollableFooter = DomHandler.findSingle(scrollableView, '.p-datatable-scrollable-footer');\r\n        let scrollableBodyTable = DomHandler.findSingle(scrollableBody, '.p-datatable-scrollable-body table') || DomHandler.findSingle(scrollableView, 'cdk-virtual-scroll-viewport table');\r\n        let scrollableHeaderTable = DomHandler.findSingle(scrollableHeader, 'table.p-datatable-scrollable-header-table');\r\n        let scrollableFooterTable = DomHandler.findSingle(scrollableFooter, 'table.p-datatable-scrollable-footer-table');\r\n\r\n        const scrollableBodyTableWidth = column ? scrollableBodyTable.offsetWidth + delta : newColumnWidth;\r\n        const scrollableHeaderTableWidth = column ? scrollableHeaderTable.offsetWidth + delta : newColumnWidth;\r\n        const isContainerInViewport = this.containerViewChild.nativeElement.offsetWidth >= scrollableBodyTableWidth;\r\n\r\n        let setWidth = (container, table, width, isContainerInViewport) => {\r\n            if (container && table) {\r\n                container.style.width = isContainerInViewport ? width + DomHandler.calculateScrollbarWidth(scrollableBody) + 'px' : 'auto'\r\n                table.style.width = width + 'px';\r\n            }\r\n        };\r\n\r\n        setWidth(scrollableBody, scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);\r\n        setWidth(scrollableHeader, scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);\r\n        setWidth(scrollableFooter, scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);\r\n\r\n        if (column) {\r\n            let resizeColumnIndex = DomHandler.index(column);\r\n\r\n            this.resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\r\n            this.resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\r\n            this.resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\r\n        }\r\n    }\r\n\r\n    findParentScrollableView(column) {\r\n        if (column) {\r\n            let parent = column.parentElement;\r\n            while (parent && !DomHandler.hasClass(parent, 'p-datatable-scrollable-view')) {\r\n                parent = parent.parentElement;\r\n            }\r\n\r\n            return parent;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {\r\n        if (table) {\r\n            let colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\r\n\r\n            if (colGroup) {\r\n                let col = colGroup.children[resizeColumnIndex];\r\n                let nextCol = col.nextElementSibling;\r\n                col.style.width = newColumnWidth + 'px';\r\n\r\n                if (nextCol && nextColumnWidth) {\r\n                    nextCol.style.width = nextColumnWidth + 'px';\r\n                }\r\n            }\r\n            else {\r\n                throw \"Scrollable tables require a colgroup to support resizable columns\";\r\n            }\r\n        }\r\n    }\r\n\r\n    onColumnDragStart(event, columnElement) {\r\n        this.reorderIconWidth = DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild.nativeElement);\r\n        this.reorderIconHeight = DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild.nativeElement);\r\n        this.draggedColumn = columnElement;\r\n        event.dataTransfer.setData('text', 'b');    // For firefox\r\n    }\r\n\r\n    onColumnDragEnter(event, dropHeader) {\r\n        if (this.reorderableColumns && this.draggedColumn && dropHeader) {\r\n            event.preventDefault();\r\n            let containerOffset = DomHandler.getOffset(this.containerViewChild.nativeElement);\r\n            let dropHeaderOffset = DomHandler.getOffset(dropHeader);\r\n\r\n            if (this.draggedColumn != dropHeader) {\r\n                let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'preorderablecolumn');\r\n                let dropIndex = DomHandler.indexWithinGroup(dropHeader, 'preorderablecolumn');\r\n                let targetLeft = dropHeaderOffset.left - containerOffset.left;\r\n                let targetTop = containerOffset.top - dropHeaderOffset.top;\r\n                let columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;\r\n\r\n                this.reorderIndicatorUpViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';\r\n                this.reorderIndicatorDownViewChild.nativeElement.style.top = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';\r\n\r\n                if (event.pageX > columnCenter) {\r\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\r\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';\r\n                    this.dropPosition = 1;\r\n                }\r\n                else {\r\n                    this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\r\n                    this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';\r\n                    this.dropPosition = -1;\r\n                }\r\n\r\n                if ((dropIndex - dragIndex === 1 && this.dropPosition === -1) || (dropIndex - dragIndex === -1 && this.dropPosition === 1)) {\r\n                    this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\r\n                    this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\r\n                }\r\n                else {\r\n                    this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';\r\n                    this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';\r\n                }\r\n            }\r\n            else {\r\n                event.dataTransfer.dropEffect = 'none';\r\n            }\r\n        }\r\n    }\r\n\r\n    onColumnDragLeave(event) {\r\n        if (this.reorderableColumns && this.draggedColumn) {\r\n            event.preventDefault();\r\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\r\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    onColumnDrop(event, dropColumn) {\r\n        event.preventDefault();\r\n        if (this.draggedColumn) {\r\n            let dragIndex = DomHandler.indexWithinGroup(this.draggedColumn, 'preorderablecolumn');\r\n            let dropIndex = DomHandler.indexWithinGroup(dropColumn, 'preorderablecolumn');\r\n            let allowDrop = (dragIndex != dropIndex);\r\n            if (allowDrop && ((dropIndex - dragIndex == 1 && this.dropPosition === -1) || (dragIndex - dropIndex == 1 && this.dropPosition === 1))) {\r\n                allowDrop = false;\r\n            }\r\n\r\n            if (allowDrop && ((dropIndex < dragIndex && this.dropPosition === 1))) {\r\n                dropIndex = dropIndex + 1;\r\n            }\r\n\r\n            if (allowDrop && ((dropIndex > dragIndex && this.dropPosition === -1))) {\r\n                dropIndex = dropIndex - 1;\r\n            }\r\n\r\n            if (allowDrop) {\r\n                ObjectUtils.reorderArray(this.columns, dragIndex, dropIndex);\r\n\r\n                this.onColReorder.emit({\r\n                    dragIndex: dragIndex,\r\n                    dropIndex: dropIndex,\r\n                    columns: this.columns\r\n                });\r\n\r\n                if (this.isStateful()) {\r\n                    this.zone.runOutsideAngular(() => {\r\n                        setTimeout(() => {\r\n                            this.saveState();\r\n                        });\r\n                    });\r\n                }\r\n            }\r\n\r\n            this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';\r\n            this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';\r\n            this.draggedColumn.draggable = false;\r\n            this.draggedColumn = null;\r\n            this.dropPosition = null;\r\n        }\r\n    }\r\n\r\n    onRowDragStart(event, index) {\r\n        this.rowDragging = true;\r\n        this.draggedRowIndex = index;\r\n        event.dataTransfer.setData('text', 'b');    // For firefox\r\n    }\r\n\r\n    onRowDragOver(event, index, rowElement) {\r\n        if (this.rowDragging && this.draggedRowIndex !== index) {\r\n            let rowY = DomHandler.getOffset(rowElement).top + DomHandler.getWindowScrollTop();\r\n            let pageY = event.pageY;\r\n            let rowMidY = rowY + DomHandler.getOuterHeight(rowElement) / 2;\r\n            let prevRowElement = rowElement.previousElementSibling;\r\n\r\n            if (pageY < rowMidY) {\r\n                DomHandler.removeClass(rowElement, 'p-datatable-dragpoint-bottom');\r\n\r\n                this.droppedRowIndex = index;\r\n                if (prevRowElement)\r\n                    DomHandler.addClass(prevRowElement, 'p-datatable-dragpoint-bottom');\r\n                else\r\n                    DomHandler.addClass(rowElement, 'p-datatable-dragpoint-top');\r\n            }\r\n            else {\r\n                if (prevRowElement)\r\n                    DomHandler.removeClass(prevRowElement, 'p-datatable-dragpoint-bottom');\r\n                else\r\n                    DomHandler.addClass(rowElement, 'p-datatable-dragpoint-top');\r\n\r\n                this.droppedRowIndex = index + 1;\r\n                DomHandler.addClass(rowElement, 'p-datatable-dragpoint-bottom');\r\n            }\r\n        }\r\n    }\r\n\r\n    onRowDragLeave(event, rowElement) {\r\n        let prevRowElement = rowElement.previousElementSibling;\r\n        if (prevRowElement) {\r\n            DomHandler.removeClass(prevRowElement, 'p-datatable-dragpoint-bottom');\r\n        }\r\n\r\n        DomHandler.removeClass(rowElement, 'p-datatable-dragpoint-bottom');\r\n        DomHandler.removeClass(rowElement, 'p-datatable-dragpoint-top');\r\n    }\r\n\r\n    onRowDragEnd(event) {\r\n        this.rowDragging = false;\r\n        this.draggedRowIndex = null;\r\n        this.droppedRowIndex = null;\r\n    }\r\n\r\n    onRowDrop(event, rowElement) {\r\n        if (this.droppedRowIndex != null) {\r\n            let dropIndex = (this.draggedRowIndex > this.droppedRowIndex) ? this.droppedRowIndex : (this.droppedRowIndex === 0) ? 0 : this.droppedRowIndex - 1;\r\n            ObjectUtils.reorderArray(this.value, this.draggedRowIndex, dropIndex);\r\n\r\n            this.onRowReorder.emit({\r\n                dragIndex: this.draggedRowIndex,\r\n                dropIndex: dropIndex\r\n            });\r\n        }\r\n        //cleanup\r\n        this.onRowDragLeave(event, rowElement);\r\n        this.onRowDragEnd(event);\r\n    }\r\n\r\n    isEmpty() {\r\n        let data = this.filteredValue||this.value;\r\n        return data == null || data.length == 0;\r\n    }\r\n\r\n    getBlockableElement(): HTMLElement {\r\n        return this.el.nativeElement.children[0];\r\n    }\r\n\r\n    getStorage() {\r\n        switch(this.stateStorage) {\r\n            case 'local':\r\n                return window.localStorage;\r\n\r\n            case 'session':\r\n                return window.sessionStorage;\r\n\r\n            default:\r\n                throw new Error(this.stateStorage + ' is not a valid value for the state storage, supported values are \"local\" and \"session\".');\r\n        }\r\n    }\r\n\r\n    isStateful() {\r\n        return this.stateKey != null;\r\n    }\r\n\r\n    saveState() {\r\n        const storage = this.getStorage();\r\n        let state: TableState = {};\r\n\r\n        if (this.paginator) {\r\n            state.first = this.first;\r\n            state.rows = this.rows;\r\n        }\r\n\r\n        if (this.sortField) {\r\n            state.sortField = this.sortField;\r\n            state.sortOrder = this.sortOrder;\r\n        }\r\n\r\n        if (this.multiSortMeta) {\r\n            state.multiSortMeta = this.multiSortMeta;\r\n        }\r\n\r\n        if (this.hasFilter()) {\r\n            state.filters = this.filters;\r\n        }\r\n\r\n        if (this.resizableColumns) {\r\n            this.saveColumnWidths(state);\r\n        }\r\n\r\n        if (this.reorderableColumns) {\r\n            this.saveColumnOrder(state);\r\n        }\r\n\r\n        if (this.selection) {\r\n            state.selection = this.selection;\r\n        }\r\n\r\n        if (Object.keys(this.expandedRowKeys).length) {\r\n            state.expandedRowKeys = this.expandedRowKeys;\r\n        }\r\n\r\n        if (Object.keys(state).length) {\r\n            storage.setItem(this.stateKey, JSON.stringify(state));\r\n        }\r\n\r\n        this.onStateSave.emit(state);\r\n    }\r\n\r\n    clearState() {\r\n        const storage = this.getStorage();\r\n\r\n        if (this.stateKey) {\r\n            storage.removeItem(this.stateKey);\r\n        }\r\n    }\r\n\r\n    restoreState() {\r\n        const storage = this.getStorage();\r\n        const stateString = storage.getItem(this.stateKey);\r\n\r\n        if (stateString) {\r\n            let state: TableState = JSON.parse(stateString);\r\n\r\n            if (this.paginator) {\r\n                if (this.first !== undefined) {\r\n                    this.first = state.first;\r\n                    this.firstChange.emit(this.first);\r\n                }\r\n\r\n                if (this.rows !== undefined) {\r\n                    this.rows = state.rows;\r\n                    this.rowsChange.emit(this.rows);\r\n                }\r\n            }\r\n\r\n            if (state.sortField) {\r\n                this.restoringSort = true;\r\n                this._sortField = state.sortField;\r\n                this._sortOrder = state.sortOrder;\r\n            }\r\n\r\n            if (state.multiSortMeta) {\r\n                this.restoringSort = true;\r\n                this._multiSortMeta = state.multiSortMeta;\r\n            }\r\n\r\n            if (state.filters) {\r\n                this.restoringFilter = true;\r\n                this.filters = state.filters;\r\n            }\r\n\r\n            if (this.resizableColumns) {\r\n                this.columnWidthsState = state.columnWidths;\r\n                this.tableWidthState = state.tableWidth;\r\n            }\r\n\r\n            if (state.expandedRowKeys) {\r\n                this.expandedRowKeys = state.expandedRowKeys;\r\n            }\r\n\r\n            if (state.selection) {\r\n                Promise.resolve(null).then(() => this.selectionChange.emit(state.selection));\r\n            }\r\n\r\n            this.stateRestored = true;\r\n\r\n            this.onStateRestore.emit(state);\r\n        }\r\n    }\r\n\r\n    saveColumnWidths(state) {\r\n        let widths = [];\r\n        let headers = DomHandler.find(this.containerViewChild.nativeElement, '.p-datatable-thead > tr:first-child > th');\r\n        headers.map(header => widths.push(DomHandler.getOuterWidth(header)));\r\n        state.columnWidths = widths.join(',');\r\n\r\n        if (this.columnResizeMode === 'expand') {\r\n            state.tableWidth = this.scrollable ? DomHandler.findSingle(this.containerViewChild.nativeElement, '.p-datatable-scrollable-header-table').style.width :\r\n                                                DomHandler.getOuterWidth(this.tableViewChild.nativeElement) + 'px';\r\n        }\r\n    }\r\n\r\n    restoreColumnWidths() {\r\n        if (this.columnWidthsState) {\r\n            let widths = this.columnWidthsState.split(',');\r\n\r\n            if (this.columnResizeMode === 'expand' && this.tableWidthState) {\r\n                if (this.scrollable) {\r\n                    this.setScrollableItemsWidthOnExpandResize(null, this.tableWidthState, 0);\r\n                }\r\n                else {\r\n                    this.tableViewChild.nativeElement.style.width = this.tableWidthState;\r\n                    this.containerViewChild.nativeElement.style.width = this.tableWidthState;\r\n                }\r\n            }\r\n\r\n            if (this.scrollable) {\r\n                let headerCols = DomHandler.find(this.containerViewChild.nativeElement, '.p-datatable-scrollable-header-table > colgroup > col');\r\n                let bodyCols = DomHandler.find(this.containerViewChild.nativeElement, '.p-datatable-scrollable-body table > colgroup > col');\r\n\r\n                headerCols.map((col, index) => col.style.width = widths[index] + 'px');\r\n                bodyCols.map((col, index) => col.style.width = widths[index] + 'px');\r\n            }\r\n            else {\r\n                let headers = DomHandler.find(this.tableViewChild.nativeElement, '.p-datatable-thead > tr:first-child > th');\r\n                headers.map((header, index) => header.style.width = widths[index] + 'px');\r\n            }\r\n        }\r\n    }\r\n\r\n    saveColumnOrder(state) {\r\n        if (this.columns) {\r\n            let columnOrder: string[] = [];\r\n            this.columns.map(column => {\r\n                columnOrder.push(column.field||column.key)\r\n            });\r\n\r\n            state.columnOrder = columnOrder;\r\n        }\r\n    }\r\n\r\n    restoreColumnOrder() {\r\n        const storage = this.getStorage();\r\n        const stateString = storage.getItem(this.stateKey);\r\n        if (stateString) {\r\n            let state: TableState = JSON.parse(stateString);\r\n            let columnOrder = state.columnOrder;\r\n            if (columnOrder) {\r\n                let reorderedColumns = [];\r\n                columnOrder.map(key => reorderedColumns.push(this.findColumnByKey(key)));\r\n                this.columnOrderStateRestored = true;\r\n                this.columns = reorderedColumns;\r\n            }\r\n        }\r\n    }\r\n\r\n    findColumnByKey(key) {\r\n        if (this.columns) {\r\n            for (let col of this.columns) {\r\n                if (col.key === key || col.field === key)\r\n                    return col;\r\n                else\r\n                    continue;\r\n            }\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.unbindDocumentEditListener();\r\n        this.editingCell = null;\r\n        this.initialized = null;\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: '[pTableBody]',\r\n    template: `\r\n        <ng-container *ngIf=\"!dt.expandedRowTemplate && !dt.virtualScroll\">\r\n            <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"(dt.paginator && !dt.lazy) ? ((dt.filteredValue||dt.value) | slice:dt.first:(dt.first + dt.rows)) : (dt.filteredValue||dt.value)\" [ngForTrackBy]=\"dt.rowTrackBy\">\r\n                <ng-container *ngTemplateOutlet=\"template; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns, editing: (dt.editMode === 'row' && dt.isRowEditing(rowData))}\"></ng-container>\r\n            </ng-template>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!dt.expandedRowTemplate && dt.virtualScroll\">\r\n            <ng-template cdkVirtualFor let-rowData let-rowIndex=\"index\" [cdkVirtualForOf]=\"dt.filteredValue||dt.value\" [cdkVirtualForTrackBy]=\"dt.rowTrackBy\" [cdkVirtualForTemplateCacheSize]=\"0\">\r\n                <ng-container *ngTemplateOutlet=\"rowData ? template: dt.loadingBodyTemplate; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns, editing: (dt.editMode === 'row' && dt.isRowEditing(rowData))}\"></ng-container>\r\n            </ng-template>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"dt.expandedRowTemplate\">\r\n            <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"(dt.paginator && !dt.lazy) ? ((dt.filteredValue||dt.value) | slice:dt.first:(dt.first + dt.rows)) : (dt.filteredValue||dt.value)\" [ngForTrackBy]=\"dt.rowTrackBy\">\r\n                <ng-container *ngTemplateOutlet=\"template; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns, expanded: dt.isRowExpanded(rowData), editing: (dt.editMode === 'row' && dt.isRowEditing(rowData))}\"></ng-container>\r\n                <ng-container *ngIf=\"dt.isRowExpanded(rowData)\">\r\n                    <ng-container *ngTemplateOutlet=\"dt.expandedRowTemplate; context: {$implicit: rowData, rowIndex: dt.paginator ? (dt.first + rowIndex) : rowIndex, columns: columns}\"></ng-container>\r\n                </ng-container>\r\n            </ng-template>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"dt.loading\">\r\n            <ng-container *ngTemplateOutlet=\"dt.loadingBodyTemplate; context: {$implicit: columns, frozen: frozen}\"></ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"dt.isEmpty() && !dt.loading\">\r\n            <ng-container *ngTemplateOutlet=\"dt.emptyMessageTemplate; context: {$implicit: columns, frozen: frozen}\"></ng-container>\r\n        </ng-container>\r\n    `,\r\n    changeDetection: ChangeDetectionStrategy.Default,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class TableBody implements OnDestroy {\r\n\r\n    @Input(\"pTableBody\") columns: any[];\r\n\r\n    @Input(\"pTableBodyTemplate\") template: TemplateRef<any>;\r\n\r\n    @Input() frozen: boolean;\r\n\r\n    subscription: Subscription;\r\n\r\n    constructor(public dt: Table, public tableService: TableService, public cd: ChangeDetectorRef) {\r\n        this.subscription = this.dt.tableService.valueSource$.subscribe(() => {\r\n            if (this.dt.virtualScroll) {\r\n                this.cd.detectChanges();\r\n            }\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: '[pScrollableView]',\r\n    template: `\r\n        <div #scrollHeader class=\"p-datatable-scrollable-header\">\r\n            <div #scrollHeaderBox class=\"p-datatable-scrollable-header-box\">\r\n                <table class=\"p-datatable-scrollable-header-table\" [ngClass]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\r\n                    <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\r\n                    <thead class=\"p-datatable-thead\">\r\n                        <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenHeaderTemplate||dt.headerTemplate : dt.headerTemplate; context {$implicit: columns}\"></ng-container>\r\n                    </thead>\r\n                    <tbody class=\"p-datatable-tbody\">\r\n                        <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"dt.frozenValue\" [ngForTrackBy]=\"dt.rowTrackBy\">\r\n                            <ng-container *ngTemplateOutlet=\"dt.frozenRowsTemplate; context: {$implicit: rowData, rowIndex: rowIndex, columns: columns}\"></ng-container>\r\n                        </ng-template>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n        <ng-container *ngIf=\"!dt.virtualScroll; else virtualScrollTemplate\">\r\n            <div #scrollBody class=\"p-datatable-scrollable-body\" [ngStyle]=\"{'max-height': dt.scrollHeight !== 'flex' ? scrollHeight : undefined, 'overflow-y': !frozen && dt.scrollHeight ? 'scroll' : undefined}\">\r\n                <table #scrollTable [class]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\r\n                    <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\r\n                    <tbody class=\"p-datatable-tbody\" [pTableBody]=\"columns\" [pTableBodyTemplate]=\"frozen ? dt.frozenBodyTemplate||dt.bodyTemplate : dt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\r\n                </table>\r\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\r\n            </div>\r\n        </ng-container>\r\n        <ng-template #virtualScrollTemplate>\r\n            <cdk-virtual-scroll-viewport [itemSize]=\"dt.virtualRowHeight\" [style.height]=\"dt.scrollHeight !== 'flex' ? scrollHeight : undefined\"\r\n                    [minBufferPx]=\"dt.minBufferPx\" [maxBufferPx]=\"dt.maxBufferPx\" (scrolledIndexChange)=\"onScrollIndexChange($event)\" class=\"p-datatable-virtual-scrollable-body\">\r\n                <table #scrollTable [class]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\r\n                    <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\r\n                    <tbody class=\"p-datatable-tbody\" [pTableBody]=\"columns\" [pTableBodyTemplate]=\"frozen ? dt.frozenBodyTemplate||dt.bodyTemplate : dt.bodyTemplate\" [frozen]=\"frozen\"></tbody>\r\n                </table>\r\n                <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\r\n            </cdk-virtual-scroll-viewport>\r\n        </ng-template>\r\n        <div #scrollFooter class=\"p-datatable-scrollable-footer\">\r\n            <div #scrollFooterBox class=\"p-datatable-scrollable-footer-box\">\r\n                <table class=\"p-datatable-scrollable-footer-table\" [ngClass]=\"dt.tableStyleClass\" [ngStyle]=\"dt.tableStyle\">\r\n                    <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\r\n                    <tfoot class=\"p-datatable-tfoot\">\r\n                        <ng-container *ngTemplateOutlet=\"frozen ? dt.frozenFooterTemplate||dt.footerTemplate : dt.footerTemplate; context {$implicit: columns}\"></ng-container>\r\n                    </tfoot>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    `,\r\n    changeDetection: ChangeDetectionStrategy.Default,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class ScrollableView implements AfterViewInit,OnDestroy {\r\n\r\n    @Input(\"pScrollableView\") columns: any[];\r\n\r\n    @Input() frozen: boolean;\r\n\r\n    @ViewChild('scrollHeader') scrollHeaderViewChild: ElementRef;\r\n\r\n    @ViewChild('scrollHeaderBox') scrollHeaderBoxViewChild: ElementRef;\r\n\r\n    @ViewChild('scrollBody') scrollBodyViewChild: ElementRef;\r\n\r\n    @ViewChild('scrollTable') scrollTableViewChild: ElementRef;\r\n\r\n    @ViewChild('scrollFooter') scrollFooterViewChild: ElementRef;\r\n\r\n    @ViewChild('scrollFooterBox') scrollFooterBoxViewChild: ElementRef;\r\n\r\n    @ViewChild('scrollableAligner') scrollableAlignerViewChild: ElementRef;\r\n\r\n    @ViewChild(CdkVirtualScrollViewport) virtualScrollBody: CdkVirtualScrollViewport;\r\n\r\n    headerScrollListener: any;\r\n\r\n    bodyScrollListener: any;\r\n\r\n    footerScrollListener: any;\r\n\r\n    frozenSiblingBody: HTMLDivElement;\r\n\r\n    preventBodyScrollPropagation: boolean;\r\n\r\n    loadedPages: number[] = [];\r\n\r\n    _scrollHeight: string;\r\n\r\n    @Input() get scrollHeight(): string {\r\n        return this._scrollHeight;\r\n    }\r\n    set scrollHeight(val: string) {\r\n        this._scrollHeight = val;\r\n        if (val != null && (val.includes('%') || val.includes('calc'))) {\r\n            console.log('Percentage scroll height calculation is removed in favor of the more performant CSS based flex mode, use scrollHeight=\"flex\" instead.')\r\n        }\r\n\r\n        if (this.dt.virtualScroll && this.virtualScrollBody) {\r\n            this.virtualScrollBody.checkViewportSize();\r\n        }\r\n    }\r\n\r\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) {}\r\n\r\n    ngAfterViewInit() {\r\n        if (!this.frozen) {\r\n            if (this.dt.frozenColumns || this.dt.frozenBodyTemplate) {\r\n                DomHandler.addClass(this.el.nativeElement, 'p-datatable-unfrozen-view');\r\n            }\r\n\r\n            let frozenView = this.el.nativeElement.previousElementSibling;\r\n            if (frozenView) {\r\n                if (this.dt.virtualScroll)\r\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-datatable-virtual-scrollable-body');\r\n                else\r\n                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, '.p-datatable-scrollable-body');\r\n            }\r\n\r\n            let scrollBarWidth = DomHandler.calculateScrollbarWidth();\r\n            this.scrollHeaderBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\r\n\r\n            if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {\r\n                this.scrollFooterBoxViewChild.nativeElement.style.paddingRight = scrollBarWidth + 'px';\r\n            }\r\n        }\r\n        else {\r\n            if (this.scrollableAlignerViewChild && this.scrollableAlignerViewChild.nativeElement) {\r\n                this.scrollableAlignerViewChild.nativeElement.style.height = DomHandler.calculateScrollbarHeight() + 'px';\r\n            }\r\n        }\r\n\r\n        this.bindEvents();\r\n    }\r\n\r\n    bindEvents() {\r\n        this.zone.runOutsideAngular(() => {\r\n            if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\r\n                this.headerScrollListener = this.onHeaderScroll.bind(this);\r\n                this.scrollHeaderViewChild.nativeElement.addEventListener('scroll', this.headerScrollListener);\r\n            }\r\n\r\n            if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\r\n                this.footerScrollListener = this.onFooterScroll.bind(this);\r\n                this.scrollFooterViewChild.nativeElement.addEventListener('scroll', this.footerScrollListener);\r\n            }\r\n\r\n            if (!this.frozen) {\r\n                this.bodyScrollListener = this.onBodyScroll.bind(this);\r\n\r\n                if (this.dt.virtualScroll)\r\n                    this.virtualScrollBody.getElementRef().nativeElement.addEventListener('scroll', this.bodyScrollListener);\r\n                else\r\n                    this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);\r\n            }\r\n        });\r\n    }\r\n\r\n    unbindEvents() {\r\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\r\n            this.scrollHeaderViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);\r\n        }\r\n\r\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\r\n            this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);\r\n        }\r\n\r\n        if (this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {\r\n            this.scrollBodyViewChild.nativeElement.removeEventListener('scroll', this.bodyScrollListener);\r\n        }\r\n\r\n        if (this.virtualScrollBody && this.virtualScrollBody.getElementRef()) {\r\n            this.virtualScrollBody.getElementRef().nativeElement.removeEventListener('scroll', this.bodyScrollListener);\r\n        }\r\n    }\r\n\r\n    onHeaderScroll() {\r\n        const scrollLeft = this.scrollHeaderViewChild.nativeElement.scrollLeft;\r\n\r\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\r\n\r\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\r\n            this.scrollFooterViewChild.nativeElement.scrollLeft = scrollLeft;\r\n        }\r\n\r\n        this.preventBodyScrollPropagation = true;\r\n    }\r\n\r\n    onFooterScroll() {\r\n        const scrollLeft = this.scrollFooterViewChild.nativeElement.scrollLeft;\r\n        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;\r\n\r\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\r\n            this.scrollHeaderViewChild.nativeElement.scrollLeft = scrollLeft;\r\n        }\r\n\r\n        this.preventBodyScrollPropagation = true;\r\n    }\r\n\r\n    onBodyScroll(event) {\r\n        if (this.preventBodyScrollPropagation) {\r\n            this.preventBodyScrollPropagation = false;\r\n            return;\r\n        }\r\n\r\n        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {\r\n            this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\r\n        }\r\n\r\n        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {\r\n            this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -1 * event.target.scrollLeft + 'px';\r\n        }\r\n\r\n        if (this.frozenSiblingBody) {\r\n            this.frozenSiblingBody.scrollTop = event.target.scrollTop;\r\n        }\r\n    }\r\n\r\n    onScrollIndexChange(index: number) {\r\n        if (this.dt.lazy) {\r\n            let pageRange = this.createPageRange(Math.floor(index / this.dt.rows));\r\n            pageRange.forEach(page => this.loadPage(page));\r\n        }\r\n    }\r\n\r\n    createPageRange(page: number) {\r\n        let range: number[] = [];\r\n\r\n        if (page !== 0) {\r\n            range.push(page - 1);\r\n        }\r\n        range.push(page);\r\n        if (page !== (this.getPageCount() - 1)) {\r\n            range.push(page + 1);\r\n        }\r\n\r\n        return range;\r\n    }\r\n\r\n    loadPage(page: number) {\r\n        if (!this.loadedPages.includes(page)) {\r\n            this.dt.onLazyLoad.emit({\r\n                first: this.dt.rows * page,\r\n                rows: this.dt.rows,\r\n                sortField: this.dt.sortField,\r\n                sortOrder: this.dt.sortOrder,\r\n                filters: this.dt.filters,\r\n                globalFilter: this.dt.filters && this.dt.filters['global'] ? this.dt.filters['global'].value : null,\r\n                multiSortMeta: this.dt.multiSortMeta\r\n            });\r\n            this.loadedPages.push(page);\r\n        }\r\n    }\r\n\r\n    clearCache() {\r\n        this.loadedPages = [];\r\n    }\r\n\r\n    getPageCount() {\r\n        let dataToRender = this.dt.filteredValue || this.dt.value;\r\n        let dataLength = dataToRender ? dataToRender.length: 0;\r\n        return Math.ceil(dataLength / this.dt.rows);\r\n    }\r\n\r\n    scrollToVirtualIndex(index: number): void {\r\n        if (this.virtualScrollBody) {\r\n            this.virtualScrollBody.scrollToIndex(index);\r\n        }\r\n    }\r\n\r\n    scrollTo(options): void {\r\n        if (this.virtualScrollBody) {\r\n            this.virtualScrollBody.scrollTo(options);\r\n        }\r\n        else {\r\n            if (this.scrollBodyViewChild.nativeElement.scrollTo) {\r\n                this.scrollBodyViewChild.nativeElement.scrollTo(options);\r\n            }\r\n            else {\r\n                this.scrollBodyViewChild.nativeElement.scrollLeft = options.left;\r\n                this.scrollBodyViewChild.nativeElement.scrollTop = options.top;\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.unbindEvents();\r\n        this.frozenSiblingBody = null;\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[pSortableColumn]',\r\n    host: {\r\n        '[class.p-sortable-column]': 'isEnabled()',\r\n        '[class.p-highlight]': 'sorted',\r\n        '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\r\n        '[attr.role]': '\"columnheader\"',\r\n        '[attr.aria-sort]': 'sortOrder'\r\n    }\r\n})\r\nexport class SortableColumn implements OnInit, OnDestroy {\r\n\r\n    @Input(\"pSortableColumn\") field: string;\r\n\r\n    @Input() pSortableColumnDisabled: boolean;\r\n\r\n    sorted: boolean;\r\n\r\n    sortOrder: string;\r\n\r\n    subscription: Subscription;\r\n\r\n    constructor(public dt: Table) {\r\n        if (this.isEnabled()) {\r\n            this.subscription = this.dt.tableService.sortSource$.subscribe(sortMeta => {\r\n                this.updateSortState();\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.isEnabled()) {\r\n            this.updateSortState();\r\n        }\r\n    }\r\n\r\n    updateSortState() {\r\n        this.sorted = this.dt.isSorted(this.field);\r\n        this.sortOrder = this.sorted ? (this.dt.sortOrder === 1 ? 'ascending' : 'descending') : 'none';\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(event: MouseEvent) {\r\n        if (this.isEnabled()) {\r\n            this.updateSortState();\r\n            this.dt.sort({\r\n                originalEvent: event,\r\n                field: this.field\r\n            });\r\n\r\n            DomHandler.clearSelection();\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown.enter', ['$event'])\r\n    onEnterKey(event: MouseEvent) {\r\n        this.onClick(event);\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.pSortableColumnDisabled !== true;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n@Component({\r\n    selector: 'p-sortIcon',\r\n    template: `\r\n        <i class=\"p-sortable-column-icon pi pi-fw\" [ngClass]=\"{'pi-sort-amount-up-alt': sortOrder === 1, 'pi-sort-amount-down': sortOrder === -1, 'pi-sort-alt': sortOrder === 0}\"></i>\r\n    `,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class SortIcon implements OnInit, OnDestroy {\r\n\r\n    @Input() field: string;\r\n\r\n    subscription: Subscription;\r\n\r\n    sortOrder: number;\r\n\r\n    constructor(public dt: Table, public cd: ChangeDetectorRef) {\r\n        this.subscription = this.dt.tableService.sortSource$.subscribe(sortMeta => {\r\n            this.updateSortState();\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.updateSortState();\r\n    }\r\n\r\n    onClick(event){\r\n        event.preventDefault();\r\n    }\r\n\r\n    updateSortState() {\r\n        if (this.dt.sortMode === 'single') {\r\n            this.sortOrder = this.dt.isSorted(this.field) ? this.dt.sortOrder : 0;\r\n        }\r\n        else if (this.dt.sortMode === 'multiple') {\r\n            let sortMeta = this.dt.getSortMeta(this.field);\r\n            this.sortOrder = sortMeta ? sortMeta.order: 0;\r\n        }\r\n\r\n        this.cd.markForCheck();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[pSelectableRow]',\r\n    host: {\r\n        '[class.p-selectable-row]': 'isEnabled()',\r\n        '[class.p-highlight]': 'selected',\r\n        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\r\n    }\r\n})\r\nexport class SelectableRow implements OnInit, OnDestroy {\r\n\r\n    @Input(\"pSelectableRow\") data: any;\r\n\r\n    @Input(\"pSelectableRowIndex\") index: number;\r\n\r\n    @Input() pSelectableRowDisabled: boolean;\r\n\r\n    selected: boolean;\r\n\r\n    subscription: Subscription;\r\n\r\n    constructor(public dt: Table, public tableService: TableService) {\r\n        if (this.isEnabled()) {\r\n            this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\r\n                this.selected = this.dt.isSelected(this.data);\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.isEnabled()) {\r\n            this.selected = this.dt.isSelected(this.data);\r\n        }\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(event: Event) {\r\n        if (this.isEnabled()) {\r\n            this.dt.handleRowClick({\r\n                originalEvent: event,\r\n                rowData: this.data,\r\n                rowIndex: this.index\r\n            });\r\n        }\r\n    }\r\n\r\n    @HostListener('touchend', ['$event'])\r\n    onTouchEnd(event: Event) {\r\n        if (this.isEnabled()) {\r\n            this.dt.handleRowTouchEnd(event);\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown.arrowdown', ['$event'])\r\n    onArrowDownKeyDown(event: KeyboardEvent) {\r\n        if (!this.isEnabled()) {\r\n            return;\r\n        }\r\n\r\n        const row = <HTMLTableRowElement>event.currentTarget;\r\n        const nextRow = this.findNextSelectableRow(row);\r\n\r\n        if (nextRow) {\r\n            nextRow.focus();\r\n        }\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    @HostListener('keydown.arrowup', ['$event'])\r\n    onArrowUpKeyDown(event: KeyboardEvent) {\r\n        if (!this.isEnabled()) {\r\n            return;\r\n        }\r\n\r\n        const row = <HTMLTableRowElement>event.currentTarget;\r\n        const prevRow = this.findPrevSelectableRow(row);\r\n\r\n        if (prevRow) {\r\n            prevRow.focus();\r\n        }\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    @HostListener('keydown.enter', ['$event'])\r\n    @HostListener('keydown.shift.enter', ['$event'])\r\n    @HostListener('keydown.meta.enter', ['$event'])\r\n    onEnterKeyDown(event: KeyboardEvent) {\r\n        if (!this.isEnabled()) {\r\n            return;\r\n        }\r\n\r\n        this.dt.handleRowClick({\r\n            originalEvent: event,\r\n            rowData: this.data,\r\n            rowIndex: this.index\r\n        });\r\n    }\r\n\r\n    findNextSelectableRow(row: HTMLTableRowElement): HTMLTableRowElement {\r\n        let nextRow = <HTMLTableRowElement> row.nextElementSibling;\r\n        if (nextRow) {\r\n            if (DomHandler.hasClass(nextRow, 'p-selectable-row'))\r\n                return nextRow;\r\n            else\r\n                return this.findNextSelectableRow(nextRow);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    findPrevSelectableRow(row: HTMLTableRowElement): HTMLTableRowElement {\r\n        let prevRow = <HTMLTableRowElement> row.previousElementSibling;\r\n        if (prevRow) {\r\n            if (DomHandler.hasClass(prevRow, 'p-selectable-row'))\r\n                return prevRow;\r\n            else\r\n                return this.findPrevSelectableRow(prevRow);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.pSelectableRowDisabled !== true;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n}\r\n\r\n@Directive({\r\n    selector: '[pSelectableRowDblClick]',\r\n    host: {\r\n        '[class.p-selectable-row]': 'isEnabled()',\r\n        '[class.p-highlight]': 'selected'\r\n    }\r\n})\r\nexport class SelectableRowDblClick implements OnInit, OnDestroy {\r\n\r\n    @Input(\"pSelectableRowDblClick\") data: any;\r\n\r\n    @Input(\"pSelectableRowIndex\") index: number;\r\n\r\n    @Input() pSelectableRowDisabled: boolean;\r\n\r\n    selected: boolean;\r\n\r\n    subscription: Subscription;\r\n\r\n    constructor(public dt: Table, public tableService: TableService) {\r\n        if (this.isEnabled()) {\r\n            this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\r\n                this.selected = this.dt.isSelected(this.data);\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.isEnabled()) {\r\n            this.selected = this.dt.isSelected(this.data);\r\n        }\r\n    }\r\n\r\n    @HostListener('dblclick', ['$event'])\r\n    onClick(event: Event) {\r\n        if (this.isEnabled()) {\r\n            this.dt.handleRowClick({\r\n                originalEvent: event,\r\n                rowData: this.data,\r\n                rowIndex: this.index\r\n            });\r\n        }\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.pSelectableRowDisabled !== true;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n}\r\n\r\n@Directive({\r\n    selector: '[pContextMenuRow]',\r\n    host: {\r\n        '[class.p-highlight-contextmenu]': 'selected',\r\n        '[attr.tabindex]': 'isEnabled() ? 0 : undefined'\r\n    }\r\n})\r\nexport class ContextMenuRow {\r\n\r\n    @Input(\"pContextMenuRow\") data: any;\r\n\r\n    @Input(\"pContextMenuRowIndex\") index: number;\r\n\r\n    @Input() pContextMenuRowDisabled: boolean;\r\n\r\n    selected: boolean;\r\n\r\n    subscription: Subscription;\r\n\r\n    constructor(public dt: Table, public tableService: TableService, private el: ElementRef) {\r\n        if (this.isEnabled()) {\r\n            this.subscription = this.dt.tableService.contextMenuSource$.subscribe((data) => {\r\n                this.selected = this.dt.equals(this.data, data);\r\n            });\r\n        }\r\n    }\r\n\r\n    @HostListener('contextmenu', ['$event'])\r\n    onContextMenu(event: Event) {\r\n        if (this.isEnabled()) {\r\n            this.dt.handleRowRightClick({\r\n                originalEvent: event,\r\n                rowData: this.data,\r\n                rowIndex: this.index\r\n            });\r\n\r\n            this.el.nativeElement.focus();\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.pContextMenuRowDisabled !== true;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n}\r\n\r\n@Directive({\r\n    selector: '[pRowToggler]'\r\n})\r\nexport class RowToggler {\r\n\r\n    @Input('pRowToggler') data: any;\r\n\r\n    @Input() pRowTogglerDisabled: boolean;\r\n\r\n    constructor(public dt: Table) { }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(event: Event) {\r\n        if (this.isEnabled()) {\r\n            this.dt.toggleRow(this.data, event);\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.pRowTogglerDisabled !== true;\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[pResizableColumn]'\r\n})\r\nexport class ResizableColumn implements AfterViewInit, OnDestroy {\r\n\r\n    @Input() pResizableColumnDisabled: boolean;\r\n\r\n    resizer: HTMLSpanElement;\r\n\r\n    resizerMouseDownListener: any;\r\n\r\n    documentMouseMoveListener: any;\r\n\r\n    documentMouseUpListener: any;\r\n\r\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) { }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.isEnabled()) {\r\n            DomHandler.addClass(this.el.nativeElement, 'p-resizable-column');\r\n            this.resizer = document.createElement('span');\r\n            this.resizer.className = 'p-column-resizer';\r\n            this.el.nativeElement.appendChild(this.resizer);\r\n\r\n            this.zone.runOutsideAngular(() => {\r\n                this.resizerMouseDownListener = this.onMouseDown.bind(this);\r\n                this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\r\n            });\r\n        }\r\n    }\r\n\r\n    bindDocumentEvents() {\r\n        this.zone.runOutsideAngular(() => {\r\n            this.documentMouseMoveListener = this.onDocumentMouseMove.bind(this);\r\n            document.addEventListener('mousemove', this.documentMouseMoveListener);\r\n\r\n            this.documentMouseUpListener = this.onDocumentMouseUp.bind(this);\r\n            document.addEventListener('mouseup', this.documentMouseUpListener);\r\n        });\r\n    }\r\n\r\n    unbindDocumentEvents() {\r\n        if (this.documentMouseMoveListener) {\r\n            document.removeEventListener('mousemove', this.documentMouseMoveListener);\r\n            this.documentMouseMoveListener = null;\r\n        }\r\n\r\n        if (this.documentMouseUpListener) {\r\n            document.removeEventListener('mouseup', this.documentMouseUpListener);\r\n            this.documentMouseUpListener = null;\r\n        }\r\n    }\r\n\r\n    onMouseDown(event: MouseEvent) {\r\n        if (event.which === 1) {\r\n            this.dt.onColumnResizeBegin(event);\r\n            this.bindDocumentEvents();\r\n        }\r\n    }\r\n\r\n    onDocumentMouseMove(event: MouseEvent) {\r\n        this.dt.onColumnResize(event);\r\n    }\r\n\r\n    onDocumentMouseUp(event: MouseEvent) {\r\n        this.dt.onColumnResizeEnd(event, this.el.nativeElement);\r\n        this.unbindDocumentEvents();\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.pResizableColumnDisabled !== true;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.resizerMouseDownListener) {\r\n            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\r\n        }\r\n\r\n        this.unbindDocumentEvents();\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[pReorderableColumn]'\r\n})\r\nexport class ReorderableColumn implements AfterViewInit, OnDestroy {\r\n\r\n    @Input() pReorderableColumnDisabled: boolean;\r\n\r\n    dragStartListener: any;\r\n\r\n    dragOverListener: any;\r\n\r\n    dragEnterListener: any;\r\n\r\n    dragLeaveListener: any;\r\n\r\n    mouseDownListener: any;\r\n\r\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) { }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.isEnabled()) {\r\n            this.bindEvents();\r\n        }\r\n    }\r\n\r\n    bindEvents() {\r\n        this.zone.runOutsideAngular(() => {\r\n            this.mouseDownListener = this.onMouseDown.bind(this);\r\n            this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\r\n\r\n            this.dragStartListener = this.onDragStart.bind(this);\r\n            this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\r\n\r\n            this.dragOverListener = this.onDragEnter.bind(this);\r\n            this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\r\n\r\n            this.dragEnterListener = this.onDragEnter.bind(this);\r\n            this.el.nativeElement.addEventListener('dragenter', this.dragEnterListener);\r\n\r\n            this.dragLeaveListener = this.onDragLeave.bind(this);\r\n            this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\r\n        });\r\n    }\r\n\r\n    unbindEvents() {\r\n        if (this.mouseDownListener) {\r\n            document.removeEventListener('mousedown', this.mouseDownListener);\r\n            this.mouseDownListener = null;\r\n        }\r\n\r\n        if (this.dragOverListener) {\r\n            document.removeEventListener('dragover', this.dragOverListener);\r\n            this.dragOverListener = null;\r\n        }\r\n\r\n        if (this.dragEnterListener) {\r\n            document.removeEventListener('dragenter', this.dragEnterListener);\r\n            this.dragEnterListener = null;\r\n        }\r\n\r\n        if (this.dragEnterListener) {\r\n            document.removeEventListener('dragenter', this.dragEnterListener);\r\n            this.dragEnterListener = null;\r\n        }\r\n\r\n        if (this.dragLeaveListener) {\r\n            document.removeEventListener('dragleave', this.dragLeaveListener);\r\n            this.dragLeaveListener = null;\r\n        }\r\n    }\r\n\r\n    onMouseDown(event) {\r\n        if (event.target.nodeName === 'INPUT' || event.target.nodeName === 'TEXTAREA' || DomHandler.hasClass(event.target, 'p-column-resizer'))\r\n            this.el.nativeElement.draggable = false;\r\n        else\r\n            this.el.nativeElement.draggable = true;\r\n    }\r\n\r\n    onDragStart(event) {\r\n        this.dt.onColumnDragStart(event, this.el.nativeElement);\r\n    }\r\n\r\n    onDragOver(event) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    onDragEnter(event) {\r\n        this.dt.onColumnDragEnter(event, this.el.nativeElement);\r\n    }\r\n\r\n    onDragLeave(event) {\r\n        this.dt.onColumnDragLeave(event);\r\n    }\r\n\r\n    @HostListener('drop', ['$event'])\r\n    onDrop(event) {\r\n        if (this.isEnabled()) {\r\n            this.dt.onColumnDrop(event, this.el.nativeElement);\r\n        }\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.pReorderableColumnDisabled !== true;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.unbindEvents();\r\n    }\r\n\r\n}\r\n\r\n@Directive({\r\n    selector: '[pEditableColumn]'\r\n})\r\nexport class EditableColumn implements AfterViewInit {\r\n\r\n    @Input(\"pEditableColumn\") data: any;\r\n\r\n    @Input(\"pEditableColumnField\") field: any;\r\n\r\n    @Input(\"pEditableColumnRowIndex\") rowIndex: number;\r\n\r\n    @Input() pEditableColumnDisabled: boolean;\r\n\r\n    @Input() pFocusCellSelector: string;\r\n\r\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) {}\r\n\r\n    ngAfterViewInit() {\r\n        if (this.isEnabled()) {\r\n            DomHandler.addClass(this.el.nativeElement, 'p-editable-column');\r\n        }\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(event: MouseEvent) {\r\n        if (this.isEnabled()) {\r\n            this.dt.editingCellClick = true;\r\n\r\n            if (this.dt.editingCell) {\r\n                if (this.dt.editingCell !== this.el.nativeElement) {\r\n                    if (!this.dt.isEditingCellValid()) {\r\n                        return;\r\n                    }\r\n\r\n                    this.closeEditingCell(true, event);\r\n                    this.openCell();\r\n                }\r\n            }\r\n            else {\r\n                this.openCell();\r\n            }\r\n        }\r\n    }\r\n\r\n    openCell() {\r\n        this.dt.updateEditingCell(this.el.nativeElement, this.data, this.field, this.rowIndex);\r\n        DomHandler.addClass(this.el.nativeElement, 'p-cell-editing');\r\n        this.dt.onEditInit.emit({field: this.field, data: this.data, index: this.rowIndex});\r\n        this.zone.runOutsideAngular(() => {\r\n            setTimeout(() => {\r\n                let focusCellSelector = this.pFocusCellSelector || 'input, textarea, select';\r\n                let focusableElement = DomHandler.findSingle(this.el.nativeElement, focusCellSelector);\r\n\r\n                if (focusableElement) {\r\n                    focusableElement.focus();\r\n                }\r\n            }, 50);\r\n        });\r\n    }\r\n\r\n    closeEditingCell(completed, event) {\r\n        if (completed)\r\n            this.dt.onEditComplete.emit({field: this.dt.editingCellField, data: this.dt.editingCellData, originalEvent: event, index: this.rowIndex});\r\n        else\r\n            this.dt.onEditCancel.emit({field: this.dt.editingCellField, data: this.dt.editingCellData, originalEvent: event, index: this.rowIndex});\r\n\r\n        DomHandler.removeClass(this.dt.editingCell, 'p-cell-editing');\r\n        this.dt.editingCell = null;\r\n        this.dt.editingCellData = null;\r\n        this.dt.editingCellField = null;\r\n        this.dt.unbindDocumentEditListener();\r\n    }\r\n\r\n    @HostListener('keydown.enter', ['$event'])\r\n    onEnterKeyDown(event: KeyboardEvent) {\r\n        if (this.isEnabled()) {\r\n            if (this.dt.isEditingCellValid()) {\r\n                this.closeEditingCell(true, event);\r\n            }\r\n\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown.escape', ['$event'])\r\n    onEscapeKeyDown(event: KeyboardEvent) {\r\n        if (this.isEnabled()) {\r\n            if (this.dt.isEditingCellValid()) {\r\n                this.closeEditingCell(false, event);\r\n            }\r\n\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    @HostListener('keydown.tab', ['$event'])\r\n    @HostListener('keydown.shift.tab', ['$event'])\r\n    @HostListener('keydown.meta.tab', ['$event'])\r\n    onShiftKeyDown(event: KeyboardEvent) {\r\n        if (this.isEnabled()) {\r\n            if (event.shiftKey)\r\n                this.moveToPreviousCell(event);\r\n            else{\r\n                this.moveToNextCell(event);\r\n            }\r\n        }\r\n    }\r\n\r\n    findCell(element) {\r\n        if (element) {\r\n            let cell = element;\r\n            while (cell && !DomHandler.hasClass(cell, 'p-cell-editing')) {\r\n                cell = cell.parentElement;\r\n            }\r\n\r\n            return cell;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    moveToPreviousCell(event: KeyboardEvent) {\r\n        let currentCell = this.findCell(event.target);\r\n        if (currentCell) {\r\n            let targetCell = this.findPreviousEditableColumn(currentCell);\r\n\r\n            if (targetCell) {\r\n                if (this.dt.isEditingCellValid()) {\r\n                    this.closeEditingCell(true, event);\r\n                }\r\n\r\n                DomHandler.invokeElementMethod(event.target, 'blur');\r\n                DomHandler.invokeElementMethod(targetCell, 'click');\r\n                event.preventDefault();\r\n            }\r\n        }\r\n    }\r\n\r\n    moveToNextCell(event: KeyboardEvent) {\r\n        let currentCell = this.findCell(event.target);\r\n        if (currentCell) {\r\n            let targetCell = this.findNextEditableColumn(currentCell);\r\n\r\n            if (targetCell) {\r\n                if (this.dt.isEditingCellValid()) {\r\n                    this.closeEditingCell(true, event);\r\n                }\r\n\r\n                DomHandler.invokeElementMethod(event.target, 'blur');\r\n                DomHandler.invokeElementMethod(targetCell, 'click');\r\n                event.preventDefault();\r\n            }\r\n        }\r\n    }\r\n\r\n    findPreviousEditableColumn(cell: Element) {\r\n        let prevCell = cell.previousElementSibling;\r\n\r\n        if (!prevCell) {\r\n            let previousRow = cell.parentElement.previousElementSibling;\r\n            if (previousRow) {\r\n                prevCell = previousRow.lastElementChild;\r\n            }\r\n        }\r\n\r\n        if (prevCell) {\r\n            if (DomHandler.hasClass(prevCell, 'p-editable-column'))\r\n                return prevCell;\r\n            else\r\n                return this.findPreviousEditableColumn(prevCell);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    findNextEditableColumn(cell: Element) {\r\n        let nextCell = cell.nextElementSibling;\r\n\r\n        if (!nextCell) {\r\n            let nextRow = cell.parentElement.nextElementSibling;\r\n            if (nextRow) {\r\n                nextCell = nextRow.firstElementChild;\r\n            }\r\n        }\r\n\r\n        if (nextCell) {\r\n            if (DomHandler.hasClass(nextCell, 'p-editable-column'))\r\n                return nextCell;\r\n            else\r\n                return this.findNextEditableColumn(nextCell);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.pEditableColumnDisabled !== true;\r\n    }\r\n\r\n}\r\n\r\n@Directive({\r\n    selector: '[pEditableRow]'\r\n})\r\nexport class EditableRow {\r\n\r\n    @Input(\"pEditableRow\") data: any;\r\n\r\n    @Input() pEditableRowDisabled: boolean;\r\n\r\n    constructor(public el: ElementRef) {}\r\n\r\n    isEnabled() {\r\n        return this.pEditableRowDisabled !== true;\r\n    }\r\n\r\n}\r\n\r\n@Directive({\r\n    selector: '[pInitEditableRow]'\r\n})\r\nexport class InitEditableRow {\r\n\r\n    constructor(public dt: Table, public editableRow: EditableRow) {}\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(event: Event) {\r\n        this.dt.initRowEdit(this.editableRow.data);\r\n        event.preventDefault();\r\n    }\r\n\r\n}\r\n\r\n@Directive({\r\n    selector: '[pSaveEditableRow]'\r\n})\r\nexport class SaveEditableRow {\r\n\r\n    constructor(public dt: Table, public editableRow: EditableRow) {}\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(event: Event) {\r\n        this.dt.saveRowEdit(this.editableRow.data, this.editableRow.el.nativeElement);\r\n        event.preventDefault();\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[pCancelEditableRow]'\r\n})\r\nexport class CancelEditableRow {\r\n\r\n    constructor(public dt: Table, public editableRow: EditableRow) {}\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(event: Event) {\r\n        this.dt.cancelRowEdit(this.editableRow.data);\r\n        event.preventDefault();\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-cellEditor',\r\n    template: `\r\n        <ng-container *ngIf=\"editing\">\r\n            <ng-container *ngTemplateOutlet=\"inputTemplate\"></ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!editing\">\r\n            <ng-container *ngTemplateOutlet=\"outputTemplate\"></ng-container>\r\n        </ng-container>\r\n    `,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class CellEditor implements AfterContentInit {\r\n\r\n    @ContentChildren(PrimeTemplate) templates: QueryList<PrimeTemplate>;\r\n\r\n    inputTemplate: TemplateRef<any>;\r\n\r\n    outputTemplate: TemplateRef<any>;\r\n\r\n    constructor(public dt: Table, @Optional() public editableColumn: EditableColumn, @Optional() public editableRow: EditableRow) { }\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch (item.getType()) {\r\n                case 'input':\r\n                    this.inputTemplate = item.template;\r\n                    break;\r\n\r\n                case 'output':\r\n                    this.outputTemplate = item.template;\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    get editing(): boolean {\r\n        return (this.dt.editingCell && this.editableColumn && this.dt.editingCell === this.editableColumn.el.nativeElement) ||\r\n                (this.editableRow && this.dt.editMode === 'row' && this.dt.isRowEditing(this.editableRow.data));\r\n    }\r\n\r\n}\r\n\r\n@Component({\r\n    selector: 'p-tableRadioButton',\r\n    template: `\r\n        <div class=\"p-radiobutton p-component\" (click)=\"onClick($event)\">\r\n            <div class=\"p-hidden-accessible\">\r\n                <input type=\"radio\" [attr.id]=\"inputId\" [attr.name]=\"name\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\"\r\n                [disabled]=\"disabled\" [attr.aria-label]=\"ariaLabel\">\r\n            </div>\r\n            <div #box [ngClass]=\"{'p-radiobutton-box p-component':true,\r\n                'p-highlight':checked, 'p-disabled':disabled}\" role=\"radio\" [attr.aria-checked]=\"checked\">\r\n                <div class=\"p-radiobutton-icon\"></div>\r\n            </div>\r\n        </div>\r\n    `,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class TableRadioButton  {\r\n\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() value: any;\r\n\r\n    @Input() index: number;\r\n\r\n    @Input() inputId: string;\r\n\r\n    @Input() name: string;\r\n\r\n    @Input() ariaLabel: string;\r\n\r\n    @ViewChild('box') boxViewChild: ElementRef;\r\n\r\n    checked: boolean;\r\n\r\n    subscription: Subscription;\r\n\r\n    constructor(public dt: Table, public tableService: TableService, public cd: ChangeDetectorRef) {\r\n        this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\r\n            this.checked = this.dt.isSelected(this.value);\r\n            this.cd.markForCheck();\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.checked = this.dt.isSelected(this.value);\r\n    }\r\n\r\n    onClick(event: Event) {\r\n        if (!this.disabled) {\r\n            this.dt.toggleRowWithRadio({\r\n                originalEvent: event,\r\n                rowIndex: this.index\r\n            }, this.value);\r\n        }\r\n        DomHandler.clearSelection();\r\n    }\r\n\r\n    onFocus() {\r\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'p-focus');\r\n    }\r\n\r\n    onBlur() {\r\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'p-focus');\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n}\r\n\r\n@Component({\r\n    selector: 'p-tableCheckbox',\r\n    template: `\r\n        <div class=\"p-checkbox p-component\" (click)=\"onClick($event)\">\r\n            <div class=\"p-hidden-accessible\">\r\n                <input type=\"checkbox\" [attr.id]=\"inputId\" [attr.name]=\"name\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [disabled]=\"disabled\"\r\n                [attr.required]=\"required\" [attr.aria-label]=\"ariaLabel\">\r\n            </div>\r\n            <div #box [ngClass]=\"{'p-checkbox-box p-component':true,\r\n                'p-highlight':checked, 'p-disabled':disabled}\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\r\n                <span class=\"p-checkbox-icon\" [ngClass]=\"{'pi pi-check':checked}\"></span>\r\n            </div>\r\n        </div>\r\n    `,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class TableCheckbox  {\r\n\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() value: any;\r\n\r\n    @Input() index: number;\r\n\r\n    @Input() inputId: string;\r\n\r\n    @Input() name: string;\r\n\r\n    @Input() required: boolean;\r\n\r\n    @Input() ariaLabel: string;\r\n\r\n    @ViewChild('box') boxViewChild: ElementRef;\r\n\r\n    checked: boolean;\r\n\r\n    subscription: Subscription;\r\n\r\n    constructor(public dt: Table, public tableService: TableService, public cd: ChangeDetectorRef) {\r\n        this.subscription = this.dt.tableService.selectionSource$.subscribe(() => {\r\n            this.checked = this.dt.isSelected(this.value);\r\n            this.cd.markForCheck();\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.checked = this.dt.isSelected(this.value);\r\n    }\r\n\r\n    onClick(event: Event) {\r\n        if (!this.disabled) {\r\n            this.dt.toggleRowWithCheckbox({\r\n                originalEvent: event,\r\n                rowIndex: this.index\r\n            }, this.value);\r\n        }\r\n        DomHandler.clearSelection();\r\n    }\r\n\r\n    onFocus() {\r\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'p-focus');\r\n    }\r\n\r\n    onBlur() {\r\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'p-focus');\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.subscription) {\r\n            this.subscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n}\r\n\r\n@Component({\r\n    selector: 'p-tableHeaderCheckbox',\r\n    template: `\r\n        <div class=\"p-checkbox p-component\" (click)=\"onClick($event)\">\r\n            <div class=\"p-hidden-accessible\">\r\n                <input #cb type=\"checkbox\" [attr.id]=\"inputId\" [attr.name]=\"name\" [checked]=\"checked\" (focus)=\"onFocus()\" (blur)=\"onBlur()\"\r\n                [disabled]=\"isDisabled()\" [attr.aria-label]=\"ariaLabel\">\r\n            </div>\r\n            <div #box [ngClass]=\"{'p-checkbox-box':true,\r\n                'p-highlight':checked, 'p-disabled': isDisabled()}\" role=\"checkbox\" [attr.aria-checked]=\"checked\">\r\n                <span class=\"p-checkbox-icon\" [ngClass]=\"{'pi pi-check':checked}\"></span>\r\n            </div>\r\n        </div>\r\n    `,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class TableHeaderCheckbox  {\r\n\r\n    @ViewChild('box') boxViewChild: ElementRef;\r\n\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() inputId: string;\r\n\r\n    @Input() name: string;\r\n\r\n    @Input() ariaLabel: string;\r\n\r\n    checked: boolean;\r\n\r\n    selectionChangeSubscription: Subscription;\r\n\r\n    valueChangeSubscription: Subscription;\r\n\r\n    constructor(public dt: Table, public tableService: TableService, public cd: ChangeDetectorRef) {\r\n        this.valueChangeSubscription = this.dt.tableService.valueSource$.subscribe(() => {\r\n            this.checked = this.updateCheckedState();\r\n        });\r\n\r\n        this.selectionChangeSubscription = this.dt.tableService.selectionSource$.subscribe(() => {\r\n            this.checked = this.updateCheckedState();\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.checked = this.updateCheckedState();\r\n    }\r\n\r\n    onClick(event: Event) {\r\n        if (!this.disabled) {\r\n            if (this.dt.value && this.dt.value.length > 0) {\r\n                this.dt.toggleRowsWithCheckbox(event, !this.checked);\r\n            }\r\n        }\r\n\r\n        DomHandler.clearSelection();\r\n    }\r\n\r\n    onFocus() {\r\n        DomHandler.addClass(this.boxViewChild.nativeElement, 'p-focus');\r\n    }\r\n\r\n    onBlur() {\r\n        DomHandler.removeClass(this.boxViewChild.nativeElement, 'p-focus');\r\n    }\r\n\r\n    isDisabled() {\r\n        return this.disabled || !this.dt.value || !this.dt.value.length;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.selectionChangeSubscription) {\r\n            this.selectionChangeSubscription.unsubscribe();\r\n        }\r\n\r\n        if (this.valueChangeSubscription) {\r\n            this.valueChangeSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    updateCheckedState() {\r\n        this.cd.markForCheck();\r\n\r\n        if (this.dt.filteredValue) {\r\n            const val = this.dt.filteredValue;\r\n            return (val && val.length > 0 && this.dt.selection && this.dt.selection.length > 0 && this.isAllFilteredValuesChecked());\r\n        }\r\n        else {\r\n            const val = this.dt.value;\r\n            return (val && val.length > 0 && this.dt.selection && this.dt.selection.length > 0 && this.dt.selection.length === val.length);\r\n        }\r\n    }\r\n\r\n    isAllFilteredValuesChecked() {\r\n        if (!this.dt.filteredValue) {\r\n            return false;\r\n        }\r\n        else {\r\n            for (let rowData of this.dt.filteredValue) {\r\n                if (!this.dt.isSelected(rowData)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n@Directive({\r\n    selector: '[pReorderableRowHandle]'\r\n})\r\nexport class ReorderableRowHandle implements AfterViewInit {\r\n\r\n    @Input(\"pReorderableRowHandle\") index: number;\r\n\r\n    constructor(public el: ElementRef) {}\r\n\r\n    ngAfterViewInit() {\r\n        DomHandler.addClass(this.el.nativeElement, 'p-datatable-reorderablerow-handle');\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[pReorderableRow]'\r\n})\r\nexport class ReorderableRow implements AfterViewInit {\r\n\r\n    @Input(\"pReorderableRow\") index: number;\r\n\r\n    @Input() pReorderableRowDisabled: boolean;\r\n\r\n    mouseDownListener: any;\r\n\r\n    dragStartListener: any;\r\n\r\n    dragEndListener: any;\r\n\r\n    dragOverListener: any;\r\n\r\n    dragLeaveListener: any;\r\n\r\n    dropListener: any;\r\n\r\n    constructor(public dt: Table, public el: ElementRef, public zone: NgZone) {}\r\n\r\n    ngAfterViewInit() {\r\n        if (this.isEnabled()) {\r\n            this.el.nativeElement.droppable = true;\r\n            this.bindEvents();\r\n        }\r\n    }\r\n\r\n    bindEvents() {\r\n        this.zone.runOutsideAngular(() => {\r\n            this.mouseDownListener = this.onMouseDown.bind(this);\r\n            this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\r\n\r\n            this.dragStartListener = this.onDragStart.bind(this);\r\n            this.el.nativeElement.addEventListener('dragstart', this.dragStartListener);\r\n\r\n            this.dragEndListener = this.onDragEnd.bind(this);\r\n            this.el.nativeElement.addEventListener('dragend', this.dragEndListener);\r\n\r\n            this.dragOverListener = this.onDragOver.bind(this);\r\n            this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\r\n\r\n            this.dragLeaveListener = this.onDragLeave.bind(this);\r\n            this.el.nativeElement.addEventListener('dragleave', this.dragLeaveListener);\r\n        });\r\n    }\r\n\r\n    unbindEvents() {\r\n        if (this.mouseDownListener) {\r\n            document.removeEventListener('mousedown', this.mouseDownListener);\r\n            this.mouseDownListener = null;\r\n        }\r\n\r\n        if (this.dragStartListener) {\r\n            document.removeEventListener('dragstart', this.dragStartListener);\r\n            this.dragStartListener = null;\r\n        }\r\n\r\n        if (this.dragEndListener) {\r\n            document.removeEventListener('dragend', this.dragEndListener);\r\n            this.dragEndListener = null;\r\n        }\r\n\r\n        if (this.dragOverListener) {\r\n            document.removeEventListener('dragover', this.dragOverListener);\r\n            this.dragOverListener = null;\r\n        }\r\n\r\n        if (this.dragLeaveListener) {\r\n            document.removeEventListener('dragleave', this.dragLeaveListener);\r\n            this.dragLeaveListener = null;\r\n        }\r\n    }\r\n\r\n    onMouseDown(event) {\r\n        if (DomHandler.hasClass(event.target, 'p-datatable-reorderablerow-handle'))\r\n            this.el.nativeElement.draggable = true;\r\n        else\r\n            this.el.nativeElement.draggable = false;\r\n    }\r\n\r\n    onDragStart(event) {\r\n        this.dt.onRowDragStart(event, this.index);\r\n    }\r\n\r\n    onDragEnd(event) {\r\n        this.dt.onRowDragEnd(event);\r\n        this.el.nativeElement.draggable = false;\r\n    }\r\n\r\n    onDragOver(event) {\r\n        this.dt.onRowDragOver(event, this.index, this.el.nativeElement);\r\n        event.preventDefault();\r\n    }\r\n\r\n    onDragLeave(event) {\r\n        this.dt.onRowDragLeave(event, this.el.nativeElement);\r\n    }\r\n\r\n    isEnabled() {\r\n        return this.pReorderableRowDisabled !== true;\r\n    }\r\n\r\n    @HostListener('drop', ['$event'])\r\n    onDrop(event) {\r\n        if (this.isEnabled() && this.dt.rowDragging) {\r\n            this.dt.onRowDrop(event, this.el.nativeElement);\r\n        }\r\n\r\n        event.preventDefault()\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule,PaginatorModule,ScrollingModule],\r\n    exports: [Table,SharedModule,SortableColumn,SelectableRow,RowToggler,ContextMenuRow,ResizableColumn,ReorderableColumn,EditableColumn,CellEditor,SortIcon,TableRadioButton,TableCheckbox,TableHeaderCheckbox,ReorderableRowHandle,ReorderableRow,SelectableRowDblClick,EditableRow,InitEditableRow,SaveEditableRow,CancelEditableRow,ScrollingModule],\r\n    declarations: [Table,SortableColumn,SelectableRow,RowToggler,ContextMenuRow,ResizableColumn,ReorderableColumn,EditableColumn,CellEditor,TableBody,ScrollableView,SortIcon,TableRadioButton,TableCheckbox,TableHeaderCheckbox,ReorderableRowHandle,ReorderableRow,SelectableRowDblClick,EditableRow,InitEditableRow,SaveEditableRow,CancelEditableRow]\r\n})\r\nexport class TableModule { }\r\n"]}