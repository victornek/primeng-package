{"version":3,"sources":["../../src/app/components/dragdrop/dragdrop.ts"],"names":["Draggable","el","zone","this","onDragStart","EventEmitter","onDragEnd","onDrag","Object","defineProperty","prototype","_pDraggableDisabled","unbindMouseListeners","nativeElement","draggable","bindMouseListeners","ngAfterViewInit","pDraggableDisabled","bindDragListener","_this","dragListener","runOutsideAngular","drag","bind","addEventListener","unbindDragListener","removeEventListener","mouseDownListener","mouseUpListener","mousedown","mouseup","event","emit","dragStart","allowDrag","dragEffect","dataTransfer","effectAllowed","setData","scope","preventDefault","dragEnd","handle","target","dragHandle","DomHandler","matches","ngOnDestroy","Directive","args","selector","ElementRef","NgZone","Input","Output","HostListener","Droppable","onDragEnter","onDragLeave","onDrop","pDroppableDisabled","bindDragOverListener","dragOverListener","dragOver","unbindDragOverListener","drop","allowDrop","removeClass","dragEnter","dropEffect","addClass","dragLeave","dragScope","getData","Array","j","length","NgModule","imports","CommonModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Directive,OnDestroy,AfterViewInit,ElementRef,HostListener,Input,Output,EventEmitter,NgZone} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {DomHandler} from 'primeng/dom';\r\n\r\n@Directive({\r\n    selector: '[pDraggable]'\r\n})\r\nexport class Draggable implements AfterViewInit, OnDestroy {\r\n    \r\n    @Input('pDraggable') scope: string;\r\n        \r\n    @Input() dragEffect: string;\r\n    \r\n    @Input() dragHandle: string;\r\n    \r\n    @Output() onDragStart: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onDragEnd: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onDrag: EventEmitter<any> = new EventEmitter();\r\n    \r\n    handle: any;\r\n\r\n    dragListener: any;\r\n\r\n    mouseDownListener: any;\r\n\r\n    mouseUpListener: any;\r\n\r\n    _pDraggableDisabled: boolean;\r\n        \r\n    constructor(public el: ElementRef, public zone: NgZone) {}\r\n\r\n    @Input() get pDraggableDisabled(): boolean {\r\n        return this._pDraggableDisabled;\r\n    }\r\n    set pDraggableDisabled(_pDraggableDisabled:boolean) {\r\n        this._pDraggableDisabled = _pDraggableDisabled;\r\n        \r\n        if (this._pDraggableDisabled) {\r\n            this.unbindMouseListeners();\r\n        }\r\n        else {\r\n            this.el.nativeElement.draggable = true;\r\n            this.bindMouseListeners();\r\n        }\r\n    }\r\n    \r\n    ngAfterViewInit() {\r\n        if (!this.pDraggableDisabled) {\r\n            this.el.nativeElement.draggable = true;\r\n            this.bindMouseListeners();\r\n        }\r\n    }\r\n\r\n    bindDragListener() {\r\n        if (!this.dragListener) {\r\n            this.zone.runOutsideAngular(() => {\r\n                this.dragListener = this.drag.bind(this);\r\n                this.el.nativeElement.addEventListener('drag', this.dragListener);\r\n            });\r\n        }\r\n    }\r\n\r\n    unbindDragListener() {\r\n        if (this.dragListener) {\r\n            this.zone.runOutsideAngular(() => {\r\n                this.el.nativeElement.removeEventListener('drag', this.dragListener);\r\n                this.dragListener = null;\r\n            });\r\n        }\r\n    }\r\n\r\n    bindMouseListeners() {\r\n        if (!this.mouseDownListener && !this.mouseUpListener) {\r\n            this.zone.runOutsideAngular(() => {\r\n                this.mouseDownListener = this.mousedown.bind(this);\r\n                this.mouseUpListener = this.mouseup.bind(this);\r\n                this.el.nativeElement.addEventListener('mousedown', this.mouseDownListener);\r\n                this.el.nativeElement.addEventListener('mouseup', this.mouseUpListener);\r\n            });\r\n        }\r\n    }\r\n\r\n    unbindMouseListeners() {\r\n        if (this.mouseDownListener && this.mouseUpListener) {\r\n            this.zone.runOutsideAngular(() => {\r\n                this.el.nativeElement.removeEventListener('mousedown', this.mouseDownListener);\r\n                this.el.nativeElement.removeEventListener('mouseup', this.mouseUpListener);\r\n                this.mouseDownListener = null;\r\n                this.mouseUpListener = null;\r\n            });\r\n        }\r\n    }\r\n\r\n    drag(event) {\r\n        this.onDrag.emit(event);\r\n    }\r\n\r\n    @HostListener('dragstart', ['$event']) \r\n    dragStart(event) {\r\n        if (this.allowDrag() && !this.pDraggableDisabled) {\r\n            if (this.dragEffect) {\r\n                event.dataTransfer.effectAllowed = this.dragEffect;\r\n            }\r\n            event.dataTransfer.setData('text', this.scope);\r\n            \r\n            this.onDragStart.emit(event);\r\n\r\n            this.bindDragListener();\r\n        }\r\n        else {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    @HostListener('dragend', ['$event']) \r\n    dragEnd(event) {\r\n        this.onDragEnd.emit(event);\r\n        this.unbindDragListener();\r\n    }\r\n    \r\n    mousedown(event) {\r\n        this.handle = event.target;\r\n    }\r\n\r\n    mouseup(event) {\r\n        this.handle = null;\r\n    }\r\n    \r\n    allowDrag() : boolean {\r\n        if (this.dragHandle && this.handle)\r\n            return DomHandler.matches(this.handle, this.dragHandle);\r\n        else\r\n            return true;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.unbindDragListener();\r\n        this.unbindMouseListeners();\r\n    }\r\n    \r\n}\r\n\r\n@Directive({\r\n    selector: '[pDroppable]'\r\n})\r\nexport class Droppable implements AfterViewInit, OnDestroy {\r\n    \r\n    @Input('pDroppable') scope: string|string[];\r\n\r\n    @Input() pDroppableDisabled: boolean;\r\n        \r\n    @Input() dropEffect: string;\r\n        \r\n    @Output() onDragEnter: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onDragLeave: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onDrop: EventEmitter<any> = new EventEmitter();\r\n    \r\n    constructor(public el: ElementRef, public zone: NgZone) {}\r\n\r\n    dragOverListener: any;\r\n\r\n    ngAfterViewInit() {\r\n        if (!this.pDroppableDisabled) {\r\n            this.bindDragOverListener();\r\n        }\r\n    }\r\n\r\n    bindDragOverListener() {\r\n        if (!this.dragOverListener) {\r\n            this.zone.runOutsideAngular(() => {\r\n                this.dragOverListener = this.dragOver.bind(this);\r\n                this.el.nativeElement.addEventListener('dragover', this.dragOverListener);\r\n            });\r\n        }\r\n    }\r\n\r\n    unbindDragOverListener() {\r\n        if (this.dragOverListener) {\r\n            this.zone.runOutsideAngular(() => {\r\n                this.el.nativeElement.removeEventListener('dragover', this.dragOverListener);\r\n                this.dragOverListener = null;\r\n            });\r\n        }\r\n    }\r\n\r\n    dragOver(event) {\r\n        event.preventDefault();\r\n    }\r\n            \r\n    @HostListener('drop', ['$event'])\r\n    drop(event) {\r\n        if (this.allowDrop(event)) {\r\n            DomHandler.removeClass(this.el.nativeElement, 'p-draggable-enter');\r\n            event.preventDefault();\r\n            this.onDrop.emit(event);\r\n        }\r\n    }\r\n    \r\n    @HostListener('dragenter', ['$event']) \r\n    dragEnter(event) {\r\n        event.preventDefault();\r\n        \r\n        if (this.dropEffect) {\r\n            event.dataTransfer.dropEffect = this.dropEffect;\r\n        }\r\n            \r\n        DomHandler.addClass(this.el.nativeElement, 'p-draggable-enter');\r\n        this.onDragEnter.emit(event);\r\n    }\r\n    \r\n    @HostListener('dragleave', ['$event']) \r\n    dragLeave(event) {\r\n        event.preventDefault();\r\n                \r\n        DomHandler.removeClass(this.el.nativeElement, 'p-draggable-enter');\r\n        this.onDragLeave.emit(event);\r\n    }\r\n        \r\n    allowDrop(event): boolean {\r\n        let dragScope = event.dataTransfer.getData('text');\r\n        if (typeof (this.scope) == \"string\" && dragScope == this.scope) {\r\n            return true;\r\n        }\r\n        else if (this.scope instanceof Array) {\r\n            for(let j = 0; j < this.scope.length; j++) {\r\n                if (dragScope == this.scope[j]) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.unbindDragOverListener();\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [Draggable,Droppable],\r\n    declarations: [Draggable,Droppable]\r\n})\r\nexport class DragDropModule { }"]}