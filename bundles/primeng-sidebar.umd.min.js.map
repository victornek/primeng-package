{"version":3,"sources":["../../src/app/components/sidebar/sidebar.ts"],"names":["Sidebar","el","renderer","cd","this","position","blockScroll","autoZIndex","baseZIndex","modal","dismissible","showCloseIcon","closeOnEscape","onShow","EventEmitter","onHide","visibleChange","prototype","ngAfterViewInit","initialized","appendTo","document","body","appendChild","containerViewChild","nativeElement","DomHandler","visible","show","ngAfterContentInit","_this","templates","forEach","item","getType","contentTemplate","template","Object","defineProperty","_visible","val","preventVisibleChangePropagation","hide","ngAfterViewChecked","executePostDisplayActions","emit","style","zIndex","String","zindex","enableModality","disableModality","close","event","preventDefault","mask","createElement","parseInt","addMultipleClasses","maskClickListener","listen","addClass","unbindMaskClickListener","removeChild","removeClass","onAnimationStart","toState","bindDocumentEscapeListener","unbindGlobalListeners","documentTarget","ownerDocument","documentEscapeListener","which","unbindDocumentEscapeListener","ngOnDestroy","Component","args","selector","animations","trigger","state","opacity","transition","animate","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","ChangeDetectorRef","Input","ViewChild","ContentChildren","PrimeTemplate","Output","NgModule","imports","CommonModule","RippleModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,AfterViewInit,AfterViewChecked,OnDestroy,Input,Output,EventEmitter,ViewChild,ElementRef,Renderer2,ChangeDetectionStrategy, ViewEncapsulation, ContentChildren, QueryList, AfterContentInit, TemplateRef, ChangeDetectorRef} from '@angular/core';\r\nimport {trigger, state, style, transition, animate} from '@angular/animations';\r\nimport {CommonModule} from '@angular/common';\r\nimport {RippleModule} from 'primeng/ripple';\r\nimport {DomHandler} from 'primeng/dom';\r\nimport {PrimeTemplate} from 'primeng/api';\r\n\r\n@Component({\r\n    selector: 'p-sidebar',\r\n    template: `\r\n        <div #container [ngClass]=\"{'p-sidebar':true, 'p-sidebar-active': visible,\r\n            'p-sidebar-left': (position === 'left'), 'p-sidebar-right': (position === 'right'),\r\n            'p-sidebar-top': (position === 'top'), 'p-sidebar-bottom': (position === 'bottom'),\r\n            'p-sidebar-full': fullScreen}\"\r\n            [@panelState]=\"visible ? 'visible' : 'hidden'\" (@panelState.start)=\"onAnimationStart($event)\" [ngStyle]=\"style\" [class]=\"styleClass\"  role=\"complementary\" [attr.aria-modal]=\"modal\">\r\n            <div class=\"p-sidebar-content\">\r\n                <button type=\"button\" class=\"p-sidebar-close p-link\" *ngIf=\"showCloseIcon\" (click)=\"close($event)\" (keydown.enter)=\"close($event)\" [attr.aria-label]=\"ariaCloseLabel\" pRipple>\r\n                    <span class=\"p-sidebar-close-icon pi pi-times\"></span>\r\n                </button>\r\n                <ng-content></ng-content>\r\n                <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\r\n            </div>\r\n        </div>\r\n    `,\r\n    animations: [\r\n        trigger('panelState', [\r\n            state('hidden', style({\r\n                opacity: 0\r\n            })),\r\n            state('visible', style({\r\n                opacity: 1\r\n            })),\r\n            transition('visible => hidden', animate('300ms ease-in')),\r\n            transition('hidden => visible', animate('300ms ease-out'))\r\n        ])\r\n    ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None,\r\n    styleUrls: ['./sidebar.css']\r\n})\r\nexport class Sidebar implements AfterViewInit, AfterContentInit, AfterViewChecked, OnDestroy {\r\n\r\n    @Input() position: string = 'left';\r\n\r\n    @Input() fullScreen: boolean;\r\n\r\n    @Input() appendTo: string;\r\n\r\n    @Input() blockScroll: boolean = false;\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Input() ariaCloseLabel: string;\r\n\r\n    @Input() autoZIndex: boolean = true;\r\n\r\n    @Input() baseZIndex: number = 0;\r\n\r\n    @Input() modal: boolean = true;\r\n\r\n    @Input() dismissible: boolean = true;\r\n\r\n    @Input() showCloseIcon: boolean = true;\r\n\r\n    @Input() closeOnEscape: boolean = true;\r\n\r\n    @ViewChild('container') containerViewChild: ElementRef;\r\n\r\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\r\n\r\n    @Output() onShow: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onHide: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() visibleChange:EventEmitter<any> = new EventEmitter();\r\n\r\n    initialized: boolean;\r\n\r\n    _visible: boolean;\r\n\r\n    preventVisibleChangePropagation: boolean;\r\n\r\n    mask: HTMLDivElement;\r\n\r\n    maskClickListener: Function;\r\n\r\n    documentEscapeListener: Function;\r\n\r\n    executePostDisplayActions: boolean;\r\n\r\n    contentTemplate: TemplateRef<any>;\r\n\r\n    constructor(public el: ElementRef, public renderer: Renderer2, public cd: ChangeDetectorRef) {}\r\n\r\n    ngAfterViewInit() {\r\n        this.initialized = true;\r\n\r\n        if (this.appendTo) {\r\n            if (this.appendTo === 'body')\r\n                document.body.appendChild(this.containerViewChild.nativeElement);\r\n            else\r\n                DomHandler.appendChild(this.containerViewChild.nativeElement, this.appendTo);\r\n        }\r\n\r\n        if (this.visible) {\r\n            this.show();\r\n        }\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch(item.getType()) {\r\n                case 'content':\r\n                    this.contentTemplate = item.template;\r\n                break;\r\n\r\n                default:\r\n                    this.contentTemplate = item.template;\r\n                break;\r\n            }\r\n        });\r\n    }\r\n\r\n    @Input() get visible(): boolean {\r\n        return this._visible;\r\n    }\r\n\r\n    set visible(val:boolean) {\r\n        this._visible = val;\r\n\r\n        if (this.initialized && this.containerViewChild && this.containerViewChild.nativeElement) {\r\n            if (this._visible)\r\n                this.show();\r\n            else {\r\n                if (this.preventVisibleChangePropagation)\r\n                    this.preventVisibleChangePropagation = false;\r\n                else\r\n                    this.hide();\r\n            }\r\n        }\r\n    }\r\n\r\n    ngAfterViewChecked() {\r\n        if (this.executePostDisplayActions) {\r\n            this.onShow.emit({});\r\n            this.executePostDisplayActions = false;\r\n        }\r\n    }\r\n\r\n    show() {\r\n        this.executePostDisplayActions = true;\r\n        if (this.autoZIndex) {\r\n            this.containerViewChild.nativeElement.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\r\n        }\r\n\r\n        if (this.modal) {\r\n            this.enableModality();\r\n        }\r\n    }\r\n\r\n    hide() {\r\n        this.onHide.emit({});\r\n\r\n        if (this.modal) {\r\n            this.disableModality();\r\n        }\r\n    }\r\n\r\n    close(event: Event) {\r\n        this.preventVisibleChangePropagation = true;\r\n        this.hide();\r\n        this.visibleChange.emit(false);\r\n        event.preventDefault();\r\n    }\r\n\r\n    enableModality() {\r\n        if (!this.mask) {\r\n            this.mask = document.createElement('div');\r\n            this.mask.style.zIndex = String(parseInt(this.containerViewChild.nativeElement.style.zIndex) - 1);\r\n            DomHandler.addMultipleClasses(this.mask, 'p-component-overlay p-sidebar-mask');\r\n\r\n            if (this.dismissible){\r\n                this.maskClickListener = this.renderer.listen(this.mask, 'click', (event: any) => {\r\n                    if (this.dismissible) {\r\n                        this.close(event);\r\n                    }\r\n                });\r\n            }\r\n\r\n            document.body.appendChild(this.mask);\r\n            if (this.blockScroll) {\r\n                DomHandler.addClass(document.body, 'p-overflow-hidden');\r\n            }\r\n        }\r\n    }\r\n\r\n    disableModality() {\r\n        if (this.mask) {\r\n            this.unbindMaskClickListener();\r\n            document.body.removeChild(this.mask);\r\n            if (this.blockScroll) {\r\n                DomHandler.removeClass(document.body, 'p-overflow-hidden');\r\n            }\r\n            this.mask = null;\r\n        }\r\n    }\r\n\r\n    onAnimationStart(event){\r\n        switch(event.toState) {\r\n            case 'visible':\r\n                if (this.closeOnEscape) {\r\n                    this.bindDocumentEscapeListener();\r\n                }\r\n            break;\r\n\r\n            case 'hidden':\r\n                this.unbindGlobalListeners();\r\n            break;\r\n        }\r\n    }\r\n\r\n    bindDocumentEscapeListener() {\r\n        const documentTarget: any = this.el ? this.el.nativeElement.ownerDocument : 'document';\r\n\r\n        this.documentEscapeListener = this.renderer.listen(documentTarget, 'keydown', (event) => {\r\n            if (event.which == 27) {\r\n                if (parseInt(this.containerViewChild.nativeElement.style.zIndex) === (DomHandler.zindex + this.baseZIndex)) {\r\n                    this.close(event);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    unbindDocumentEscapeListener() {\r\n        if (this.documentEscapeListener) {\r\n            this.documentEscapeListener();\r\n            this.documentEscapeListener = null;\r\n        }\r\n    }\r\n\r\n    unbindMaskClickListener() {\r\n        if (this.maskClickListener) {\r\n            this.maskClickListener();\r\n            this.maskClickListener = null;\r\n        }\r\n    }\r\n\r\n    unbindGlobalListeners() {\r\n        this.unbindMaskClickListener();\r\n        this.unbindDocumentEscapeListener();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.initialized = false;\r\n\r\n        if (this.visible) {\r\n            this.hide();\r\n        }\r\n\r\n        if (this.appendTo) {\r\n            this.el.nativeElement.appendChild(this.containerViewChild.nativeElement);\r\n        }\r\n\r\n\t\tthis.unbindGlobalListeners();\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule,RippleModule],\r\n    exports: [Sidebar],\r\n    declarations: [Sidebar]\r\n})\r\nexport class SidebarModule { }\r\n"]}